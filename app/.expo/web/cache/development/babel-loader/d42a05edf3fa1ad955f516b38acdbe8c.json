{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\Fido\\\\Documents\\\\GitHub\\\\UI-Design-React\\\\app\\\\node_modules\\\\react-native-paper\\\\src\\\\components\\\\Badge.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport color from 'color';\nimport { black, white } from \"../styles/colors\";\nimport { withTheme } from \"../core/theming\";\n\nvar Badge = function (_React$Component) {\n  _inherits(Badge, _React$Component);\n\n  var _super = _createSuper(Badge);\n\n  function Badge() {\n    var _this;\n\n    _classCallCheck(this, Badge);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      opacity: new Animated.Value(_this.props.visible ? 1 : 0)\n    };\n    return _this;\n  }\n\n  _createClass(Badge, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var visible = this.props.visible;\n\n      if (visible !== prevProps.visible) {\n        Animated.timing(this.state.opacity, {\n          toValue: visible ? 1 : 0,\n          duration: 150,\n          useNativeDriver: true\n        }).start();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          children = _this$props.children,\n          size = _this$props.size,\n          style = _this$props.style,\n          theme = _this$props.theme;\n      var opacity = this.state.opacity;\n\n      var _ref = StyleSheet.flatten(style) || {},\n          _ref$backgroundColor = _ref.backgroundColor,\n          backgroundColor = _ref$backgroundColor === void 0 ? theme.colors.notification : _ref$backgroundColor,\n          restStyle = _objectWithoutProperties(_ref, [\"backgroundColor\"]);\n\n      var textColor = color(backgroundColor).light() ? black : white;\n      var borderRadius = size / 2;\n      return React.createElement(Animated.Text, {\n        numberOfLines: 1,\n        style: [{\n          opacity: opacity,\n          backgroundColor: backgroundColor,\n          color: textColor,\n          fontSize: size * 0.5,\n          fontFamily: theme.fonts.regular,\n          lineHeight: size,\n          height: size,\n          minWidth: size,\n          borderRadius: borderRadius\n        }, styles.container, restStyle],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 7\n        }\n      }, children);\n    }\n  }]);\n\n  return Badge;\n}(React.Component);\n\nBadge.defaultProps = {\n  visible: true,\n  size: 20\n};\nexport default withTheme(Badge);\nvar styles = StyleSheet.create({\n  container: {\n    alignSelf: 'flex-end',\n    textAlign: 'center',\n    textAlignVertical: 'center',\n    paddingHorizontal: 4,\n    overflow: 'hidden'\n  }\n});","map":{"version":3,"sources":["C:/Users/Fido/Documents/GitHub/UI-Design-React/app/node_modules/react-native-paper/src/components/Badge.js"],"names":["React","color","black","white","withTheme","Badge","state","opacity","Animated","Value","props","visible","prevProps","timing","toValue","duration","useNativeDriver","start","children","size","style","theme","StyleSheet","flatten","backgroundColor","colors","notification","restStyle","textColor","light","borderRadius","fontSize","fontFamily","fonts","regular","lineHeight","height","minWidth","styles","container","Component","defaultProps","create","alignSelf","textAlign","textAlignVertical","paddingHorizontal","overflow"],"mappings":";;;;;;;;;;;;AAEA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;;;AAEA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,EAAgBC,KAAhB;AACA,SAASC,SAAT;;IA2CMC,K;;;;;;;;;;;;;;;UAMJC,K,GAAQ;AACNC,MAAAA,OAAO,EAAE,IAAIC,QAAQ,CAACC,KAAb,CAAmB,MAAKC,KAAL,CAAWC,OAAX,GAAqB,CAArB,GAAyB,CAA5C;AADH,K;;;;;;uCAIWC,S,EAAkB;AAAA,UAC3BD,OAD2B,GACf,KAAKD,KADU,CAC3BC,OAD2B;;AAGnC,UAAIA,OAAO,KAAKC,SAAS,CAACD,OAA1B,EAAmC;AACjCH,QAAAA,QAAQ,CAACK,MAAT,CAAgB,KAAKP,KAAL,CAAWC,OAA3B,EAAoC;AAClCO,UAAAA,OAAO,EAAEH,OAAO,GAAG,CAAH,GAAO,CADW;AAElCI,UAAAA,QAAQ,EAAE,GAFwB;AAGlCC,UAAAA,eAAe,EAAE;AAHiB,SAApC,EAIGC,KAJH;AAKD;AACF;;;6BAEQ;AAAA,wBACkC,KAAKP,KADvC;AAAA,UACCQ,QADD,eACCA,QADD;AAAA,UACWC,IADX,eACWA,IADX;AAAA,UACiBC,KADjB,eACiBA,KADjB;AAAA,UACwBC,KADxB,eACwBA,KADxB;AAAA,UAECd,OAFD,GAEa,KAAKD,KAFlB,CAECC,OAFD;;AAAA,iBAKLe,UAAU,CAACC,OAAX,CAAmBH,KAAnB,KAA6B,EALxB;AAAA,sCAICI,eAJD;AAAA,UAICA,eAJD,qCAImBH,KAAK,CAACI,MAAN,CAAaC,YAJhC;AAAA,UAIiDC,SAJjD;;AAMP,UAAMC,SAAS,GAAG3B,KAAK,CAACuB,eAAD,CAAL,CAAuBK,KAAvB,KAAiC3B,KAAjC,GAAyCC,KAA3D;AAEA,UAAM2B,YAAY,GAAGX,IAAI,GAAG,CAA5B;AAEA,aACE,oBAAC,QAAD,CAAU,IAAV;AACE,QAAA,aAAa,EAAE,CADjB;AAEE,QAAA,KAAK,EAAE,CACL;AACEZ,UAAAA,OAAO,EAAPA,OADF;AAEEiB,UAAAA,eAAe,EAAfA,eAFF;AAGEvB,UAAAA,KAAK,EAAE2B,SAHT;AAIEG,UAAAA,QAAQ,EAAEZ,IAAI,GAAG,GAJnB;AAKEa,UAAAA,UAAU,EAAEX,KAAK,CAACY,KAAN,CAAYC,OAL1B;AAMEC,UAAAA,UAAU,EAAEhB,IANd;AAOEiB,UAAAA,MAAM,EAAEjB,IAPV;AAQEkB,UAAAA,QAAQ,EAAElB,IARZ;AASEW,UAAAA,YAAY,EAAZA;AATF,SADK,EAYLQ,MAAM,CAACC,SAZF,EAaLZ,SAbK,CAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAkBGT,QAlBH,CADF;AAsBD;;;;EAtDiBlB,KAAK,CAACwC,S;;AAApBnC,K,CACGoC,Y,GAAe;AACpB9B,EAAAA,OAAO,EAAE,IADW;AAEpBQ,EAAAA,IAAI,EAAE;AAFc,C;AAwDxB,eAAef,SAAS,CAACC,KAAD,CAAxB;AAEA,IAAMiC,MAAM,GAAGhB,UAAU,CAACoB,MAAX,CAAkB;AAC/BH,EAAAA,SAAS,EAAE;AACTI,IAAAA,SAAS,EAAE,UADF;AAETC,IAAAA,SAAS,EAAE,QAFF;AAGTC,IAAAA,iBAAiB,EAAE,QAHV;AAITC,IAAAA,iBAAiB,EAAE,CAJV;AAKTC,IAAAA,QAAQ,EAAE;AALD;AADoB,CAAlB,CAAf","sourcesContent":["/* @flow */\n\nimport * as React from 'react';\nimport { Animated, StyleSheet } from 'react-native';\nimport color from 'color';\nimport { black, white } from '../styles/colors';\nimport { withTheme } from '../core/theming';\nimport type { Theme } from '../types';\n\ntype Props = {|\n  /**\n   * Whether the badge is visible\n   */\n  visible: boolean,\n  /**\n   * Content of the `Badge`.\n   */\n  children?: string | number,\n  /**\n   * Size of the `Badge`.\n   */\n  size: number,\n  style?: any,\n  /**\n   * @optional\n   */\n  theme: Theme,\n|};\n\ntype State = {\n  opacity: Animated.Value,\n};\n\n/**\n * Badges are small status descriptors for UI elements.\n * A badge consists of a small circle, typically containing a number or other short set of characters, that appears in proximity to another object.\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Badge } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Badge>3</Badge>\n * );\n *\n * export default MyComponent;\n * ```\n */\nclass Badge extends React.Component<Props, State> {\n  static defaultProps = {\n    visible: true,\n    size: 20,\n  };\n\n  state = {\n    opacity: new Animated.Value(this.props.visible ? 1 : 0),\n  };\n\n  componentDidUpdate(prevProps: Props) {\n    const { visible } = this.props;\n\n    if (visible !== prevProps.visible) {\n      Animated.timing(this.state.opacity, {\n        toValue: visible ? 1 : 0,\n        duration: 150,\n        useNativeDriver: true,\n      }).start();\n    }\n  }\n\n  render() {\n    const { children, size, style, theme } = this.props;\n    const { opacity } = this.state;\n\n    const { backgroundColor = theme.colors.notification, ...restStyle } =\n      StyleSheet.flatten(style) || {};\n    const textColor = color(backgroundColor).light() ? black : white;\n\n    const borderRadius = size / 2;\n\n    return (\n      <Animated.Text\n        numberOfLines={1}\n        style={[\n          {\n            opacity,\n            backgroundColor,\n            color: textColor,\n            fontSize: size * 0.5,\n            fontFamily: theme.fonts.regular,\n            lineHeight: size,\n            height: size,\n            minWidth: size,\n            borderRadius,\n          },\n          styles.container,\n          restStyle,\n        ]}\n      >\n        {children}\n      </Animated.Text>\n    );\n  }\n}\n\nexport default withTheme(Badge);\n\nconst styles = StyleSheet.create({\n  container: {\n    alignSelf: 'flex-end',\n    textAlign: 'center',\n    textAlignVertical: 'center',\n    paddingHorizontal: 4,\n    overflow: 'hidden',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}