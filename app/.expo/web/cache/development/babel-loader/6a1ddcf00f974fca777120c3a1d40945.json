{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { ApolloClient } from \"apollo-client\";\nimport { createHttpLink } from \"apollo-link-http\";\nimport { setContext } from \"apollo-link-context\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport AsyncStorage from \"react-native-web/dist/exports/AsyncStorage\";\nvar httpLink = createHttpLink({\n  uri: \"http://192.168.1.2:3000/api/graphql\"\n});\nvar authLink = setContext(function _callee(_, _ref) {\n  var headers, token;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          headers = _ref.headers;\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(AsyncStorage.getItem(\"token\"));\n\n        case 3:\n          token = _context.sent;\n          return _context.abrupt(\"return\", {\n            headers: _objectSpread(_objectSpread({}, headers), {}, {\n              authorization: token ? \"Bearer \" + token : \"\"\n            })\n          });\n\n        case 5:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n});\nvar client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache()\n});\nexport default client;","map":{"version":3,"sources":["C:/Users/Fido/Documents/GitHub/UI-Design-React/app/client.js"],"names":["ApolloClient","createHttpLink","setContext","InMemoryCache","httpLink","uri","authLink","_","headers","AsyncStorage","getItem","token","authorization","client","link","concat","cache"],"mappings":";;;;;;;AAAA,SAASA,YAAT,QAA6B,eAA7B;AACA,SAASC,cAAT,QAA+B,kBAA/B;AACA,SAASC,UAAT,QAA2B,qBAA3B;AACA,SAASC,aAAT,QAA8B,uBAA9B;;AAGA,IAAMC,QAAQ,GAAGH,cAAc,CAAC;AAC9BI,EAAAA,GAAG,EAAE;AADyB,CAAD,CAA/B;AAIA,IAAMC,QAAQ,GAAGJ,UAAU,CAAC,iBAAOK,CAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAYC,UAAAA,OAAZ,QAAYA,OAAZ;AAAA;AAAA,2CAENC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAFM;;AAAA;AAEpBC,UAAAA,KAFoB;AAAA,2CAInB;AACLH,YAAAA,OAAO,kCACFA,OADE;AAELI,cAAAA,aAAa,EAAED,KAAK,eAAaA,KAAb,GAAuB;AAFtC;AADF,WAJmB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAD,CAA3B;AAYA,IAAME,MAAM,GAAG,IAAIb,YAAJ,CAAiB;AAC9Bc,EAAAA,IAAI,EAAER,QAAQ,CAACS,MAAT,CAAgBX,QAAhB,CADwB;AAE9BY,EAAAA,KAAK,EAAE,IAAIb,aAAJ;AAFuB,CAAjB,CAAf;AAKA,eAAeU,MAAf","sourcesContent":["import { ApolloClient } from \"apollo-client\";\r\nimport { createHttpLink } from \"apollo-link-http\";\r\nimport { setContext } from \"apollo-link-context\";\r\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\r\nimport { AsyncStorage } from \"react-native\";\r\n\r\nconst httpLink = createHttpLink({\r\n  uri: \"http://192.168.1.2:3000/api/graphql\",\r\n});\r\n\r\nconst authLink = setContext(async (_, { headers }) => {\r\n  // get the authentication token from local storage if it exists\r\n  const token = await AsyncStorage.getItem(\"token\");\r\n  // return the headers to the context so httpLink can read them\r\n  return {\r\n    headers: {\r\n      ...headers,\r\n      authorization: token ? `Bearer ${token}` : \"\",\r\n    },\r\n  };\r\n});\r\n\r\nconst client = new ApolloClient({\r\n  link: authLink.concat(httpLink),\r\n  cache: new InMemoryCache(),\r\n});\r\n\r\nexport default client;\r\n"]},"metadata":{},"sourceType":"module"}