{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\Fido\\\\Documents\\\\GitHub\\\\UI-Design-React\\\\app\\\\screens\\\\Trip\\\\index.tsx\";\nimport React from \"react\";\nimport { useSetNavigationOptions } from \"../../hooks/useSetNavigationOptions\";\nimport { useAuth } from \"../../hooks/useAuth\";\nimport { Layout } from \"./Layout\";\nimport { useQuery, useMutation } from \"@apollo/react-hooks\";\nimport { Loading } from \"../Loading\";\nimport { useAlert } from \"../../hooks/useAlert\";\nimport { useRoute } from \"@react-navigation/native\";\nimport { GET_TRIPS } from \"../../utility/querys/getTrips\";\nimport { TRIP_PLACE_MUTATION } from \"../../utility/mutations/addTripPlace\";\nexport var Trip = function Trip(_ref) {\n  var navigation = _ref.navigation;\n  var route = useRoute();\n  var params = route.params;\n  var comeFromRoute = params;\n\n  var _useAuth = useAuth(),\n      token = _useAuth.token;\n\n  var userId = token !== null ? token : \"\";\n\n  var _useQuery = useQuery(GET_TRIPS, {\n    variables: {\n      userId: userId\n    }\n  }),\n      loading = _useQuery.loading,\n      error = _useQuery.error,\n      data = _useQuery.data;\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      loadingData = _React$useState2[0],\n      setLoadingData = _React$useState2[1];\n\n  var _useMutation = useMutation(TRIP_PLACE_MUTATION),\n      _useMutation2 = _slicedToArray(_useMutation, 1),\n      addTripPlace = _useMutation2[0];\n\n  useSetNavigationOptions(\"Trip\", true);\n\n  var handlePress = function handlePress(tripId) {\n    var inputData, result;\n    return _regeneratorRuntime.async(function handlePress$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (comeFromRoute) {\n              _context.next = 4;\n              break;\n            }\n\n            navigation.push(\"TripDetail\", {\n              tripId: tripId\n            });\n            _context.next = 12;\n            break;\n\n          case 4:\n            setLoadingData(true);\n            inputData = {\n              placeId: params.placeId,\n              tripId: tripId\n            };\n            _context.next = 8;\n            return _regeneratorRuntime.awrap(addTripPlace({\n              variables: {\n                input: inputData\n              }\n            }).then(function (_ref2) {\n              var data = _ref2.data;\n              return data.registerTripPlace;\n            }));\n\n          case 8:\n            result = _context.sent;\n            console.log(result);\n            setLoadingData(false);\n\n            if (result.ok) {\n              navigation.goBack();\n            } else {\n              useAlert({\n                titleError: \"Cant select that trip!\",\n                errorMessage: result.error\n              });\n            }\n\n          case 12:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  if (loading) {\n    return React.createElement(Loading, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 16\n      }\n    });\n  } else if (error) {\n    useAlert({\n      titleError: \"Oh snap! You got an error!\",\n      errorMessage: error\n    });\n  } else {\n    return React.createElement(Layout, {\n      navigation: navigation,\n      loadingData: loadingData,\n      comeFromRoute: comeFromRoute,\n      handlePress: handlePress,\n      token: token,\n      data: data,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 16\n      }\n    });\n  }\n};","map":{"version":3,"sources":["C:/Users/Fido/Documents/GitHub/UI-Design-React/app/screens/Trip/index.tsx"],"names":["React","useSetNavigationOptions","useAuth","Layout","useQuery","useMutation","Loading","useAlert","useRoute","GET_TRIPS","TRIP_PLACE_MUTATION","Trip","navigation","route","params","comeFromRoute","token","userId","variables","loading","error","data","useState","loadingData","setLoadingData","addTripPlace","handlePress","tripId","push","inputData","placeId","input","then","registerTripPlace","result","console","log","ok","goBack","titleError","errorMessage"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { useSetNavigationOptions } from '../../hooks/useSetNavigationOptions';\r\nimport { useAuth } from '../../hooks/useAuth';\r\nimport { Layout } from './Layout';\r\nimport { useQuery, useMutation } from \"@apollo/react-hooks\";\r\nimport { Loading } from \"../Loading\";\r\nimport { useAlert } from \"../../hooks/useAlert\";\r\nimport { useRoute } from \"@react-navigation/native\";\r\nimport { GET_TRIPS } from \"../../utility/querys/getTrips\";\r\nimport { TRIP_PLACE_MUTATION } from \"../../utility/mutations/addTripPlace\";\r\n\r\nexport const Trip = ({ navigation }) => {\r\n    const route:any = useRoute();\r\n    const params = route.params;\r\n    const comeFromRoute = params;\r\n\r\n    const { token } = useAuth();\r\n    const userId = token !== null ? token : \"\";\r\n    const { loading, error, data } = useQuery(GET_TRIPS, {\r\n        variables: { userId }\r\n    });\r\n\r\n    const [loadingData, setLoadingData] = React.useState(false);\r\n    const [addTripPlace] = useMutation(TRIP_PLACE_MUTATION);\r\n\r\n    useSetNavigationOptions(\"Trip\", true);\r\n\r\n    const handlePress = async (tripId) => {\r\n        if(!comeFromRoute) {\r\n            navigation.push(\"TripDetail\", {tripId: tripId})\r\n        }\r\n        else {\r\n            setLoadingData(true);\r\n\r\n            const inputData = {placeId: params.placeId, tripId: tripId };\r\n            const result = await addTripPlace({\r\n                variables: {\r\n                    input: inputData\r\n                },\r\n            }).then(({ data }) => {\r\n                return data.registerTripPlace;\r\n            });\r\n            \r\n            console.log(result);\r\n            setLoadingData(false);\r\n            if (result.ok) {\r\n                navigation.goBack();\r\n            }\r\n            else {\r\n                useAlert({titleError: \"Cant select that trip!\", errorMessage: result.error});\r\n            }\r\n        }\r\n    }\r\n\r\n    if( loading ) {\r\n        return <Loading />\r\n    }\r\n    else if ( error ) {\r\n        useAlert({titleError: \"Oh snap! You got an error!\", errorMessage: error});\r\n    }\r\n    else {\r\n        return <Layout navigation={navigation} loadingData={loadingData} comeFromRoute={comeFromRoute} handlePress={handlePress} token={token} data={data} />\r\n    }  \r\n}"]},"metadata":{},"sourceType":"module"}