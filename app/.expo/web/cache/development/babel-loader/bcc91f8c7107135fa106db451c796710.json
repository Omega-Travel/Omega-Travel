{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\Fido\\\\Documents\\\\GitHub\\\\UI-Design-React\\\\app\\\\node_modules\\\\react-native-paper\\\\src\\\\components\\\\Button.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport * as React from 'react';\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport color from 'color';\nimport Icon from \"./Icon\";\nimport Surface from \"./Surface\";\nimport Text from \"./Typography/Text\";\nimport TouchableRipple from \"./TouchableRipple\";\nimport { black, white } from \"../styles/colors\";\nimport { withTheme } from \"../core/theming\";\n\nvar Button = function (_React$Component) {\n  _inherits(Button, _React$Component);\n\n  var _super = _createSuper(Button);\n\n  function Button() {\n    var _this;\n\n    _classCallCheck(this, Button);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      elevation: new Animated.Value(_this.props.mode === 'contained' ? 2 : 0)\n    };\n\n    _this._handlePressIn = function () {\n      if (_this.props.mode === 'contained') {\n        Animated.timing(_this.state.elevation, {\n          toValue: 8,\n          duration: 200\n        }).start();\n      }\n    };\n\n    _this._handlePressOut = function () {\n      if (_this.props.mode === 'contained') {\n        Animated.timing(_this.state.elevation, {\n          toValue: 2,\n          duration: 150\n        }).start();\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(Button, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          disabled = _this$props.disabled,\n          compact = _this$props.compact,\n          mode = _this$props.mode,\n          dark = _this$props.dark,\n          loading = _this$props.loading,\n          icon = _this$props.icon,\n          buttonColor = _this$props.color,\n          children = _this$props.children,\n          uppercase = _this$props.uppercase,\n          accessibilityLabel = _this$props.accessibilityLabel,\n          onPress = _this$props.onPress,\n          style = _this$props.style,\n          theme = _this$props.theme,\n          contentStyle = _this$props.contentStyle,\n          rest = _objectWithoutProperties(_this$props, [\"disabled\", \"compact\", \"mode\", \"dark\", \"loading\", \"icon\", \"color\", \"children\", \"uppercase\", \"accessibilityLabel\", \"onPress\", \"style\", \"theme\", \"contentStyle\"]);\n\n      var colors = theme.colors,\n          roundness = theme.roundness;\n      var fontFamily = theme.fonts.medium;\n      var backgroundColor, borderColor, textColor, borderWidth;\n\n      if (mode === 'contained') {\n        if (disabled) {\n          backgroundColor = color(theme.dark ? white : black).alpha(0.12).rgb().string();\n        } else if (buttonColor) {\n          backgroundColor = buttonColor;\n        } else {\n          backgroundColor = colors.primary;\n        }\n      } else {\n        backgroundColor = 'transparent';\n      }\n\n      if (mode === 'outlined') {\n        borderColor = color(theme.dark ? white : black).alpha(0.29).rgb().string();\n        borderWidth = StyleSheet.hairlineWidth;\n      } else {\n        borderColor = 'transparent';\n        borderWidth = 0;\n      }\n\n      if (disabled) {\n        textColor = color(theme.dark ? white : black).alpha(0.32).rgb().string();\n      } else if (mode === 'contained') {\n        var isDark;\n\n        if (typeof dark === 'boolean') {\n          isDark = dark;\n        } else {\n          isDark = backgroundColor === 'transparent' ? false : !color(backgroundColor).light();\n        }\n\n        textColor = isDark ? white : black;\n      } else if (buttonColor) {\n        textColor = buttonColor;\n      } else {\n        textColor = colors.primary;\n      }\n\n      var rippleColor = color(textColor).alpha(0.32).rgb().string();\n      var buttonStyle = {\n        backgroundColor: backgroundColor,\n        borderColor: borderColor,\n        borderWidth: borderWidth,\n        borderRadius: roundness\n      };\n      var touchableStyle = {\n        borderRadius: roundness\n      };\n      var textStyle = {\n        color: textColor,\n        fontFamily: fontFamily\n      };\n      var elevation = disabled || mode !== 'contained' ? 0 : this.state.elevation;\n      return React.createElement(Surface, _extends({}, rest, {\n        style: [styles.button, compact && styles.compact, {\n          elevation: elevation\n        }, buttonStyle, style],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 7\n        }\n      }), React.createElement(TouchableRipple, {\n        borderless: true,\n        delayPressIn: 0,\n        onPress: onPress,\n        onPressIn: this._handlePressIn,\n        onPressOut: this._handlePressOut,\n        accessibilityLabel: accessibilityLabel,\n        accessibilityTraits: disabled ? ['button', 'disabled'] : 'button',\n        accessibilityComponentType: \"button\",\n        accessibilityRole: \"button\",\n        accessibilityStates: disabled ? ['disabled'] : undefined,\n        disabled: disabled,\n        rippleColor: rippleColor,\n        style: touchableStyle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 9\n        }\n      }, React.createElement(View, {\n        style: [styles.content, contentStyle],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 253,\n          columnNumber: 11\n        }\n      }, icon && loading !== true ? React.createElement(View, {\n        style: styles.icon,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 15\n        }\n      }, React.createElement(Icon, {\n        source: icon,\n        size: 16,\n        color: textColor,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 256,\n          columnNumber: 17\n        }\n      })) : null, loading ? React.createElement(ActivityIndicator, {\n        size: \"small\",\n        color: textColor,\n        style: styles.icon,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 260,\n          columnNumber: 15\n        }\n      }) : null, React.createElement(Text, {\n        numberOfLines: 1,\n        style: [styles.label, compact && styles.compactLabel, textStyle, {\n          fontFamily: fontFamily\n        }],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 266,\n          columnNumber: 13\n        }\n      }, React.Children.map(children, function (child) {\n        return typeof child === 'string' && uppercase ? child.toUpperCase() : child;\n      })))));\n    }\n  }]);\n\n  return Button;\n}(React.Component);\n\nButton.defaultProps = {\n  mode: 'text',\n  uppercase: true\n};\nvar styles = StyleSheet.create({\n  button: {\n    minWidth: 64,\n    borderStyle: 'solid'\n  },\n  compact: {\n    minWidth: 'auto'\n  },\n  content: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  icon: {\n    width: 16,\n    marginLeft: 12,\n    marginRight: -4\n  },\n  label: {\n    textAlign: 'center',\n    letterSpacing: 1,\n    marginVertical: 9,\n    marginHorizontal: 16\n  },\n  compactLabel: {\n    marginHorizontal: 8\n  }\n});\nexport default withTheme(Button);","map":{"version":3,"sources":["C:/Users/Fido/Documents/GitHub/UI-Design-React/app/node_modules/react-native-paper/src/components/Button.js"],"names":["React","color","Icon","Surface","Text","TouchableRipple","black","white","withTheme","Button","state","elevation","Animated","Value","props","mode","_handlePressIn","timing","toValue","duration","start","_handlePressOut","disabled","compact","dark","loading","icon","buttonColor","children","uppercase","accessibilityLabel","onPress","style","theme","contentStyle","rest","colors","roundness","fontFamily","fonts","medium","backgroundColor","borderColor","textColor","borderWidth","alpha","rgb","string","primary","StyleSheet","hairlineWidth","isDark","light","rippleColor","buttonStyle","borderRadius","touchableStyle","textStyle","styles","button","undefined","content","label","compactLabel","Children","map","child","toUpperCase","Component","defaultProps","create","minWidth","borderStyle","flexDirection","alignItems","justifyContent","width","marginLeft","marginRight","textAlign","letterSpacing","marginVertical","marginHorizontal"],"mappings":"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","sourcesContent":["/* @flow */\n\nimport * as React from 'react';\nimport { ActivityIndicator, Animated, View, StyleSheet } from 'react-native';\nimport color from 'color';\nimport Icon from './Icon';\nimport Surface from './Surface';\nimport Text from './Typography/Text';\nimport TouchableRipple from './TouchableRipple';\nimport { black, white } from '../styles/colors';\nimport { withTheme } from '../core/theming';\nimport type { IconSource } from './Icon';\nimport type { Theme } from '../types';\n\ntype Props = React.ElementConfig<typeof Surface> & {|\n  /**\n   * Mode of the button. You can change the mode to adjust the styling to give it desired emphasis.\n   * - `text` - flat button without background or outline (low emphasis)\n   * - `outlined` - button with an outline (medium emphasis)\n   * - `contained` - button with a background color and elevation shadow (high emphasis)\n   */\n  mode?: 'text' | 'outlined' | 'contained',\n  /**\n   * Whether the color is a dark color. A dark button will render light text and vice-versa. Only applicable for `contained` mode.\n   */\n  dark?: boolean,\n  /**\n   * Use a compact look, useful for `text` buttons in a row.\n   */\n  compact?: boolean,\n  /**\n   * Custom text color for flat button, or background color for contained button.\n   */\n  color?: string,\n  /**\n   * Whether to show a loading indicator.\n   */\n  loading?: boolean,\n  /**\n   * Icon to display for the `Button`.\n   */\n  icon?: IconSource,\n  /**\n   * Whether the button is disabled. A disabled button is greyed out and `onPress` is not called on touch.\n   */\n  disabled?: boolean,\n  /**\n   * Label text of the button.\n   */\n  children: React.Node,\n  /**\n   * Make the label text uppercased. Note that this won't work if you pass React elements as children.\n   */\n  uppercase: boolean,\n  /**\n   * Accessibility label for the button. This is read by the screen reader when the user taps the button.\n   */\n  accessibilityLabel?: string,\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => mixed,\n  /**\n   * Style of button's inner content.\n   * Use this prop to apply custom height and width.\n   */\n  contentStyle?: any,\n  style?: any,\n  /**\n   * @optional\n   */\n  theme: Theme,\n|};\n\ntype State = {\n  elevation: Animated.Value,\n};\n\n/**\n * A button is component that the user can press to trigger an action.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/button-1.png\" />\n *     <figcaption>Text button</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/button-2.png\" />\n *     <figcaption>Outlined button</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/button-3.png\" />\n *     <figcaption>Contained button</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Button } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Button icon=\"add-a-photo\" mode=\"contained\" onPress={() => console.log('Pressed')}>\n *     Press me\n *   </Button>\n * );\n *\n * export default MyComponent;\n * ```\n */\nclass Button extends React.Component<Props, State> {\n  static defaultProps = {\n    mode: 'text',\n    uppercase: true,\n  };\n\n  state = {\n    elevation: new Animated.Value(this.props.mode === 'contained' ? 2 : 0),\n  };\n\n  _handlePressIn = () => {\n    if (this.props.mode === 'contained') {\n      Animated.timing(this.state.elevation, {\n        toValue: 8,\n        duration: 200,\n      }).start();\n    }\n  };\n\n  _handlePressOut = () => {\n    if (this.props.mode === 'contained') {\n      Animated.timing(this.state.elevation, {\n        toValue: 2,\n        duration: 150,\n      }).start();\n    }\n  };\n\n  render() {\n    const {\n      disabled,\n      compact,\n      mode,\n      dark,\n      loading,\n      icon,\n      color: buttonColor,\n      children,\n      uppercase,\n      accessibilityLabel,\n      onPress,\n      style,\n      theme,\n      contentStyle,\n      ...rest\n    } = this.props;\n    const { colors, roundness } = theme;\n    const fontFamily = theme.fonts.medium;\n\n    let backgroundColor, borderColor, textColor, borderWidth;\n\n    if (mode === 'contained') {\n      if (disabled) {\n        backgroundColor = color(theme.dark ? white : black)\n          .alpha(0.12)\n          .rgb()\n          .string();\n      } else if (buttonColor) {\n        backgroundColor = buttonColor;\n      } else {\n        backgroundColor = colors.primary;\n      }\n    } else {\n      backgroundColor = 'transparent';\n    }\n\n    if (mode === 'outlined') {\n      borderColor = color(theme.dark ? white : black)\n        .alpha(0.29)\n        .rgb()\n        .string();\n      borderWidth = StyleSheet.hairlineWidth;\n    } else {\n      borderColor = 'transparent';\n      borderWidth = 0;\n    }\n\n    if (disabled) {\n      textColor = color(theme.dark ? white : black)\n        .alpha(0.32)\n        .rgb()\n        .string();\n    } else if (mode === 'contained') {\n      let isDark;\n\n      if (typeof dark === 'boolean') {\n        isDark = dark;\n      } else {\n        isDark =\n          backgroundColor === 'transparent'\n            ? false\n            : !color(backgroundColor).light();\n      }\n\n      textColor = isDark ? white : black;\n    } else if (buttonColor) {\n      textColor = buttonColor;\n    } else {\n      textColor = colors.primary;\n    }\n\n    const rippleColor = color(textColor)\n      .alpha(0.32)\n      .rgb()\n      .string();\n    const buttonStyle = {\n      backgroundColor,\n      borderColor,\n      borderWidth,\n      borderRadius: roundness,\n    };\n    const touchableStyle = { borderRadius: roundness };\n    const textStyle = { color: textColor, fontFamily };\n    const elevation =\n      disabled || mode !== 'contained' ? 0 : this.state.elevation;\n\n    return (\n      <Surface\n        {...rest}\n        style={[\n          styles.button,\n          compact && styles.compact,\n          { elevation },\n          buttonStyle,\n          style,\n        ]}\n      >\n        <TouchableRipple\n          borderless\n          delayPressIn={0}\n          onPress={onPress}\n          onPressIn={this._handlePressIn}\n          onPressOut={this._handlePressOut}\n          accessibilityLabel={accessibilityLabel}\n          accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\n          accessibilityComponentType=\"button\"\n          accessibilityRole=\"button\"\n          accessibilityStates={disabled ? ['disabled'] : undefined}\n          disabled={disabled}\n          rippleColor={rippleColor}\n          style={touchableStyle}\n        >\n          <View style={[styles.content, contentStyle]}>\n            {icon && loading !== true ? (\n              <View style={styles.icon}>\n                <Icon source={icon} size={16} color={textColor} />\n              </View>\n            ) : null}\n            {loading ? (\n              <ActivityIndicator\n                size=\"small\"\n                color={textColor}\n                style={styles.icon}\n              />\n            ) : null}\n            <Text\n              numberOfLines={1}\n              style={[\n                styles.label,\n                compact && styles.compactLabel,\n                textStyle,\n                { fontFamily },\n              ]}\n            >\n              {React.Children.map(\n                children,\n                child =>\n                  typeof child === 'string' && uppercase\n                    ? child.toUpperCase()\n                    : child\n              )}\n            </Text>\n          </View>\n        </TouchableRipple>\n      </Surface>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  button: {\n    minWidth: 64,\n    borderStyle: 'solid',\n  },\n  compact: {\n    minWidth: 'auto',\n  },\n  content: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  icon: {\n    width: 16,\n    marginLeft: 12,\n    marginRight: -4,\n  },\n  label: {\n    textAlign: 'center',\n    letterSpacing: 1,\n    marginVertical: 9,\n    marginHorizontal: 16,\n  },\n  compactLabel: {\n    marginHorizontal: 8,\n  },\n});\n\nexport default withTheme(Button);\n"]},"metadata":{},"sourceType":"module"}