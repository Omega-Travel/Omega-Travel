{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\Fido\\\\Documents\\\\GitHub\\\\UI-Design-React\\\\app\\\\node_modules\\\\react-native-paper\\\\src\\\\components\\\\List\\\\ListAccordion.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport color from 'color';\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableRipple from \"../TouchableRipple\";\nimport Icon from \"../Icon\";\nimport Text from \"../Typography/Text\";\nimport { withTheme } from \"../../core/theming\";\n\nvar ListAccordion = function (_React$Component) {\n  _inherits(ListAccordion, _React$Component);\n\n  var _super = _createSuper(ListAccordion);\n\n  function ListAccordion() {\n    var _this;\n\n    _classCallCheck(this, ListAccordion);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      expanded: _this.props.expanded || false\n    };\n\n    _this._handlePress = function () {\n      _this.props.onPress && _this.props.onPress();\n\n      if (_this.props.expanded === undefined) {\n        _this.setState(function (state) {\n          return {\n            expanded: !state.expanded\n          };\n        });\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(ListAccordion, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          left = _this$props.left,\n          title = _this$props.title,\n          description = _this$props.description,\n          children = _this$props.children,\n          theme = _this$props.theme,\n          titleStyle = _this$props.titleStyle,\n          descriptionStyle = _this$props.descriptionStyle,\n          style = _this$props.style;\n      var titleColor = color(theme.colors.text).alpha(0.87).rgb().string();\n      var descriptionColor = color(theme.colors.text).alpha(0.54).rgb().string();\n      var expanded = this.props.expanded !== undefined ? this.props.expanded : this.state.expanded;\n      return React.createElement(View, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 7\n        }\n      }, React.createElement(TouchableRipple, {\n        style: [styles.container, style],\n        onPress: this._handlePress,\n        accessibilityTraits: \"button\",\n        accessibilityComponentType: \"button\",\n        accessibilityRole: \"button\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 9\n        }\n      }, React.createElement(View, {\n        style: styles.row,\n        pointerEvents: \"none\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 11\n        }\n      }, left ? left({\n        color: expanded ? theme.colors.primary : descriptionColor\n      }) : null, React.createElement(View, {\n        style: [styles.item, styles.content],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 13\n        }\n      }, React.createElement(Text, {\n        numberOfLines: 1,\n        style: [styles.title, {\n          color: expanded ? theme.colors.primary : titleColor\n        }, titleStyle],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 15\n        }\n      }, title), description && React.createElement(Text, {\n        numberOfLines: 2,\n        style: [styles.description, {\n          color: descriptionColor\n        }, descriptionStyle],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 17\n        }\n      }, description)), React.createElement(View, {\n        style: [styles.item, description && styles.multiline],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 13\n        }\n      }, React.createElement(Icon, {\n        source: expanded ? 'keyboard-arrow-up' : 'keyboard-arrow-down',\n        color: titleColor,\n        size: 24,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 15\n        }\n      })))), expanded ? React.Children.map(children, function (child) {\n        if (left && React.isValidElement(child) && !child.props.left && !child.props.right) {\n          return React.cloneElement(child, {\n            style: [styles.child, child.props.style]\n          });\n        }\n\n        return child;\n      }) : null);\n    }\n  }]);\n\n  return ListAccordion;\n}(React.Component);\n\nListAccordion.displayName = 'List.Accordion';\nvar styles = StyleSheet.create({\n  container: {\n    padding: 8\n  },\n  row: {\n    flexDirection: 'row',\n    alignItems: 'center'\n  },\n  multiline: {\n    height: 40,\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  title: {\n    fontSize: 16\n  },\n  description: {\n    fontSize: 14\n  },\n  item: {\n    margin: 8\n  },\n  child: {\n    paddingLeft: 64\n  },\n  content: {\n    flex: 1,\n    justifyContent: 'center'\n  }\n});\nexport default withTheme(ListAccordion);","map":{"version":3,"sources":["C:/Users/Fido/Documents/GitHub/UI-Design-React/app/node_modules/react-native-paper/src/components/List/ListAccordion.js"],"names":["color","React","TouchableRipple","Icon","Text","withTheme","ListAccordion","state","expanded","props","_handlePress","onPress","undefined","setState","left","title","description","children","theme","titleStyle","descriptionStyle","style","titleColor","colors","text","alpha","rgb","string","descriptionColor","styles","container","row","primary","item","content","multiline","Children","map","child","isValidElement","right","cloneElement","Component","displayName","StyleSheet","create","padding","flexDirection","alignItems","height","justifyContent","fontSize","margin","paddingLeft","flex"],"mappings":"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","sourcesContent":["/* @flow */\n\nimport color from 'color';\nimport * as React from 'react';\nimport { View, StyleSheet } from 'react-native';\nimport TouchableRipple from '../TouchableRipple';\nimport Icon from '../Icon';\nimport Text from '../Typography/Text';\nimport { withTheme } from '../../core/theming';\nimport type { Theme } from '../../types';\nimport type {\n  ViewStyleProp,\n  TextStyleProp,\n} from 'react-native/Libraries/StyleSheet/StyleSheet';\n\ntype Props = {|\n  /**\n   * Title text for the list accordion.\n   */\n  title: React.Node,\n  /**\n   * Description text for the list accordion.\n   */\n  description?: React.Node,\n  /**\n   * Callback which returns a React element to display on the left side.\n   */\n  left?: (props: { color: string }) => React.Node,\n  /**\n   * Whether the accordion is expanded\n   * If this prop is provided, the accordion will behave as a \"controlled component\".\n   * You'll need to update this prop when you want to toggle the component or on `onPress`.\n   */\n  expanded?: boolean,\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => mixed,\n  /**\n   * Content of the section.\n   */\n  children: React.Node,\n  /**\n   * @optional\n   */\n  theme: Theme,\n  /**\n   * Style that is passed to the wrapping TouchableRipple element.\n   */\n  style?: ViewStyleProp,\n  /**\n   * Style that is passed to Title element.\n   */\n  titleStyle?: TextStyleProp,\n  /**\n   * Style that is passed to Description element.\n   */\n  descriptionStyle?: TextStyleProp,\n|};\n\ntype State = {\n  expanded: boolean,\n};\n\n/**\n * A component used to display an expandable list item.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/list-accordion-1.png\" />\n *   <img class=\"medium\" src=\"screenshots/list-accordion-2.png\" />\n *   <img class=\"medium\" src=\"screenshots/list-accordion-3.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { List, Checkbox } from 'react-native-paper';\n *\n * class MyComponent extends React.Component {\n *   state = {\n *     expanded: true\n *   }\n *\n *   _handlePress = () =>\n *     this.setState({\n *       expanded: !this.state.expanded\n *     });\n *\n *   render() {\n *     return (\n *       <List.Section title=\"Accordions\">\n *         <List.Accordion\n *           title=\"Uncontrolled Accordion\"\n *           left={props => <List.Icon {...props} icon=\"folder\" />}\n *         >\n *           <List.Item title=\"First item\" />\n *           <List.Item title=\"Second item\" />\n *         </List.Accordion>\n *\n *         <List.Accordion\n *           title=\"Controlled Accordion\"\n *           left={props => <List.Icon {...props} icon=\"folder\" />}\n *           expanded={this.state.expanded}\n *           onPress={this._handlePress}\n *         >\n *           <List.Item title=\"First item\" />\n *           <List.Item title=\"Second item\" />\n *         </List.Accordion>\n *       </List.Section>\n *     );\n *   }\n * }\n *\n * export default MyComponent;\n * ```\n */\nclass ListAccordion extends React.Component<Props, State> {\n  static displayName = 'List.Accordion';\n\n  state = {\n    expanded: this.props.expanded || false,\n  };\n\n  _handlePress = () => {\n    this.props.onPress && this.props.onPress();\n\n    if (this.props.expanded === undefined) {\n      // Only update state of the `expanded` prop was not passed\n      // If it was passed, the component will act as a controlled component\n      this.setState(state => ({\n        expanded: !state.expanded,\n      }));\n    }\n  };\n\n  render() {\n    const {\n      left,\n      title,\n      description,\n      children,\n      theme,\n      titleStyle,\n      descriptionStyle,\n      style,\n    } = this.props;\n    const titleColor = color(theme.colors.text)\n      .alpha(0.87)\n      .rgb()\n      .string();\n    const descriptionColor = color(theme.colors.text)\n      .alpha(0.54)\n      .rgb()\n      .string();\n\n    const expanded =\n      this.props.expanded !== undefined\n        ? this.props.expanded\n        : this.state.expanded;\n\n    return (\n      <View>\n        <TouchableRipple\n          style={[styles.container, style]}\n          onPress={this._handlePress}\n          accessibilityTraits=\"button\"\n          accessibilityComponentType=\"button\"\n          accessibilityRole=\"button\"\n        >\n          <View style={styles.row} pointerEvents=\"none\">\n            {left\n              ? left({\n                  color: expanded ? theme.colors.primary : descriptionColor,\n                })\n              : null}\n            <View style={[styles.item, styles.content]}>\n              <Text\n                numberOfLines={1}\n                style={[\n                  styles.title,\n                  {\n                    color: expanded ? theme.colors.primary : titleColor,\n                  },\n                  titleStyle,\n                ]}\n              >\n                {title}\n              </Text>\n              {description && (\n                <Text\n                  numberOfLines={2}\n                  style={[\n                    styles.description,\n                    {\n                      color: descriptionColor,\n                    },\n                    descriptionStyle,\n                  ]}\n                >\n                  {description}\n                </Text>\n              )}\n            </View>\n            <View style={[styles.item, description && styles.multiline]}>\n              <Icon\n                source={expanded ? 'keyboard-arrow-up' : 'keyboard-arrow-down'}\n                color={titleColor}\n                size={24}\n              />\n            </View>\n          </View>\n        </TouchableRipple>\n        {expanded\n          ? React.Children.map(children, child => {\n              if (\n                left &&\n                React.isValidElement(child) &&\n                !child.props.left &&\n                !child.props.right\n              ) {\n                return React.cloneElement(child, {\n                  style: [styles.child, child.props.style],\n                });\n              }\n\n              return child;\n            })\n          : null}\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    padding: 8,\n  },\n  row: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  multiline: {\n    height: 40,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  title: {\n    fontSize: 16,\n  },\n  description: {\n    fontSize: 14,\n  },\n  item: {\n    margin: 8,\n  },\n  child: {\n    paddingLeft: 64,\n  },\n  content: {\n    flex: 1,\n    justifyContent: 'center',\n  },\n});\n\nexport default withTheme(ListAccordion);\n"]},"metadata":{},"sourceType":"module"}