{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _jsxFileName = \"C:\\\\Users\\\\Fido\\\\Documents\\\\GitHub\\\\UI-Design-React\\\\app\\\\node_modules\\\\react-native-paper\\\\src\\\\components\\\\IconButton.js\";\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport color from 'color';\nimport TouchableRipple from \"./TouchableRipple\";\nimport Icon from \"./Icon\";\nimport CrossFadeIcon from \"./CrossFadeIcon\";\nimport { withTheme } from \"../core/theming\";\n\nvar IconButton = function IconButton(_ref) {\n  var icon = _ref.icon,\n      customColor = _ref.color,\n      _ref$size = _ref.size,\n      size = _ref$size === void 0 ? 24 : _ref$size,\n      accessibilityLabel = _ref.accessibilityLabel,\n      disabled = _ref.disabled,\n      onPress = _ref.onPress,\n      _ref$animated = _ref.animated,\n      animated = _ref$animated === void 0 ? false : _ref$animated,\n      theme = _ref.theme,\n      style = _ref.style,\n      rest = _objectWithoutProperties(_ref, [\"icon\", \"color\", \"size\", \"accessibilityLabel\", \"disabled\", \"onPress\", \"animated\", \"theme\", \"style\"]);\n\n  var iconColor = typeof customColor !== 'undefined' ? customColor : theme.colors.text;\n  var rippleColor = color(iconColor).alpha(0.32).rgb().string();\n  var IconComponent = animated ? CrossFadeIcon : Icon;\n  return React.createElement(TouchableRipple, _extends({\n    borderless: true,\n    centered: true,\n    onPress: onPress,\n    rippleColor: rippleColor,\n    style: [styles.container, disabled && styles.disabled, style],\n    accessibilityLabel: accessibilityLabel,\n    accessibilityTraits: disabled ? ['button', 'disabled'] : 'button',\n    accessibilityComponentType: \"button\",\n    accessibilityRole: \"button\",\n    accessibilityStates: disabled ? ['disabled'] : undefined,\n    disabled: disabled,\n    hitSlop: TouchableRipple.supported ? {\n      top: 10,\n      left: 10,\n      bottom: 10,\n      right: 10\n    } : {\n      top: 6,\n      left: 6,\n      bottom: 6,\n      right: 6\n    }\n  }, rest, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 5\n    }\n  }), React.createElement(View, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }\n  }, React.createElement(IconComponent, {\n    color: iconColor,\n    source: icon,\n    size: size,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 9\n    }\n  })));\n};\n\nvar styles = StyleSheet.create({\n  container: TouchableRipple.supported ? {\n    height: 28,\n    width: 28,\n    margin: 10,\n    alignItems: 'center',\n    justifyContent: 'center',\n    overflow: 'visible'\n  } : {\n    borderRadius: 36 / 2,\n    height: 36,\n    width: 36,\n    margin: 6,\n    alignItems: 'center',\n    justifyContent: 'center',\n    overflow: 'visible'\n  },\n  disabled: {\n    opacity: 0.32\n  }\n});\nexport default withTheme(IconButton);","map":{"version":3,"sources":["C:/Users/Fido/Documents/GitHub/UI-Design-React/app/node_modules/react-native-paper/src/components/IconButton.js"],"names":["React","color","TouchableRipple","Icon","CrossFadeIcon","withTheme","IconButton","icon","customColor","size","accessibilityLabel","disabled","onPress","animated","theme","style","rest","iconColor","colors","text","rippleColor","alpha","rgb","string","IconComponent","styles","container","undefined","supported","top","left","bottom","right","StyleSheet","create","height","width","margin","alignItems","justifyContent","overflow","borderRadius","opacity"],"mappings":"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","sourcesContent":["/* @flow */\n\nimport * as React from 'react';\nimport { View, StyleSheet } from 'react-native';\nimport color from 'color';\n\nimport TouchableRipple from './TouchableRipple';\nimport Icon from './Icon';\nimport CrossFadeIcon from './CrossFadeIcon';\nimport { withTheme } from '../core/theming';\nimport type { IconSource } from './Icon';\nimport type { Theme, $RemoveChildren } from '../types';\n\ntype Props = $RemoveChildren<typeof TouchableRipple> & {|\n  /**\n   * Icon to display.\n   */\n  icon: IconSource,\n  /**\n   * Color of the icon.\n   */\n  color?: string,\n  /**\n   * Size of the icon.\n   */\n  size?: number,\n  /**\n   * Whether the button is disabled. A disabled button is greyed out and `onPress` is not called on touch.\n   */\n  disabled?: boolean,\n  /**\n   * Whether an icon change is animated.\n   */\n  animated?: boolean,\n  /**\n   * Accessibility label for the button. This is read by the screen reader when the user taps the button.\n   */\n  accessibilityLabel?: string,\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => mixed,\n  style?: any,\n  /**\n   * @optional\n   */\n  theme: Theme,\n|};\n\n/**\n * An icon button is a button which displays only an icon without a label.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/icon-button-1.png\" />\n *     <figcaption>Icon button</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/icon-button-2.png\" />\n *     <figcaption>Pressed icon button</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { IconButton, Colors } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <IconButton\n *     icon=\"add-a-photo\"\n *     color={Colors.red500}\n *     size={20}\n *     onPress={() => console.log('Pressed')}\n *   />\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst IconButton = ({\n  icon,\n  color: customColor,\n  size = 24,\n  accessibilityLabel,\n  disabled,\n  onPress,\n  animated = false,\n  theme,\n  style,\n  ...rest\n}: Props) => {\n  const iconColor =\n    typeof customColor !== 'undefined' ? customColor : theme.colors.text;\n  const rippleColor = color(iconColor)\n    .alpha(0.32)\n    .rgb()\n    .string();\n  const IconComponent = animated ? CrossFadeIcon : Icon;\n\n  return (\n    <TouchableRipple\n      borderless\n      centered\n      onPress={onPress}\n      rippleColor={rippleColor}\n      style={[styles.container, disabled && styles.disabled, style]}\n      accessibilityLabel={accessibilityLabel}\n      accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\n      accessibilityComponentType=\"button\"\n      accessibilityRole=\"button\"\n      accessibilityStates={disabled ? ['disabled'] : undefined}\n      disabled={disabled}\n      hitSlop={\n        TouchableRipple.supported\n          ? { top: 10, left: 10, bottom: 10, right: 10 }\n          : { top: 6, left: 6, bottom: 6, right: 6 }\n      }\n      {...rest}\n    >\n      <View>\n        <IconComponent color={iconColor} source={icon} size={size} />\n      </View>\n    </TouchableRipple>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: TouchableRipple.supported\n    ? {\n        height: 28,\n        width: 28,\n        margin: 10,\n        alignItems: 'center',\n        justifyContent: 'center',\n        overflow: 'visible',\n      }\n    : {\n        borderRadius: 36 / 2,\n        height: 36,\n        width: 36,\n        margin: 6,\n        alignItems: 'center',\n        justifyContent: 'center',\n        overflow: 'visible',\n      },\n  disabled: {\n    opacity: 0.32,\n  },\n});\n\nexport default withTheme(IconButton);\n"]},"metadata":{},"sourceType":"module"}