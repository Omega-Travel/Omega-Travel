{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\Fido\\\\Documents\\\\GitHub\\\\UI-Design-React\\\\app\\\\node_modules\\\\react-native-paper\\\\src\\\\components\\\\ToggleButton\\\\ToggleButton.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { withTheme } from \"../../core/theming\";\nimport color from 'color';\nimport IconButton from \"../IconButton\";\nimport ToggleButtonGroup, { ToggleButtonGroupContext } from \"./ToggleButtonGroup\";\nimport { black, white } from \"../../styles/colors\";\n\nvar ToggleButton = function (_React$Component) {\n  _inherits(ToggleButton, _React$Component);\n\n  var _super = _createSuper(ToggleButton);\n\n  function ToggleButton() {\n    _classCallCheck(this, ToggleButton);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(ToggleButton, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          icon = _this$props.icon,\n          size = _this$props.size,\n          theme = _this$props.theme,\n          accessibilityLabel = _this$props.accessibilityLabel,\n          disabled = _this$props.disabled,\n          style = _this$props.style,\n          value = _this$props.value,\n          status = _this$props.status,\n          _onPress = _this$props.onPress,\n          rest = _objectWithoutProperties(_this$props, [\"icon\", \"size\", \"theme\", \"accessibilityLabel\", \"disabled\", \"style\", \"value\", \"status\", \"onPress\"]);\n\n      var borderRadius = theme.roundness;\n      return React.createElement(ToggleButtonGroupContext.Consumer, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 7\n        }\n      }, function (context) {\n        var backgroundColor;\n        var checked = context && context.value === value || status === 'checked';\n\n        if (checked) {\n          backgroundColor = theme.dark ? 'rgba(255, 255, 255, .12)' : 'rgba(0, 0, 0, .08)';\n        } else {\n          backgroundColor = 'transparent';\n        }\n\n        return React.createElement(IconButton, _extends({\n          borderless: false,\n          icon: icon,\n          onPress: function onPress(e) {\n            if (_onPress) {\n              _onPress(e);\n            }\n\n            if (context) {\n              context.onValueChange(!checked ? value : null);\n            }\n          },\n          size: size,\n          accessibilityLabel: accessibilityLabel,\n          disabled: disabled,\n          style: [styles.content, {\n            backgroundColor: backgroundColor,\n            borderRadius: borderRadius,\n            borderColor: color(theme.dark ? white : black).alpha(0.29).rgb().string()\n          }, style]\n        }, rest, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 13\n          }\n        }));\n      });\n    }\n  }]);\n\n  return ToggleButton;\n}(React.Component);\n\nToggleButton.Group = ToggleButtonGroup;\nvar styles = StyleSheet.create({\n  content: {\n    width: 42,\n    height: 42,\n    margin: 0\n  }\n});\nexport default withTheme(ToggleButton);","map":{"version":3,"sources":["C:/Users/Fido/Documents/GitHub/UI-Design-React/app/node_modules/react-native-paper/src/components/ToggleButton/ToggleButton.js"],"names":["React","withTheme","color","IconButton","ToggleButtonGroup","ToggleButtonGroupContext","black","white","ToggleButton","props","icon","size","theme","accessibilityLabel","disabled","style","value","status","onPress","rest","borderRadius","roundness","context","backgroundColor","checked","dark","e","onValueChange","styles","content","borderColor","alpha","rgb","string","Component","Group","StyleSheet","create","width","height","margin"],"mappings":";;;;;;;;;;;;;AAEA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;;AAEA,SAASC,SAAT;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP;AACA,OAAOC,iBAAP,IACEC,wBADF;AAGA,SAASC,KAAT,EAAgBC,KAAhB;;IA+EMC,Y;;;;;;;;;;;;;6BAIK;AAAA,wBAYH,KAAKC,KAZF;AAAA,UAELC,IAFK,eAELA,IAFK;AAAA,UAGLC,IAHK,eAGLA,IAHK;AAAA,UAILC,KAJK,eAILA,KAJK;AAAA,UAKLC,kBALK,eAKLA,kBALK;AAAA,UAMLC,QANK,eAMLA,QANK;AAAA,UAOLC,KAPK,eAOLA,KAPK;AAAA,UAQLC,KARK,eAQLA,KARK;AAAA,UASLC,MATK,eASLA,MATK;AAAA,UAULC,QAVK,eAULA,OAVK;AAAA,UAWFC,IAXE;;AAaP,UAAMC,YAAY,GAAGR,KAAK,CAACS,SAA3B;AAEA,aACE,oBAAC,wBAAD,CAA0B,QAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG,UAACC,OAAD,EAA0D;AACzD,YAAIC,eAAJ;AAEA,YAAMC,OAAiB,GACpBF,OAAO,IAAIA,OAAO,CAACN,KAAR,KAAkBA,KAA9B,IAAwCC,MAAM,KAAK,SADrD;;AAGA,YAAIO,OAAJ,EAAa;AACXD,UAAAA,eAAe,GAAGX,KAAK,CAACa,IAAN,GACd,0BADc,GAEd,oBAFJ;AAGD,SAJD,MAIO;AACLF,UAAAA,eAAe,GAAG,aAAlB;AACD;;AAED,eACE,oBAAC,UAAD;AACE,UAAA,UAAU,EAAE,KADd;AAEE,UAAA,IAAI,EAAEb,IAFR;AAGE,UAAA,OAAO,EAAE,iBAAAgB,CAAC,EAAI;AACZ,gBAAIR,QAAJ,EAAa;AACXA,cAAAA,QAAO,CAACQ,CAAD,CAAP;AACD;;AAED,gBAAIJ,OAAJ,EAAa;AACXA,cAAAA,OAAO,CAACK,aAAR,CAAsB,CAACH,OAAD,GAAWR,KAAX,GAAmB,IAAzC;AACD;AACF,WAXH;AAYE,UAAA,IAAI,EAAEL,IAZR;AAaE,UAAA,kBAAkB,EAAEE,kBAbtB;AAcE,UAAA,QAAQ,EAAEC,QAdZ;AAeE,UAAA,KAAK,EAAE,CACLc,MAAM,CAACC,OADF,EAEL;AACEN,YAAAA,eAAe,EAAfA,eADF;AAEEH,YAAAA,YAAY,EAAZA,YAFF;AAGEU,YAAAA,WAAW,EAAE5B,KAAK,CAACU,KAAK,CAACa,IAAN,GAAalB,KAAb,GAAqBD,KAAtB,CAAL,CACVyB,KADU,CACJ,IADI,EAEVC,GAFU,GAGVC,MAHU;AAHf,WAFK,EAULlB,KAVK;AAfT,WA2BMI,IA3BN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WADF;AA+BD,OA9CH,CADF;AAkDD;;;;EArEwBnB,KAAK,CAACkC,S;;AAA3B1B,Y,CAEG2B,K,GAAQ/B,iB;AAsEjB,IAAMwB,MAAM,GAAGQ,UAAU,CAACC,MAAX,CAAkB;AAC/BR,EAAAA,OAAO,EAAE;AACPS,IAAAA,KAAK,EAAE,EADA;AAEPC,IAAAA,MAAM,EAAE,EAFD;AAGPC,IAAAA,MAAM,EAAE;AAHD;AADsB,CAAlB,CAAf;AAQA,eAAevC,SAAS,CAACO,YAAD,CAAxB","sourcesContent":["/* @flow */\n\nimport * as React from 'react';\nimport { StyleSheet } from 'react-native';\nimport { withTheme } from '../../core/theming';\nimport color from 'color';\nimport IconButton from '../IconButton';\nimport ToggleButtonGroup, {\n  ToggleButtonGroupContext,\n} from './ToggleButtonGroup';\nimport { black, white } from '../../styles/colors';\nimport type { IconSource } from '../Icon';\nimport type { Theme } from '../../types';\n\ntype Props = {\n  /**\n   * Icon to display for the `ToggleButton`.\n   */\n  icon: IconSource,\n  /**\n   * Size of the icon.\n   */\n  size?: number,\n  /**\n   * Custom text color for button.\n   */\n  color?: string,\n  /**\n   * Whether the button is disabled.\n   */\n  disabled?: boolean,\n  /**\n   * Accessibility label for the `ToggleButton`. This is read by the screen reader when the user taps the button.\n   */\n  accessibilityLabel?: string,\n  /**\n   * Function to execute on press.\n   */\n  onPress?: (value: ?string) => mixed,\n  /**\n   * Value of button.\n   */\n  value?: string,\n  /**\n   * Status of button.\n   */\n  status?: 'checked' | 'unchecked',\n  style?: any,\n  /**\n   * @optional\n   */\n  theme: Theme,\n};\n\n/**\n * Toggle buttons can be used to group related options. To emphasize groups of related toggle buttons,\n * a group should share a common container.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/toggle-button.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { ToggleButton } from 'react-native-paper';\n *\n * class ToggleButtonExample extends React.Component {\n *   state = {\n *     status: 'checked',\n *   };\n *\n *   render() {\n *     return (\n *       <ToggleButton\n *         icon=\"bluetooth\"\n *         value=\"bluetooth\"\n *         status={this.state.status}\n *         onPress={value =>\n *           this.setState({\n *             status: value === 'checked' ? 'unchecked' : 'checked',\n *           })\n *         }\n *       />\n *     );\n *   }\n * }\n * ```\n */\nclass ToggleButton extends React.Component<Props> {\n  // @component ./ToggleButtonGroup.js\n  static Group = ToggleButtonGroup;\n\n  render() {\n    const {\n      icon,\n      size,\n      theme,\n      accessibilityLabel,\n      disabled,\n      style,\n      value,\n      status,\n      onPress,\n      ...rest\n    } = this.props;\n    const borderRadius = theme.roundness;\n\n    return (\n      <ToggleButtonGroupContext.Consumer>\n        {(context: ?{ value: string, onValueChange: Function }) => {\n          let backgroundColor;\n\n          const checked: ?boolean =\n            (context && context.value === value) || status === 'checked';\n\n          if (checked) {\n            backgroundColor = theme.dark\n              ? 'rgba(255, 255, 255, .12)'\n              : 'rgba(0, 0, 0, .08)';\n          } else {\n            backgroundColor = 'transparent';\n          }\n\n          return (\n            <IconButton\n              borderless={false}\n              icon={icon}\n              onPress={e => {\n                if (onPress) {\n                  onPress(e);\n                }\n\n                if (context) {\n                  context.onValueChange(!checked ? value : null);\n                }\n              }}\n              size={size}\n              accessibilityLabel={accessibilityLabel}\n              disabled={disabled}\n              style={[\n                styles.content,\n                {\n                  backgroundColor,\n                  borderRadius,\n                  borderColor: color(theme.dark ? white : black)\n                    .alpha(0.29)\n                    .rgb()\n                    .string(),\n                },\n                style,\n              ]}\n              {...rest}\n            />\n          );\n        }}\n      </ToggleButtonGroupContext.Consumer>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  content: {\n    width: 42,\n    height: 42,\n    margin: 0,\n  },\n});\n\nexport default withTheme(ToggleButton);\n"]},"metadata":{},"sourceType":"module"}