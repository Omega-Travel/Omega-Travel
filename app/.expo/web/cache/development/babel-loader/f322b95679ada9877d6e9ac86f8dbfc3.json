{"ast":null,"code":"import _taggedTemplateLiteralLoose from \"@babel/runtime/helpers/taggedTemplateLiteralLoose\";\nvar _jsxFileName = \"C:\\\\Users\\\\Fido\\\\Documents\\\\GitHub\\\\UI-Design-React\\\\app\\\\screens\\\\PlaceDetail\\\\index.tsx\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteralLoose([\"\\n    query getPlace($placeId: ID!) {\\n        place(id: $placeId) {\\n            id,\\n            name,\\n            description,\\n            continentId,\\n            regionId,\\n            images {\\n                id,\\n                url\\n            },\\n            activities {\\n                id,\\n                price,\\n                name\\n            },\\n            reviews {\\n                id,\\n                description,\\n                rating,\\n                user{\\n                id,\\n                fullname\\n                }\\n            }\\n        }\\n    }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport * as React from \"react\";\nimport { Layout } from \"./Layout\";\nimport { useRoute } from \"@react-navigation/native\";\nimport { useSetNavigationOptions } from \"../../hooks/useSetNavigationOptions\";\nimport { Loading } from \"../Loading\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport { gql } from \"apollo-boost\";\nvar GET_PLACE = gql(_templateObject());\nexport var PlaceDetail = function PlaceDetail(_ref) {\n  var navigation = _ref.navigation;\n  var route = useRoute();\n  var placeId = route.params.id;\n  var title = route.params.name;\n  useSetNavigationOptions(title, true);\n\n  var _useQuery = useQuery(GET_PLACE, {\n    variables: {\n      placeId: placeId\n    }\n  }),\n      loading = _useQuery.loading,\n      error = _useQuery.error,\n      data = _useQuery.data;\n\n  if (loading) {\n    return React.createElement(Loading, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 16\n      }\n    });\n  } else if (error) {\n    console.log(error);\n  } else {\n    console.log(data);\n    return React.createElement(Layout, {\n      navigation: navigation,\n      place: data.place,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 16\n      }\n    });\n  }\n};","map":{"version":3,"sources":["C:/Users/Fido/Documents/GitHub/UI-Design-React/app/screens/PlaceDetail/index.tsx"],"names":["React","Layout","useRoute","useSetNavigationOptions","Loading","useQuery","gql","GET_PLACE","PlaceDetail","navigation","route","placeId","params","id","title","name","variables","loading","error","data","console","log","place"],"mappings":";;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,MAAT;AACA,SAASC,QAAT,QAAyB,0BAAzB;AACA,SAASC,uBAAT;AACA,SAASC,OAAT;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,SAASC,GAAT,QAAoB,cAApB;AAEA,IAAMC,SAAS,GAAGD,GAAH,mBAAf;AA8BA,OAAO,IAAME,WAAW,GAAG,SAAdA,WAAc,OAAoB;AAAA,MAAjBC,UAAiB,QAAjBA,UAAiB;AAC3C,MAAMC,KAAS,GAAGR,QAAQ,EAA1B;AACA,MAAMS,OAAO,GAAGD,KAAK,CAACE,MAAN,CAAaC,EAA7B;AACA,MAAMC,KAAK,GAAGJ,KAAK,CAACE,MAAN,CAAaG,IAA3B;AACAZ,EAAAA,uBAAuB,CAACW,KAAD,EAAQ,IAAR,CAAvB;;AAJ2C,kBAMVT,QAAQ,CAACE,SAAD,EACzC;AACIS,IAAAA,SAAS,EAAE;AAAEL,MAAAA,OAAO,EAAPA;AAAF;AADf,GADyC,CANE;AAAA,MAMnCM,OANmC,aAMnCA,OANmC;AAAA,MAM1BC,KAN0B,aAM1BA,KAN0B;AAAA,MAMnBC,IANmB,aAMnBA,IANmB;;AAW3C,MAAIF,OAAJ,EAAc;AACV,WAAO,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACH,GAFD,MAGK,IAAKC,KAAL,EAAa;AACdE,IAAAA,OAAO,CAACC,GAAR,CAAYH,KAAZ;AACH,GAFI,MAGA;AACDE,IAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACA,WAAO,oBAAC,MAAD;AAAQ,MAAA,UAAU,EAAEV,UAApB;AAAgC,MAAA,KAAK,EAAEU,IAAI,CAACG,KAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACH;AACJ,CArBM","sourcesContent":["import * as React from \"react\";\r\nimport { Layout } from './Layout';\r\nimport { useRoute } from \"@react-navigation/native\";\r\nimport { useSetNavigationOptions } from \"../../hooks/useSetNavigationOptions\";\r\nimport { Loading } from \"../Loading\";\r\nimport { useQuery } from \"@apollo/react-hooks\";\r\nimport { gql } from \"apollo-boost\";\r\n\r\nconst GET_PLACE = gql`\r\n    query getPlace($placeId: ID!) {\r\n        place(id: $placeId) {\r\n            id,\r\n            name,\r\n            description,\r\n            continentId,\r\n            regionId,\r\n            images {\r\n                id,\r\n                url\r\n            },\r\n            activities {\r\n                id,\r\n                price,\r\n                name\r\n            },\r\n            reviews {\r\n                id,\r\n                description,\r\n                rating,\r\n                user{\r\n                id,\r\n                fullname\r\n                }\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nexport const PlaceDetail = ({ navigation }) => {\r\n    const route:any = useRoute();\r\n    const placeId = route.params.id;\r\n    const title = route.params.name;\r\n    useSetNavigationOptions(title, true);\r\n\r\n    const { loading, error, data } = useQuery(GET_PLACE,\r\n    {\r\n        variables: { placeId }\r\n    });\r\n\r\n    if( loading ) {\r\n        return <Loading />\r\n    } \r\n    else if ( error ) {\r\n        console.log(error);\r\n    }\r\n    else {\r\n        console.log(data);\r\n        return <Layout navigation={navigation} place={data.place}/>;\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}