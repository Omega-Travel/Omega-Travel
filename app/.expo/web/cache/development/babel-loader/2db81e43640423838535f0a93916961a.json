{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\Fido\\\\Documents\\\\GitHub\\\\UI-Design-React\\\\app\\\\node_modules\\\\react-native-paper\\\\src\\\\components\\\\Typography\\\\StyledText.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport color from 'color';\nimport * as React from 'react';\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport Text from \"./Text\";\nimport { withTheme } from \"../../core/theming\";\n\nvar StyledText = function (_React$Component) {\n  _inherits(StyledText, _React$Component);\n\n  var _super = _createSuper(StyledText);\n\n  function StyledText() {\n    _classCallCheck(this, StyledText);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(StyledText, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          theme = _this$props.theme,\n          alpha = _this$props.alpha,\n          family = _this$props.family,\n          style = _this$props.style,\n          rest = _objectWithoutProperties(_this$props, [\"theme\", \"alpha\", \"family\", \"style\"]);\n\n      var textColor = color(theme.colors.text).alpha(alpha).rgb().string();\n      var fontFamily = theme.fonts[family];\n      var writingDirection = I18nManager.isRTL ? 'rtl' : 'ltr';\n      return React.createElement(Text, _extends({}, rest, {\n        style: [{\n          color: textColor,\n          fontFamily: fontFamily,\n          textAlign: 'left',\n          writingDirection: writingDirection\n        }, style, this.props.style],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 7\n        }\n      }));\n    }\n  }]);\n\n  return StyledText;\n}(React.Component);\n\nexport default withTheme(StyledText);","map":{"version":3,"sources":["C:/Users/Fido/Documents/GitHub/UI-Design-React/app/node_modules/react-native-paper/src/components/Typography/StyledText.js"],"names":["color","React","Text","withTheme","StyledText","props","theme","alpha","family","style","rest","textColor","colors","text","rgb","string","fontFamily","fonts","writingDirection","I18nManager","isRTL","textAlign","Component"],"mappings":";;;;;;;;;;;;;AAEA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;;AAEA,OAAOC,IAAP;AACA,SAASC,SAAT;;IAUMC,U;;;;;;;;;;;;;6BACK;AAAA,wBAC0C,KAAKC,KAD/C;AAAA,UACCC,KADD,eACCA,KADD;AAAA,UACQC,KADR,eACQA,KADR;AAAA,UACeC,MADf,eACeA,MADf;AAAA,UACuBC,KADvB,eACuBA,KADvB;AAAA,UACiCC,IADjC;;AAEP,UAAMC,SAAS,GAAGX,KAAK,CAACM,KAAK,CAACM,MAAN,CAAaC,IAAd,CAAL,CACfN,KADe,CACTA,KADS,EAEfO,GAFe,GAGfC,MAHe,EAAlB;AAIA,UAAMC,UAAU,GAAGV,KAAK,CAACW,KAAN,CAAYT,MAAZ,CAAnB;AACA,UAAMU,gBAAgB,GAAGC,WAAW,CAACC,KAAZ,GAAoB,KAApB,GAA4B,KAArD;AAEA,aACE,oBAAC,IAAD,eACMV,IADN;AAEE,QAAA,KAAK,EAAE,CACL;AAAEV,UAAAA,KAAK,EAAEW,SAAT;AAAoBK,UAAAA,UAAU,EAAVA,UAApB;AAAgCK,UAAAA,SAAS,EAAE,MAA3C;AAAmDH,UAAAA,gBAAgB,EAAhBA;AAAnD,SADK,EAELT,KAFK,EAGL,KAAKJ,KAAL,CAAWI,KAHN,CAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SADF;AAUD;;;;EApBsBR,KAAK,CAACqB,S;;AAuB/B,eAAenB,SAAS,CAACC,UAAD,CAAxB","sourcesContent":["/* @flow */\n\nimport color from 'color';\nimport * as React from 'react';\nimport { I18nManager } from 'react-native';\nimport Text from './Text';\nimport { withTheme } from '../../core/theming';\nimport type { Theme } from '../../types';\n\ntype Props = React.ElementConfig<typeof Text> & {\n  alpha: number,\n  family: 'regular' | 'medium' | 'light' | 'thin',\n  style?: any,\n  theme: Theme,\n};\n\nclass StyledText extends React.Component<Props> {\n  render() {\n    const { theme, alpha, family, style, ...rest } = this.props;\n    const textColor = color(theme.colors.text)\n      .alpha(alpha)\n      .rgb()\n      .string();\n    const fontFamily = theme.fonts[family];\n    const writingDirection = I18nManager.isRTL ? 'rtl' : 'ltr';\n\n    return (\n      <Text\n        {...rest}\n        style={[\n          { color: textColor, fontFamily, textAlign: 'left', writingDirection },\n          style,\n          this.props.style,\n        ]}\n      />\n    );\n  }\n}\n\nexport default withTheme(StyledText);\n"]},"metadata":{},"sourceType":"module"}