{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\Fido\\\\Documents\\\\GitHub\\\\UI-Design-React\\\\app\\\\node_modules\\\\react-native-paper\\\\src\\\\components\\\\Menu\\\\MenuItem.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport color from 'color';\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Icon from \"../Icon\";\nimport TouchableRipple from \"../TouchableRipple\";\nimport Text from \"../Typography/Text\";\nimport { withTheme } from \"../../core/theming\";\nimport { black, white } from \"../../styles/colors\";\n\nvar MenuItem = function (_React$Component) {\n  _inherits(MenuItem, _React$Component);\n\n  var _super = _createSuper(MenuItem);\n\n  function MenuItem() {\n    _classCallCheck(this, MenuItem);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(MenuItem, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          icon = _this$props.icon,\n          title = _this$props.title,\n          disabled = _this$props.disabled,\n          onPress = _this$props.onPress,\n          theme = _this$props.theme,\n          style = _this$props.style;\n      var disabledColor = color(theme.dark ? white : black).alpha(0.32).rgb().string();\n      var titleColor = disabled ? disabledColor : color(theme.colors.text).alpha(0.87).rgb().string();\n      var iconColor = disabled ? disabledColor : color(theme.colors.text).alpha(0.54).rgb().string();\n      return React.createElement(TouchableRipple, {\n        style: [styles.container, style],\n        onPress: onPress,\n        disabled: disabled,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 7\n        }\n      }, React.createElement(View, {\n        style: styles.row,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 9\n        }\n      }, icon ? React.createElement(View, {\n        style: [styles.item, styles.icon],\n        pointerEvents: \"box-none\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 13\n        }\n      }, React.createElement(Icon, {\n        source: icon,\n        size: 24,\n        color: iconColor,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 15\n        }\n      })) : null, React.createElement(View, {\n        style: [styles.item, styles.content, icon && styles.widthWithIcon],\n        pointerEvents: \"none\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 11\n        }\n      }, React.createElement(Text, {\n        numberOfLines: 1,\n        style: [styles.title, {\n          color: titleColor\n        }],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 13\n        }\n      }, title))));\n    }\n  }]);\n\n  return MenuItem;\n}(React.Component);\n\nMenuItem.displayName = 'Menu.Item';\nvar minWidth = 112;\nvar maxWidth = 280;\nvar iconWidth = 40;\nvar styles = StyleSheet.create({\n  container: {\n    padding: 8,\n    minWidth: minWidth,\n    maxWidth: maxWidth\n  },\n  row: {\n    flexDirection: 'row'\n  },\n  icon: {\n    width: iconWidth\n  },\n  title: {\n    fontSize: 16\n  },\n  item: {\n    margin: 8\n  },\n  content: {\n    justifyContent: 'center',\n    minWidth: minWidth - 16,\n    maxWidth: maxWidth - 16\n  },\n  widthWithIcon: {\n    maxWidth: maxWidth - (iconWidth + 48)\n  }\n});\nexport default withTheme(MenuItem);","map":{"version":3,"sources":["C:/Users/Fido/Documents/GitHub/UI-Design-React/app/node_modules/react-native-paper/src/components/Menu/MenuItem.js"],"names":["color","React","Icon","TouchableRipple","Text","withTheme","black","white","MenuItem","props","icon","title","disabled","onPress","theme","style","disabledColor","dark","alpha","rgb","string","titleColor","colors","text","iconColor","styles","container","row","item","content","widthWithIcon","Component","displayName","minWidth","maxWidth","iconWidth","StyleSheet","create","padding","flexDirection","width","fontSize","margin","justifyContent"],"mappings":"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","sourcesContent":["/* @flow */\n\nimport color from 'color';\nimport * as React from 'react';\nimport { View, StyleSheet } from 'react-native';\nimport Icon from '../Icon';\nimport TouchableRipple from '../TouchableRipple';\nimport Text from '../Typography/Text';\nimport { withTheme } from '../../core/theming';\nimport { black, white } from '../../styles/colors';\nimport type { Theme } from '../../types';\nimport type { IconSource } from '../Icon';\n\ntype Props = {\n  /**\n   * Title text for the `MenuItem`.\n   */\n  title: React.Node,\n  /**\n   * Icon to display for the `MenuItem`.\n   */\n  icon?: IconSource,\n  /**\n   * Whether the 'item' is disabled. A disabled 'item' is greyed out and `onPress` is not called on touch.\n   */\n  disabled?: boolean,\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => mixed,\n  /**\n   * @optional\n   */\n  theme: Theme,\n  style?: any,\n};\n\n/**\n * A component to show a single list item inside a Menu.\n *\n */\n\nclass MenuItem extends React.Component<Props> {\n  static displayName = 'Menu.Item';\n\n  render() {\n    const { icon, title, disabled, onPress, theme, style } = this.props;\n\n    const disabledColor = color(theme.dark ? white : black)\n      .alpha(0.32)\n      .rgb()\n      .string();\n\n    const titleColor = disabled\n      ? disabledColor\n      : color(theme.colors.text)\n          .alpha(0.87)\n          .rgb()\n          .string();\n\n    const iconColor = disabled\n      ? disabledColor\n      : color(theme.colors.text)\n          .alpha(0.54)\n          .rgb()\n          .string();\n\n    return (\n      <TouchableRipple\n        style={[styles.container, style]}\n        onPress={onPress}\n        disabled={disabled}\n      >\n        <View style={styles.row}>\n          {icon ? (\n            <View style={[styles.item, styles.icon]} pointerEvents=\"box-none\">\n              <Icon source={icon} size={24} color={iconColor} />\n            </View>\n          ) : null}\n          <View\n            style={[styles.item, styles.content, icon && styles.widthWithIcon]}\n            pointerEvents=\"none\"\n          >\n            <Text\n              numberOfLines={1}\n              style={[styles.title, { color: titleColor }]}\n            >\n              {title}\n            </Text>\n          </View>\n        </View>\n      </TouchableRipple>\n    );\n  }\n}\n\nconst minWidth = 112;\nconst maxWidth = 280;\nconst iconWidth = 40;\n\nconst styles = StyleSheet.create({\n  container: {\n    padding: 8,\n    minWidth,\n    maxWidth,\n  },\n  row: {\n    flexDirection: 'row',\n  },\n  icon: {\n    width: iconWidth,\n  },\n  title: {\n    fontSize: 16,\n  },\n  item: {\n    margin: 8,\n  },\n  content: {\n    justifyContent: 'center',\n    minWidth: minWidth - 16,\n    maxWidth: maxWidth - 16,\n  },\n  widthWithIcon: {\n    maxWidth: maxWidth - (iconWidth + 48),\n  },\n});\n\nexport default withTheme(MenuItem);\n"]},"metadata":{},"sourceType":"module"}