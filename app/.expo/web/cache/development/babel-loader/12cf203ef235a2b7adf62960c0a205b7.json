{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\Fido\\\\Documents\\\\GitHub\\\\UI-Design-React\\\\app\\\\node_modules\\\\react-native-paper\\\\src\\\\components\\\\Dialog\\\\DialogScrollArea.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\n\nvar DialogScrollArea = function (_React$Component) {\n  _inherits(DialogScrollArea, _React$Component);\n\n  var _super = _createSuper(DialogScrollArea);\n\n  function DialogScrollArea() {\n    _classCallCheck(this, DialogScrollArea);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(DialogScrollArea, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(View, _extends({}, this.props, {\n        style: [styles.container, this.props.style],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 7\n        }\n      }), this.props.children);\n    }\n  }]);\n\n  return DialogScrollArea;\n}(React.Component);\n\nDialogScrollArea.displayName = 'Dialog.ScrollArea';\nvar styles = StyleSheet.create({\n  container: {\n    borderColor: 'rgba(0, 0, 0, .12)',\n    borderTopWidth: StyleSheet.hairlineWidth,\n    borderBottomWidth: StyleSheet.hairlineWidth,\n    paddingHorizontal: 24,\n    flexGrow: 1,\n    flexShrink: 1\n  }\n});\nexport default DialogScrollArea;","map":{"version":3,"sources":["C:/Users/Fido/Documents/GitHub/UI-Design-React/app/node_modules/react-native-paper/src/components/Dialog/DialogScrollArea.js"],"names":["React","DialogScrollArea","props","styles","container","style","children","Component","displayName","StyleSheet","create","borderColor","borderTopWidth","hairlineWidth","borderBottomWidth","paddingHorizontal","flexGrow","flexShrink"],"mappings":";;;;;;;;;;;;AAEA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;;;;IA8CMC,gB;;;;;;;;;;;;;6BAGK;AACP,aACE,oBAAC,IAAD,eAAU,KAAKC,KAAf;AAAsB,QAAA,KAAK,EAAE,CAACC,MAAM,CAACC,SAAR,EAAmB,KAAKF,KAAL,CAAWG,KAA9B,CAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UACG,KAAKH,KAAL,CAAWI,QADd,CADF;AAKD;;;;EAT4BN,KAAK,CAACO,S;;AAA/BN,gB,CACGO,W,GAAc,mB;AAWvB,IAAML,MAAM,GAAGM,UAAU,CAACC,MAAX,CAAkB;AAC/BN,EAAAA,SAAS,EAAE;AACTO,IAAAA,WAAW,EAAE,oBADJ;AAETC,IAAAA,cAAc,EAAEH,UAAU,CAACI,aAFlB;AAGTC,IAAAA,iBAAiB,EAAEL,UAAU,CAACI,aAHrB;AAITE,IAAAA,iBAAiB,EAAE,EAJV;AAKTC,IAAAA,QAAQ,EAAE,CALD;AAMTC,IAAAA,UAAU,EAAE;AANH;AADoB,CAAlB,CAAf;AAWA,eAAehB,gBAAf","sourcesContent":["/* @flow */\n\nimport * as React from 'react';\nimport { View, StyleSheet } from 'react-native';\n\ntype Props = React.ElementConfig<typeof View> & {\n  /**\n   * Content of the `DialogScrollArea`.\n   */\n  children: React.Node,\n  style?: any,\n};\n\n/**\n * A component to show a scrollable content in a Dialog. The component only provides appropriate styling.\n * For the scrollable content you can use `ScrollView`, `FlatList` etc. depending on your requirement.\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { ScrollView } from 'react-native';\n * import { Dialog, Portal } from 'react-native-paper';\n *\n * export default class MyComponent extends React.Component {\n *   state = {\n *     visible: false,\n *   };\n *\n *   _hideDialog = () => this.setState({ visible: false });\n *\n *   render() {\n *     return (\n *       <Portal>\n *         <Dialog\n *           visible={this.state.visible}\n *           onDismiss={this._hideDialog}>\n *           <Dialog.ScrollArea>\n *             <ScrollView contentContainerStyle={{ paddingHorizontal: 24 }}>\n *               This is a scrollable area\n *             </ScrollView>\n *           </Dialog.ScrollArea>\n *         </Dialog>\n *       </Portal>\n *     );\n *   }\n * }\n * ```\n */\nclass DialogScrollArea extends React.Component<Props> {\n  static displayName = 'Dialog.ScrollArea';\n\n  render() {\n    return (\n      <View {...this.props} style={[styles.container, this.props.style]}>\n        {this.props.children}\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    borderColor: 'rgba(0, 0, 0, .12)',\n    borderTopWidth: StyleSheet.hairlineWidth,\n    borderBottomWidth: StyleSheet.hairlineWidth,\n    paddingHorizontal: 24,\n    flexGrow: 1,\n    flexShrink: 1,\n  },\n});\n\nexport default DialogScrollArea;\n"]},"metadata":{},"sourceType":"module"}