{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\Fido\\\\Documents\\\\GitHub\\\\UI-Design-React\\\\app\\\\node_modules\\\\react-native-paper\\\\src\\\\components\\\\Avatar\\\\AvatarText.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport color from 'color';\nimport Text from \"../Typography/Text\";\nimport { withTheme } from \"../../core/theming\";\nimport { white } from \"../../styles/colors\";\n\nvar AvatarText = function (_React$Component) {\n  _inherits(AvatarText, _React$Component);\n\n  var _super = _createSuper(AvatarText);\n\n  function AvatarText() {\n    _classCallCheck(this, AvatarText);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(AvatarText, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          label = _this$props.label,\n          size = _this$props.size,\n          style = _this$props.style,\n          theme = _this$props.theme;\n\n      var _ref = StyleSheet.flatten(style) || {},\n          _ref$backgroundColor = _ref.backgroundColor,\n          backgroundColor = _ref$backgroundColor === void 0 ? theme.colors.primary : _ref$backgroundColor,\n          restStyle = _objectWithoutProperties(_ref, [\"backgroundColor\"]);\n\n      var textColor = this.props.color || (color(backgroundColor).light() ? 'rgba(0, 0, 0, .54)' : white);\n      return React.createElement(View, {\n        style: [{\n          width: size,\n          height: size,\n          borderRadius: size / 2,\n          backgroundColor: backgroundColor\n        }, styles.container, restStyle],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 7\n        }\n      }, React.createElement(Text, {\n        style: [styles.text, {\n          color: textColor,\n          fontSize: size / 2,\n          lineHeight: size\n        }],\n        numberOfLines: 1,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 9\n        }\n      }, label));\n    }\n  }]);\n\n  return AvatarText;\n}(React.Component);\n\nAvatarText.displayName = 'Avatar.Text';\nAvatarText.defaultProps = {\n  size: 64\n};\nvar styles = StyleSheet.create({\n  container: {\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  text: {\n    textAlign: 'center',\n    textAlignVertical: 'center'\n  }\n});\nexport default withTheme(AvatarText);","map":{"version":3,"sources":["C:/Users/Fido/Documents/GitHub/UI-Design-React/app/node_modules/react-native-paper/src/components/Avatar/AvatarText.js"],"names":["React","color","Text","withTheme","white","AvatarText","props","label","size","style","theme","StyleSheet","flatten","backgroundColor","colors","primary","restStyle","textColor","light","width","height","borderRadius","styles","container","text","fontSize","lineHeight","Component","displayName","defaultProps","create","justifyContent","alignItems","textAlign","textAlignVertical"],"mappings":";;;;;;;;;;;;AAEA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;;;AAEA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP;AACA,SAASC,SAAT;AACA,SAASC,KAAT;;IA0CMC,U;;;;;;;;;;;;;6BAOK;AAAA,wBAC+B,KAAKC,KADpC;AAAA,UACCC,KADD,eACCA,KADD;AAAA,UACQC,IADR,eACQA,IADR;AAAA,UACcC,KADd,eACcA,KADd;AAAA,UACqBC,KADrB,eACqBA,KADrB;;AAAA,iBAILC,UAAU,CAACC,OAAX,CAAmBH,KAAnB,KAA6B,EAJxB;AAAA,sCAGCI,eAHD;AAAA,UAGCA,eAHD,qCAGmBH,KAAK,CAACI,MAAN,CAAaC,OAHhC;AAAA,UAG4CC,SAH5C;;AAKP,UAAMC,SAAS,GACb,KAAKX,KAAL,CAAWL,KAAX,KACCA,KAAK,CAACY,eAAD,CAAL,CAAuBK,KAAvB,KAAiC,oBAAjC,GAAwDd,KADzD,CADF;AAIA,aACE,oBAAC,IAAD;AACE,QAAA,KAAK,EAAE,CACL;AACEe,UAAAA,KAAK,EAAEX,IADT;AAEEY,UAAAA,MAAM,EAAEZ,IAFV;AAGEa,UAAAA,YAAY,EAAEb,IAAI,GAAG,CAHvB;AAIEK,UAAAA,eAAe,EAAfA;AAJF,SADK,EAOLS,MAAM,CAACC,SAPF,EAQLP,SARK,CADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAYE,oBAAC,IAAD;AACE,QAAA,KAAK,EAAE,CACLM,MAAM,CAACE,IADF,EAEL;AACEvB,UAAAA,KAAK,EAAEgB,SADT;AAEEQ,UAAAA,QAAQ,EAAEjB,IAAI,GAAG,CAFnB;AAGEkB,UAAAA,UAAU,EAAElB;AAHd,SAFK,CADT;AASE,QAAA,aAAa,EAAE,CATjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAWGD,KAXH,CAZF,CADF;AA4BD;;;;EA5CsBP,KAAK,CAAC2B,S;;AAAzBtB,U,CACGuB,W,GAAc,a;AADjBvB,U,CAGGwB,Y,GAAe;AACpBrB,EAAAA,IAAI,EAAE;AADc,C;AA4CxB,IAAMc,MAAM,GAAGX,UAAU,CAACmB,MAAX,CAAkB;AAC/BP,EAAAA,SAAS,EAAE;AACTQ,IAAAA,cAAc,EAAE,QADP;AAETC,IAAAA,UAAU,EAAE;AAFH,GADoB;AAK/BR,EAAAA,IAAI,EAAE;AACJS,IAAAA,SAAS,EAAE,QADP;AAEJC,IAAAA,iBAAiB,EAAE;AAFf;AALyB,CAAlB,CAAf;AAWA,eAAe/B,SAAS,CAACE,UAAD,CAAxB","sourcesContent":["/* @flow */\n\nimport * as React from 'react';\nimport { View, StyleSheet } from 'react-native';\nimport color from 'color';\nimport Text from '../Typography/Text';\nimport { withTheme } from '../../core/theming';\nimport { white } from '../../styles/colors';\nimport type { Theme } from '../../types';\n\ntype Props = {\n  /**\n   * Initials to show as the text in the `Avatar`.\n   */\n  label: string,\n  /**\n   * Size of the avatar.\n   */\n  size: number,\n  /**\n   * Custom color for the text.\n   */\n  color?: string,\n  style?: any,\n  /**\n   * @optional\n   */\n  theme: Theme,\n};\n\n/**\n * Avatars can be used to represent people in a graphical way.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/avatar-text.png\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Avatar } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Avatar.Text size={24} label=\"XD\" />\n * );\n * ```\n */\nclass AvatarText extends React.Component<Props> {\n  static displayName = 'Avatar.Text';\n\n  static defaultProps = {\n    size: 64,\n  };\n\n  render() {\n    const { label, size, style, theme } = this.props;\n\n    const { backgroundColor = theme.colors.primary, ...restStyle } =\n      StyleSheet.flatten(style) || {};\n    const textColor =\n      this.props.color ||\n      (color(backgroundColor).light() ? 'rgba(0, 0, 0, .54)' : white);\n\n    return (\n      <View\n        style={[\n          {\n            width: size,\n            height: size,\n            borderRadius: size / 2,\n            backgroundColor,\n          },\n          styles.container,\n          restStyle,\n        ]}\n      >\n        <Text\n          style={[\n            styles.text,\n            {\n              color: textColor,\n              fontSize: size / 2,\n              lineHeight: size,\n            },\n          ]}\n          numberOfLines={1}\n        >\n          {label}\n        </Text>\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  text: {\n    textAlign: 'center',\n    textAlignVertical: 'center',\n  },\n});\n\nexport default withTheme(AvatarText);\n"]},"metadata":{},"sourceType":"module"}