{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\Fido\\\\Documents\\\\GitHub\\\\UI-Design-React\\\\app\\\\node_modules\\\\react-native-paper\\\\src\\\\components\\\\TextInput\\\\TextInputOutlined.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport NativeTextInput from \"react-native-web/dist/exports/TextInput\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport color from 'color';\nimport Text from \"../Typography/Text\";\nvar AnimatedText = Animated.createAnimatedComponent(Text);\nvar OUTLINE_MINIMIZED_LABEL_Y_OFFSET = -29;\nvar MAXIMIZED_LABEL_FONT_SIZE = 16;\nvar MINIMIZED_LABEL_FONT_SIZE = 12;\nvar LABEL_WIGGLE_X_OFFSET = 4;\nvar LABEL_PADDING_HORIZONTAL = 12;\nvar RANDOM_VALUE_TO_CENTER_LABEL = 4;\n\nvar TextInputOutlined = function (_React$Component) {\n  _inherits(TextInputOutlined, _React$Component);\n\n  var _super = _createSuper(TextInputOutlined);\n\n  function TextInputOutlined() {\n    _classCallCheck(this, TextInputOutlined);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(TextInputOutlined, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          disabled = _this$props.disabled,\n          label = _this$props.label,\n          error = _this$props.error,\n          selectionColor = _this$props.selectionColor,\n          underlineColor = _this$props.underlineColor,\n          style = _this$props.style,\n          theme = _this$props.theme,\n          render = _this$props.render,\n          multiline = _this$props.multiline,\n          parentState = _this$props.parentState,\n          innerRef = _this$props.innerRef,\n          onFocus = _this$props.onFocus,\n          onBlur = _this$props.onBlur,\n          onChangeText = _this$props.onChangeText,\n          onLayoutAnimatedText = _this$props.onLayoutAnimatedText,\n          rest = _objectWithoutProperties(_this$props, [\"disabled\", \"label\", \"error\", \"selectionColor\", \"underlineColor\", \"style\", \"theme\", \"render\", \"multiline\", \"parentState\", \"innerRef\", \"onFocus\", \"onBlur\", \"onChangeText\", \"onLayoutAnimatedText\"]);\n\n      var colors = theme.colors,\n          fonts = theme.fonts;\n      var fontFamily = fonts.regular;\n      var hasActiveOutline = parentState.focused || error;\n\n      var _ref = StyleSheet.flatten(style) || {},\n          _ref$backgroundColor = _ref.backgroundColor,\n          backgroundColor = _ref$backgroundColor === void 0 ? colors.background : _ref$backgroundColor;\n\n      var inputTextColor, activeColor, outlineColor, placeholderColor, containerStyle;\n\n      if (disabled) {\n        inputTextColor = activeColor = color(colors.text).alpha(0.54).rgb().string();\n        placeholderColor = outlineColor = colors.disabled;\n      } else {\n        inputTextColor = colors.text;\n        activeColor = error ? colors.error : colors.primary;\n        placeholderColor = outlineColor = colors.placeholder;\n      }\n\n      var labelHalfWidth = parentState.labelLayout.width / 2;\n      var baseLabelTranslateX = (I18nManager.isRTL ? 1 : -1) * (1 - MINIMIZED_LABEL_FONT_SIZE / MAXIMIZED_LABEL_FONT_SIZE) * labelHalfWidth;\n      var labelStyle = {\n        fontFamily: fontFamily,\n        fontSize: MAXIMIZED_LABEL_FONT_SIZE,\n        transform: [{\n          translateX: parentState.error.interpolate({\n            inputRange: [0, 0.5, 1],\n            outputRange: [0, parentState.value && error ? LABEL_WIGGLE_X_OFFSET : 0, 0]\n          })\n        }, {\n          translateY: parentState.labeled.interpolate({\n            inputRange: [0, 1],\n            outputRange: [OUTLINE_MINIMIZED_LABEL_Y_OFFSET, 0]\n          })\n        }, {\n          scale: parentState.labeled.interpolate({\n            inputRange: [0, 1],\n            outputRange: [MINIMIZED_LABEL_FONT_SIZE / MAXIMIZED_LABEL_FONT_SIZE, 1]\n          })\n        }, {\n          translateX: parentState.labeled.interpolate({\n            inputRange: [0, 1],\n            outputRange: [baseLabelTranslateX > 0 ? baseLabelTranslateX + labelHalfWidth / LABEL_PADDING_HORIZONTAL - RANDOM_VALUE_TO_CENTER_LABEL : baseLabelTranslateX - labelHalfWidth / LABEL_PADDING_HORIZONTAL + RANDOM_VALUE_TO_CENTER_LABEL, 0]\n          })\n        }]\n      };\n      return React.createElement(View, {\n        style: [containerStyle, style],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 7\n        }\n      }, React.createElement(View, {\n        pointerEvents: \"none\",\n        style: [styles.outline, {\n          borderRadius: theme.roundness,\n          borderWidth: hasActiveOutline ? 2 : 1,\n          borderColor: hasActiveOutline ? activeColor : outlineColor\n        }],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 9\n        }\n      }), label ? React.createElement(AnimatedText, {\n        pointerEvents: \"none\",\n        style: [styles.outlinedLabelBackground, {\n          backgroundColor: backgroundColor,\n          fontFamily: fontFamily,\n          fontSize: MINIMIZED_LABEL_FONT_SIZE,\n          opacity: parentState.labeled.interpolate({\n            inputRange: [0, 0.9, 1],\n            outputRange: [1, 1, 0]\n          }),\n          transform: [{\n            scaleX: parentState.labeled.interpolate({\n              inputRange: [0, 1],\n              outputRange: [1, 0]\n            })\n          }]\n        }],\n        numberOfLines: 1,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 11\n        }\n      }, label) : null, label ? React.createElement(View, {\n        pointerEvents: \"none\",\n        style: [StyleSheet.absoluteFill, {\n          opacity: parentState.value || parentState.focused ? parentState.labelLayout.measured ? 1 : 0 : 1\n        }],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 11\n        }\n      }, React.createElement(AnimatedText, {\n        onLayout: onLayoutAnimatedText,\n        style: [styles.placeholder, styles.placeholderOutlined, labelStyle, {\n          color: activeColor,\n          opacity: parentState.labeled.interpolate({\n            inputRange: [0, 1],\n            outputRange: [hasActiveOutline ? 1 : 0, 0]\n          })\n        }],\n        numberOfLines: 1,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 13\n        }\n      }, label), React.createElement(AnimatedText, {\n        style: [styles.placeholder, styles.placeholderOutlined, labelStyle, {\n          color: placeholderColor,\n          opacity: hasActiveOutline ? parentState.labeled : 1\n        }],\n        numberOfLines: 1,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 13\n        }\n      }, label)) : null, render(_objectSpread(_objectSpread({}, rest), {}, {\n        ref: innerRef,\n        onChangeText: onChangeText,\n        placeholder: label ? parentState.placeholder : this.props.placeholder,\n        placeholderTextColor: placeholderColor,\n        editable: !disabled,\n        selectionColor: typeof selectionColor === 'undefined' ? activeColor : selectionColor,\n        onFocus: onFocus,\n        onBlur: onBlur,\n        underlineColorAndroid: 'transparent',\n        multiline: multiline,\n        style: [styles.input, styles.inputOutlined, {\n          color: inputTextColor,\n          fontFamily: fontFamily,\n          textAlignVertical: multiline ? 'top' : 'center'\n        }]\n      })));\n    }\n  }]);\n\n  return TextInputOutlined;\n}(React.Component);\n\nTextInputOutlined.defaultProps = {\n  disabled: false,\n  error: false,\n  multiline: false,\n  editable: true,\n  render: function render(props) {\n    return React.createElement(NativeTextInput, _extends({}, props, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 37\n      }\n    }));\n  }\n};\nexport default TextInputOutlined;\nvar styles = StyleSheet.create({\n  placeholder: {\n    position: 'absolute',\n    left: 0,\n    fontSize: 16,\n    paddingHorizontal: LABEL_PADDING_HORIZONTAL\n  },\n  placeholderOutlined: {\n    top: 25\n  },\n  outline: {\n    position: 'absolute',\n    left: 0,\n    right: 0,\n    top: 6,\n    bottom: 0\n  },\n  outlinedLabelBackground: {\n    position: 'absolute',\n    top: 0,\n    left: 8,\n    paddingHorizontal: 4,\n    color: 'transparent'\n  },\n  input: {\n    flexGrow: 1,\n    paddingHorizontal: 12,\n    fontSize: 16,\n    margin: 0,\n    minHeight: 58,\n    textAlign: I18nManager.isRTL ? 'right' : 'left',\n    zIndex: 1\n  },\n  inputOutlined: {\n    paddingTop: 20,\n    paddingBottom: 16,\n    minHeight: 64\n  }\n});","map":{"version":3,"sources":["C:/Users/Fido/Documents/GitHub/UI-Design-React/app/node_modules/react-native-paper/src/components/TextInput/TextInputOutlined.js"],"names":["React","color","Text","AnimatedText","Animated","createAnimatedComponent","OUTLINE_MINIMIZED_LABEL_Y_OFFSET","MAXIMIZED_LABEL_FONT_SIZE","MINIMIZED_LABEL_FONT_SIZE","LABEL_WIGGLE_X_OFFSET","LABEL_PADDING_HORIZONTAL","RANDOM_VALUE_TO_CENTER_LABEL","TextInputOutlined","props","disabled","label","error","selectionColor","underlineColor","style","theme","render","multiline","parentState","innerRef","onFocus","onBlur","onChangeText","onLayoutAnimatedText","rest","colors","fonts","fontFamily","regular","hasActiveOutline","focused","StyleSheet","flatten","backgroundColor","background","inputTextColor","activeColor","outlineColor","placeholderColor","containerStyle","text","alpha","rgb","string","primary","placeholder","labelHalfWidth","labelLayout","width","baseLabelTranslateX","I18nManager","isRTL","labelStyle","fontSize","transform","translateX","interpolate","inputRange","outputRange","value","translateY","labeled","scale","styles","outline","borderRadius","roundness","borderWidth","borderColor","outlinedLabelBackground","opacity","scaleX","absoluteFill","measured","placeholderOutlined","ref","placeholderTextColor","editable","underlineColorAndroid","input","inputOutlined","textAlignVertical","Component","defaultProps","create","position","left","paddingHorizontal","top","right","bottom","flexGrow","margin","minHeight","textAlign","zIndex","paddingTop","paddingBottom"],"mappings":"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","sourcesContent":["/* @flow */\n\nimport * as React from 'react';\nimport {\n  View,\n  Animated,\n  TextInput as NativeTextInput,\n  StyleSheet,\n  I18nManager,\n} from 'react-native';\nimport color from 'color';\nimport Text from '../Typography/Text';\nimport type { ChildTextInputProps, RenderProps } from './types';\n\nconst AnimatedText = Animated.createAnimatedComponent(Text);\n\nconst OUTLINE_MINIMIZED_LABEL_Y_OFFSET = -29;\nconst MAXIMIZED_LABEL_FONT_SIZE = 16;\nconst MINIMIZED_LABEL_FONT_SIZE = 12;\nconst LABEL_WIGGLE_X_OFFSET = 4;\nconst LABEL_PADDING_HORIZONTAL = 12;\nconst RANDOM_VALUE_TO_CENTER_LABEL = 4; // Don't know why 4, but it works\n\nclass TextInputOutlined extends React.Component<ChildTextInputProps, {}> {\n  static defaultProps = {\n    disabled: false,\n    error: false,\n    multiline: false,\n    editable: true,\n    render: (props: RenderProps) => <NativeTextInput {...props} />,\n  };\n\n  render() {\n    const {\n      disabled,\n      label,\n      error,\n      selectionColor,\n      underlineColor,\n      style,\n      theme,\n      render,\n      multiline,\n      parentState,\n      innerRef,\n      onFocus,\n      onBlur,\n      onChangeText,\n      onLayoutAnimatedText,\n      ...rest\n    } = this.props;\n\n    const { colors, fonts } = theme;\n    const fontFamily = fonts.regular;\n    const hasActiveOutline = parentState.focused || error;\n    const { backgroundColor = colors.background } =\n      StyleSheet.flatten(style) || {};\n\n    let inputTextColor,\n      activeColor,\n      outlineColor,\n      placeholderColor,\n      containerStyle;\n\n    if (disabled) {\n      inputTextColor = activeColor = color(colors.text)\n        .alpha(0.54)\n        .rgb()\n        .string();\n      placeholderColor = outlineColor = colors.disabled;\n    } else {\n      inputTextColor = colors.text;\n      activeColor = error ? colors.error : colors.primary;\n      placeholderColor = outlineColor = colors.placeholder;\n    }\n\n    const labelHalfWidth = parentState.labelLayout.width / 2;\n    const baseLabelTranslateX =\n      (I18nManager.isRTL ? 1 : -1) *\n      (1 - MINIMIZED_LABEL_FONT_SIZE / MAXIMIZED_LABEL_FONT_SIZE) *\n      labelHalfWidth;\n\n    const labelStyle = {\n      fontFamily,\n      fontSize: MAXIMIZED_LABEL_FONT_SIZE,\n      transform: [\n        {\n          // Wiggle the label when there's an error\n          translateX: parentState.error.interpolate({\n            inputRange: [0, 0.5, 1],\n            outputRange: [\n              0,\n              parentState.value && error ? LABEL_WIGGLE_X_OFFSET : 0,\n              0,\n            ],\n          }),\n        },\n        {\n          // Move label to top\n          translateY: parentState.labeled.interpolate({\n            inputRange: [0, 1],\n            outputRange: [OUTLINE_MINIMIZED_LABEL_Y_OFFSET, 0],\n          }),\n        },\n        {\n          // Make label smaller\n          scale: parentState.labeled.interpolate({\n            inputRange: [0, 1],\n            outputRange: [\n              MINIMIZED_LABEL_FONT_SIZE / MAXIMIZED_LABEL_FONT_SIZE,\n              1,\n            ],\n          }),\n        },\n        {\n          // Offset label scale since RN doesn't support transform origin\n          translateX: parentState.labeled.interpolate({\n            inputRange: [0, 1],\n            outputRange: [\n              baseLabelTranslateX > 0\n                ? baseLabelTranslateX +\n                  labelHalfWidth / LABEL_PADDING_HORIZONTAL -\n                  RANDOM_VALUE_TO_CENTER_LABEL\n                : baseLabelTranslateX -\n                  labelHalfWidth / LABEL_PADDING_HORIZONTAL +\n                  RANDOM_VALUE_TO_CENTER_LABEL,\n              0,\n            ],\n          }),\n        },\n      ],\n    };\n\n    return (\n      <View style={[containerStyle, style]}>\n        {/* \n          Render the outline separately from the container\n          This is so that the label can overlap the outline\n          Otherwise the border will cut off the label on Android \n          */}\n        <View\n          pointerEvents=\"none\"\n          style={[\n            styles.outline,\n            {\n              borderRadius: theme.roundness,\n              borderWidth: hasActiveOutline ? 2 : 1,\n              borderColor: hasActiveOutline ? activeColor : outlineColor,\n            },\n          ]}\n        />\n\n        {label ? (\n          // The input label stays on top of the outline\n          // The background of the label covers the outline so it looks cut off\n          // To achieve the effect, we position the actual label with a background on top of it\n          // We set the color of the text to transparent so only the background is visible\n          <AnimatedText\n            pointerEvents=\"none\"\n            style={[\n              styles.outlinedLabelBackground,\n              {\n                backgroundColor,\n                fontFamily,\n                fontSize: MINIMIZED_LABEL_FONT_SIZE,\n                // Hide the background when scale will be 0\n                // There's a bug in RN which makes scale: 0 act weird\n                opacity: parentState.labeled.interpolate({\n                  inputRange: [0, 0.9, 1],\n                  outputRange: [1, 1, 0],\n                }),\n                transform: [\n                  {\n                    // Animate the scale when label is moved up\n                    scaleX: parentState.labeled.interpolate({\n                      inputRange: [0, 1],\n                      outputRange: [1, 0],\n                    }),\n                  },\n                ],\n              },\n            ]}\n            numberOfLines={1}\n          >\n            {label}\n          </AnimatedText>\n        ) : null}\n\n        {label ? (\n          // Position colored placeholder and gray placeholder on top of each other and crossfade them\n          // This gives the effect of animating the color, but allows us to use native driver\n          <View\n            pointerEvents=\"none\"\n            style={[\n              StyleSheet.absoluteFill,\n              {\n                opacity:\n                  // Hide the label in minimized state until we measure it's width\n                  parentState.value || parentState.focused\n                    ? parentState.labelLayout.measured\n                      ? 1\n                      : 0\n                    : 1,\n              },\n            ]}\n          >\n            <AnimatedText\n              onLayout={onLayoutAnimatedText}\n              style={[\n                styles.placeholder,\n                styles.placeholderOutlined,\n                labelStyle,\n                {\n                  color: activeColor,\n                  opacity: parentState.labeled.interpolate({\n                    inputRange: [0, 1],\n                    outputRange: [hasActiveOutline ? 1 : 0, 0],\n                  }),\n                },\n              ]}\n              numberOfLines={1}\n            >\n              {label}\n            </AnimatedText>\n            <AnimatedText\n              style={[\n                styles.placeholder,\n                styles.placeholderOutlined,\n                labelStyle,\n                {\n                  color: placeholderColor,\n                  opacity: hasActiveOutline ? parentState.labeled : 1,\n                },\n              ]}\n              numberOfLines={1}\n            >\n              {label}\n            </AnimatedText>\n          </View>\n        ) : null}\n\n        {render(\n          ({\n            ...rest,\n            ref: innerRef,\n            onChangeText,\n            placeholder: label\n              ? parentState.placeholder\n              : this.props.placeholder,\n            placeholderTextColor: placeholderColor,\n            editable: !disabled,\n            selectionColor:\n              typeof selectionColor === 'undefined'\n                ? activeColor\n                : selectionColor,\n            onFocus,\n            onBlur,\n            underlineColorAndroid: 'transparent',\n            multiline,\n            style: [\n              styles.input,\n              styles.inputOutlined,\n              {\n                color: inputTextColor,\n                fontFamily,\n                textAlignVertical: multiline ? 'top' : 'center',\n              },\n            ],\n          }: RenderProps)\n        )}\n      </View>\n    );\n  }\n}\n\nexport default TextInputOutlined;\n\nconst styles = StyleSheet.create({\n  placeholder: {\n    position: 'absolute',\n    left: 0,\n    fontSize: 16,\n    paddingHorizontal: LABEL_PADDING_HORIZONTAL,\n  },\n  placeholderOutlined: {\n    top: 25,\n  },\n  outline: {\n    position: 'absolute',\n    left: 0,\n    right: 0,\n    top: 6,\n    bottom: 0,\n  },\n  outlinedLabelBackground: {\n    position: 'absolute',\n    top: 0,\n    left: 8,\n    paddingHorizontal: 4,\n    color: 'transparent',\n  },\n  input: {\n    flexGrow: 1,\n    paddingHorizontal: 12,\n    fontSize: 16,\n    margin: 0,\n    minHeight: 58,\n    textAlign: I18nManager.isRTL ? 'right' : 'left',\n    zIndex: 1,\n  },\n  inputOutlined: {\n    paddingTop: 20,\n    paddingBottom: 16,\n    minHeight: 64,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}