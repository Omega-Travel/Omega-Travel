{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\Fido\\\\Documents\\\\GitHub\\\\UI-Design-React\\\\app\\\\node_modules\\\\react-native-paper\\\\src\\\\components\\\\ActivityIndicator.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Easing from \"react-native-web/dist/exports/Easing\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { withTheme } from \"../core/theming\";\nvar DURATION = 2400;\n\nvar ActivityIndicator = function (_React$Component) {\n  _inherits(ActivityIndicator, _React$Component);\n\n  var _super = _createSuper(ActivityIndicator);\n\n  function ActivityIndicator() {\n    var _this;\n\n    _classCallCheck(this, ActivityIndicator);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      timer: new Animated.Value(0),\n      fade: new Animated.Value(!_this.props.animating && _this.props.hidesWhenStopped ? 0 : 1)\n    };\n    _this.rotation = null;\n\n    _this._startRotation = function () {\n      var _this$state = _this.state,\n          fade = _this$state.fade,\n          timer = _this$state.timer;\n      Animated.timing(fade, {\n        duration: 200,\n        toValue: 1,\n        isInteraction: false,\n        useNativeDriver: true\n      }).start();\n\n      if (_this.rotation) {\n        timer.setValue(0);\n        Animated.loop(_this.rotation).start();\n      }\n    };\n\n    _this._stopRotation = function () {\n      if (_this.rotation) {\n        _this.rotation.stop();\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(ActivityIndicator, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var animating = this.props.animating;\n      var timer = this.state.timer;\n      this.rotation = Animated.timing(timer, {\n        duration: DURATION,\n        easing: Easing.linear,\n        useNativeDriver: Platform.OS !== 'web',\n        toValue: 1,\n        isInteraction: false\n      });\n\n      if (animating) {\n        this._startRotation();\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var _this$props = this.props,\n          animating = _this$props.animating,\n          hidesWhenStopped = _this$props.hidesWhenStopped;\n      var fade = this.state.fade;\n\n      if (animating !== prevProps.animating) {\n        if (animating) {\n          this._startRotation();\n        } else if (hidesWhenStopped) {\n          Animated.timing(fade, {\n            duration: 200,\n            toValue: 0,\n            useNativeDriver: true,\n            isInteraction: false\n          }).start(this._stopRotation.bind(this));\n        } else {\n          this._stopRotation();\n        }\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state2 = this.state,\n          fade = _this$state2.fade,\n          timer = _this$state2.timer;\n\n      var _this$props2 = this.props,\n          animating = _this$props2.animating,\n          indicatorColor = _this$props2.color,\n          hidesWhenStopped = _this$props2.hidesWhenStopped,\n          indicatorSize = _this$props2.size,\n          style = _this$props2.style,\n          theme = _this$props2.theme,\n          rest = _objectWithoutProperties(_this$props2, [\"animating\", \"color\", \"hidesWhenStopped\", \"size\", \"style\", \"theme\"]);\n\n      var color = indicatorColor || theme.colors.primary;\n      var size = typeof indicatorSize === 'string' ? indicatorSize === 'small' ? 24 : 48 : indicatorSize;\n      var frames = 60 * DURATION / 1000;\n      var easing = Easing.bezier(0.4, 0.0, 0.7, 1.0);\n      var containerStyle = {\n        width: size,\n        height: size / 2,\n        overflow: 'hidden'\n      };\n      return React.createElement(View, _extends({\n        style: [styles.container, style]\n      }, rest, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 7\n        }\n      }), React.createElement(Animated.View, {\n        style: [{\n          width: size,\n          height: size,\n          opacity: fade\n        }],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 9\n        }\n      }, [0, 1].map(function (index) {\n        var inputRange = Array.from(new Array(frames), function (frame, frameIndex) {\n          return frameIndex / (frames - 1);\n        });\n        var outputRange = Array.from(new Array(frames), function (frame, frameIndex) {\n          var progress = 2 * frameIndex / (frames - 1);\n          var rotation = index ? +(360 - 15) : -(180 - 15);\n\n          if (progress > 1.0) {\n            progress = 2.0 - progress;\n          }\n\n          var direction = index ? -1 : +1;\n          return direction * (180 - 30) * easing(progress) + rotation + \"deg\";\n        });\n        var layerStyle = {\n          width: size,\n          height: size,\n          transform: [{\n            rotate: timer.interpolate({\n              inputRange: [0, 1],\n              outputRange: [0 + 30 + 15 + \"deg\", 2 * 360 + 30 + 15 + \"deg\"]\n            })\n          }]\n        };\n        var viewportStyle = {\n          width: size,\n          height: size,\n          transform: [{\n            translateY: index ? -size / 2 : 0\n          }, {\n            rotate: timer.interpolate({\n              inputRange: inputRange,\n              outputRange: outputRange\n            })\n          }]\n        };\n        var offsetStyle = index ? {\n          top: size / 2\n        } : null;\n        var lineStyle = {\n          width: size,\n          height: size,\n          borderColor: color,\n          borderWidth: size / 10,\n          borderRadius: size / 2\n        };\n        return React.createElement(Animated.View, {\n          key: index,\n          style: [styles.layer],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 233,\n            columnNumber: 15\n          }\n        }, React.createElement(Animated.View, {\n          style: layerStyle,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 234,\n            columnNumber: 17\n          }\n        }, React.createElement(Animated.View, {\n          style: [containerStyle, offsetStyle],\n          collapsable: false,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 235,\n            columnNumber: 19\n          }\n        }, React.createElement(Animated.View, {\n          style: viewportStyle,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 239,\n            columnNumber: 21\n          }\n        }, React.createElement(Animated.View, {\n          style: containerStyle,\n          collapsable: false,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 240,\n            columnNumber: 23\n          }\n        }, React.createElement(Animated.View, {\n          style: lineStyle,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 241,\n            columnNumber: 25\n          }\n        }))))));\n      })));\n    }\n  }]);\n\n  return ActivityIndicator;\n}(React.Component);\n\nActivityIndicator.defaultProps = {\n  animating: true,\n  size: 'small',\n  hidesWhenStopped: true\n};\nvar styles = StyleSheet.create({\n  container: {\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  layer: _objectSpread(_objectSpread({}, StyleSheet.absoluteFillObject), {}, {\n    justifyContent: 'center',\n    alignItems: 'center'\n  })\n});\nexport default withTheme(ActivityIndicator);","map":{"version":3,"sources":["C:/Users/Fido/Documents/GitHub/UI-Design-React/app/node_modules/react-native-paper/src/components/ActivityIndicator.js"],"names":["React","withTheme","DURATION","ActivityIndicator","state","timer","Animated","Value","fade","props","animating","hidesWhenStopped","rotation","_startRotation","timing","duration","toValue","isInteraction","useNativeDriver","start","setValue","loop","_stopRotation","stop","easing","Easing","linear","Platform","OS","prevProps","bind","indicatorColor","color","indicatorSize","size","style","theme","rest","colors","primary","frames","bezier","containerStyle","width","height","overflow","styles","container","opacity","map","index","inputRange","Array","from","frame","frameIndex","outputRange","progress","direction","layerStyle","transform","rotate","interpolate","viewportStyle","translateY","offsetStyle","top","lineStyle","borderColor","borderWidth","borderRadius","layer","Component","defaultProps","StyleSheet","create","justifyContent","alignItems","absoluteFillObject"],"mappings":";;;;;;;;;;;;;;;;;;AAEA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;;;;;;AAEA,SAASC,SAAT;AAgCA,IAAMC,QAAQ,GAAG,IAAjB;;IAsBMC,iB;;;;;;;;;;;;;;;UAOJC,K,GAAQ;AACNC,MAAAA,KAAK,EAAE,IAAIC,QAAQ,CAACC,KAAb,CAAmB,CAAnB,CADD;AAENC,MAAAA,IAAI,EAAE,IAAIF,QAAQ,CAACC,KAAb,CACJ,CAAC,MAAKE,KAAL,CAAWC,SAAZ,IAAyB,MAAKD,KAAL,CAAWE,gBAApC,GAAuD,CAAvD,GAA2D,CADvD;AAFA,K;UAORC,Q,GAAW,I;;UA0CXC,c,GAAiB,YAAM;AAAA,wBACG,MAAKT,KADR;AAAA,UACbI,IADa,eACbA,IADa;AAAA,UACPH,KADO,eACPA,KADO;AAIrBC,MAAAA,QAAQ,CAACQ,MAAT,CAAgBN,IAAhB,EAAsB;AACpBO,QAAAA,QAAQ,EAAE,GADU;AAEpBC,QAAAA,OAAO,EAAE,CAFW;AAGpBC,QAAAA,aAAa,EAAE,KAHK;AAIpBC,QAAAA,eAAe,EAAE;AAJG,OAAtB,EAKGC,KALH;;AAQA,UAAI,MAAKP,QAAT,EAAmB;AACjBP,QAAAA,KAAK,CAACe,QAAN,CAAe,CAAf;AAEAd,QAAAA,QAAQ,CAACe,IAAT,CAAc,MAAKT,QAAnB,EAA6BO,KAA7B;AACD;AACF,K;;UAEDG,a,GAAgB,YAAM;AACpB,UAAI,MAAKV,QAAT,EAAmB;AACjB,cAAKA,QAAL,CAAcW,IAAd;AACD;AACF,K;;;;;;;wCA/DmB;AAAA,UACVb,SADU,GACI,KAAKD,KADT,CACVC,SADU;AAAA,UAEVL,KAFU,GAEA,KAAKD,KAFL,CAEVC,KAFU;AAKlB,WAAKO,QAAL,GAAgBN,QAAQ,CAACQ,MAAT,CAAgBT,KAAhB,EAAuB;AACrCU,QAAAA,QAAQ,EAAEb,QAD2B;AAErCsB,QAAAA,MAAM,EAAEC,MAAM,CAACC,MAFsB;AAIrCR,QAAAA,eAAe,EAAES,QAAQ,CAACC,EAAT,KAAgB,KAJI;AAKrCZ,QAAAA,OAAO,EAAE,CAL4B;AAMrCC,QAAAA,aAAa,EAAE;AANsB,OAAvB,CAAhB;;AASA,UAAIP,SAAJ,EAAe;AACb,aAAKG,cAAL;AACD;AACF;;;uCAEkBgB,S,EAAkB;AAAA,wBACK,KAAKpB,KADV;AAAA,UAC3BC,SAD2B,eAC3BA,SAD2B;AAAA,UAChBC,gBADgB,eAChBA,gBADgB;AAAA,UAE3BH,IAF2B,GAElB,KAAKJ,KAFa,CAE3BI,IAF2B;;AAInC,UAAIE,SAAS,KAAKmB,SAAS,CAACnB,SAA5B,EAAuC;AACrC,YAAIA,SAAJ,EAAe;AACb,eAAKG,cAAL;AACD,SAFD,MAEO,IAAIF,gBAAJ,EAAsB;AAE3BL,UAAAA,QAAQ,CAACQ,MAAT,CAAgBN,IAAhB,EAAsB;AACpBO,YAAAA,QAAQ,EAAE,GADU;AAEpBC,YAAAA,OAAO,EAAE,CAFW;AAGpBE,YAAAA,eAAe,EAAE,IAHG;AAIpBD,YAAAA,aAAa,EAAE;AAJK,WAAtB,EAKGE,KALH,CAKS,KAAKG,aAAL,CAAmBQ,IAAnB,CAAwB,IAAxB,CALT;AAMD,SARM,MAQA;AACL,eAAKR,aAAL;AACD;AACF;AACF;;;6BA2BQ;AAAA,yBACiB,KAAKlB,KADtB;AAAA,UACCI,IADD,gBACCA,IADD;AAAA,UACOH,KADP,gBACOA,KADP;;AAAA,yBAUH,KAAKI,KAVF;AAAA,UAGLC,SAHK,gBAGLA,SAHK;AAAA,UAIEqB,cAJF,gBAILC,KAJK;AAAA,UAKLrB,gBALK,gBAKLA,gBALK;AAAA,UAMCsB,aAND,gBAMLC,IANK;AAAA,UAOLC,KAPK,gBAOLA,KAPK;AAAA,UAQLC,KARK,gBAQLA,KARK;AAAA,UASFC,IATE;;AAWP,UAAML,KAAK,GAAGD,cAAc,IAAIK,KAAK,CAACE,MAAN,CAAaC,OAA7C;AACA,UAAML,IAAI,GACR,OAAOD,aAAP,KAAyB,QAAzB,GACIA,aAAa,KAAK,OAAlB,GACE,EADF,GAEE,EAHN,GAIIA,aALN;AAOA,UAAMO,MAAM,GAAI,KAAKtC,QAAN,GAAkB,IAAjC;AACA,UAAMsB,MAAM,GAAGC,MAAM,CAACgB,MAAP,CAAc,GAAd,EAAmB,GAAnB,EAAwB,GAAxB,EAA6B,GAA7B,CAAf;AACA,UAAMC,cAAc,GAAG;AACrBC,QAAAA,KAAK,EAAET,IADc;AAErBU,QAAAA,MAAM,EAAEV,IAAI,GAAG,CAFM;AAGrBW,QAAAA,QAAQ,EAAE;AAHW,OAAvB;AAMA,aACE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE,CAACC,MAAM,CAACC,SAAR,EAAmBZ,KAAnB;AAAb,SAA4CE,IAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UACE,oBAAC,QAAD,CAAU,IAAV;AAAe,QAAA,KAAK,EAAE,CAAC;AAAEM,UAAAA,KAAK,EAAET,IAAT;AAAeU,UAAAA,MAAM,EAAEV,IAAvB;AAA6Bc,UAAAA,OAAO,EAAExC;AAAtC,SAAD,CAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG,CAAC,CAAD,EAAI,CAAJ,EAAOyC,GAAP,CAAW,UAAAC,KAAK,EAAI;AAEnB,YAAMC,UAAU,GAAGC,KAAK,CAACC,IAAN,CACjB,IAAID,KAAJ,CAAUZ,MAAV,CADiB,EAEjB,UAACc,KAAD,EAAQC,UAAR;AAAA,iBAAuBA,UAAU,IAAIf,MAAM,GAAG,CAAb,CAAjC;AAAA,SAFiB,CAAnB;AAIA,YAAMgB,WAAW,GAAGJ,KAAK,CAACC,IAAN,CAClB,IAAID,KAAJ,CAAUZ,MAAV,CADkB,EAElB,UAACc,KAAD,EAAQC,UAAR,EAAuB;AACrB,cAAIE,QAAQ,GAAI,IAAIF,UAAL,IAAoBf,MAAM,GAAG,CAA7B,CAAf;AACA,cAAM5B,QAAQ,GAAGsC,KAAK,GAAG,EAAE,MAAM,EAAR,CAAH,GAAiB,EAAE,MAAM,EAAR,CAAvC;;AAEA,cAAIO,QAAQ,GAAG,GAAf,EAAoB;AAClBA,YAAAA,QAAQ,GAAG,MAAMA,QAAjB;AACD;;AAED,cAAMC,SAAS,GAAGR,KAAK,GAAG,CAAC,CAAJ,GAAQ,CAAC,CAAhC;AAEA,iBAAUQ,SAAS,IAAI,MAAM,EAAV,CAAT,GAAyBlC,MAAM,CAACiC,QAAD,CAA/B,GACR7C,QADF;AAED,SAdiB,CAApB;AAiBA,YAAM+C,UAAU,GAAG;AACjBhB,UAAAA,KAAK,EAAET,IADU;AAEjBU,UAAAA,MAAM,EAAEV,IAFS;AAGjB0B,UAAAA,SAAS,EAAE,CACT;AACEC,YAAAA,MAAM,EAAExD,KAAK,CAACyD,WAAN,CAAkB;AACxBX,cAAAA,UAAU,EAAE,CAAC,CAAD,EAAI,CAAJ,CADY;AAExBK,cAAAA,WAAW,EAAE,CACR,IAAI,EAAJ,GAAS,EADD,UAER,IAAI,GAAJ,GAAU,EAAV,GAAe,EAFP;AAFW,aAAlB;AADV,WADS;AAHM,SAAnB;AAgBA,YAAMO,aAAa,GAAG;AACpBpB,UAAAA,KAAK,EAAET,IADa;AAEpBU,UAAAA,MAAM,EAAEV,IAFY;AAGpB0B,UAAAA,SAAS,EAAE,CACT;AACEI,YAAAA,UAAU,EAAEd,KAAK,GAAG,CAAChB,IAAD,GAAQ,CAAX,GAAe;AADlC,WADS,EAIT;AACE2B,YAAAA,MAAM,EAAExD,KAAK,CAACyD,WAAN,CAAkB;AAAEX,cAAAA,UAAU,EAAVA,UAAF;AAAcK,cAAAA,WAAW,EAAXA;AAAd,aAAlB;AADV,WAJS;AAHS,SAAtB;AAaA,YAAMS,WAAW,GAAGf,KAAK,GAAG;AAAEgB,UAAAA,GAAG,EAAEhC,IAAI,GAAG;AAAd,SAAH,GAAuB,IAAhD;AAEA,YAAMiC,SAAS,GAAG;AAChBxB,UAAAA,KAAK,EAAET,IADS;AAEhBU,UAAAA,MAAM,EAAEV,IAFQ;AAGhBkC,UAAAA,WAAW,EAAEpC,KAHG;AAIhBqC,UAAAA,WAAW,EAAEnC,IAAI,GAAG,EAJJ;AAKhBoC,UAAAA,YAAY,EAAEpC,IAAI,GAAG;AALL,SAAlB;AAQA,eACE,oBAAC,QAAD,CAAU,IAAV;AAAe,UAAA,GAAG,EAAEgB,KAApB;AAA2B,UAAA,KAAK,EAAE,CAACJ,MAAM,CAACyB,KAAR,CAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE,oBAAC,QAAD,CAAU,IAAV;AAAe,UAAA,KAAK,EAAEZ,UAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE,oBAAC,QAAD,CAAU,IAAV;AACE,UAAA,KAAK,EAAE,CAACjB,cAAD,EAAiBuB,WAAjB,CADT;AAEE,UAAA,WAAW,EAAE,KAFf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAIE,oBAAC,QAAD,CAAU,IAAV;AAAe,UAAA,KAAK,EAAEF,aAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE,oBAAC,QAAD,CAAU,IAAV;AAAe,UAAA,KAAK,EAAErB,cAAtB;AAAsC,UAAA,WAAW,EAAE,KAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE,oBAAC,QAAD,CAAU,IAAV;AAAe,UAAA,KAAK,EAAEyB,SAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF,CADF,CAJF,CADF,CADF,CADF;AAgBD,OA9EA,CADH,CADF,CADF;AAqFD;;;;EAjM6BnE,KAAK,CAACwE,S;;AAAhCrE,iB,CACGsE,Y,GAAe;AACpB/D,EAAAA,SAAS,EAAE,IADS;AAEpBwB,EAAAA,IAAI,EAAE,OAFc;AAGpBvB,EAAAA,gBAAgB,EAAE;AAHE,C;AAmMxB,IAAMmC,MAAM,GAAG4B,UAAU,CAACC,MAAX,CAAkB;AAC/B5B,EAAAA,SAAS,EAAE;AACT6B,IAAAA,cAAc,EAAE,QADP;AAETC,IAAAA,UAAU,EAAE;AAFH,GADoB;AAM/BN,EAAAA,KAAK,kCACAG,UAAU,CAACI,kBADX;AAGHF,IAAAA,cAAc,EAAE,QAHb;AAIHC,IAAAA,UAAU,EAAE;AAJT;AAN0B,CAAlB,CAAf;AAcA,eAAe5E,SAAS,CAACE,iBAAD,CAAxB","sourcesContent":["/* @flow */\n\nimport * as React from 'react';\nimport { Animated, Easing, Platform, StyleSheet, View } from 'react-native';\nimport { withTheme } from '../core/theming';\nimport type { Theme } from '../../types';\n\ntype Props = {|\n  /**\n   * Whether to show the indicator or hide it.\n   */\n  animating: boolean,\n  /**\n   * The color of the spinner.\n   */\n  color?: string,\n  /**\n   * Size of the indicator.\n   */\n  size: 'small' | 'large' | number,\n  /**\n   * Whether the indicator should hide when not animating.\n   */\n  hidesWhenStopped: boolean,\n  style?: any,\n  /**\n   * @optional\n   */\n  theme: Theme,\n|};\n\ntype State = {\n  timer: Animated.Value,\n  fade: Animated.Value,\n};\n\nconst DURATION = 2400;\n\n/**\n * Activity indicator is used to present progress of some activity in the app.\n * It can be used as a drop-in for the ActivityIndicator shipped with React Native.\n *\n * <div class=\"screenshots\">\n *   <img src=\"screenshots/activity-indicator.gif\" style=\"width: 100px;\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { ActivityIndicator, Colors } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <ActivityIndicator animating={true} color={Colors.red800} />\n * );\n *\n * export default MyComponent;\n * ```\n */\nclass ActivityIndicator extends React.Component<Props, State> {\n  static defaultProps = {\n    animating: true,\n    size: 'small',\n    hidesWhenStopped: true,\n  };\n\n  state = {\n    timer: new Animated.Value(0),\n    fade: new Animated.Value(\n      !this.props.animating && this.props.hidesWhenStopped ? 0 : 1\n    ),\n  };\n\n  rotation = null;\n\n  componentDidMount() {\n    const { animating } = this.props;\n    const { timer } = this.state;\n\n    // Circular animation in loop\n    this.rotation = Animated.timing(timer, {\n      duration: DURATION,\n      easing: Easing.linear,\n      // Animated.loop does not work if useNativeDriver is true on web\n      useNativeDriver: Platform.OS !== 'web',\n      toValue: 1,\n      isInteraction: false,\n    });\n\n    if (animating) {\n      this._startRotation();\n    }\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    const { animating, hidesWhenStopped } = this.props;\n    const { fade } = this.state;\n\n    if (animating !== prevProps.animating) {\n      if (animating) {\n        this._startRotation();\n      } else if (hidesWhenStopped) {\n        // Hide indicator first and then stop rotation\n        Animated.timing(fade, {\n          duration: 200,\n          toValue: 0,\n          useNativeDriver: true,\n          isInteraction: false,\n        }).start(this._stopRotation.bind(this));\n      } else {\n        this._stopRotation();\n      }\n    }\n  }\n\n  _startRotation = () => {\n    const { fade, timer } = this.state;\n\n    // Show indicator\n    Animated.timing(fade, {\n      duration: 200,\n      toValue: 1,\n      isInteraction: false,\n      useNativeDriver: true,\n    }).start();\n\n    // Circular animation in loop\n    if (this.rotation) {\n      timer.setValue(0);\n      // $FlowFixMe\n      Animated.loop(this.rotation).start();\n    }\n  };\n\n  _stopRotation = () => {\n    if (this.rotation) {\n      this.rotation.stop();\n    }\n  };\n\n  render() {\n    const { fade, timer } = this.state;\n    const {\n      animating,\n      color: indicatorColor,\n      hidesWhenStopped,\n      size: indicatorSize,\n      style,\n      theme,\n      ...rest\n    } = this.props;\n    const color = indicatorColor || theme.colors.primary;\n    const size =\n      typeof indicatorSize === 'string'\n        ? indicatorSize === 'small'\n          ? 24\n          : 48\n        : indicatorSize;\n\n    const frames = (60 * DURATION) / 1000;\n    const easing = Easing.bezier(0.4, 0.0, 0.7, 1.0);\n    const containerStyle = {\n      width: size,\n      height: size / 2,\n      overflow: 'hidden',\n    };\n\n    return (\n      <View style={[styles.container, style]} {...rest}>\n        <Animated.View style={[{ width: size, height: size, opacity: fade }]}>\n          {[0, 1].map(index => {\n            // Thanks to https://github.com/n4kz/react-native-indicators for the great work\n            const inputRange = Array.from(\n              new Array(frames),\n              (frame, frameIndex) => frameIndex / (frames - 1)\n            );\n            const outputRange = Array.from(\n              new Array(frames),\n              (frame, frameIndex) => {\n                let progress = (2 * frameIndex) / (frames - 1);\n                const rotation = index ? +(360 - 15) : -(180 - 15);\n\n                if (progress > 1.0) {\n                  progress = 2.0 - progress;\n                }\n\n                const direction = index ? -1 : +1;\n\n                return `${direction * (180 - 30) * easing(progress) +\n                  rotation}deg`;\n              }\n            );\n\n            const layerStyle = {\n              width: size,\n              height: size,\n              transform: [\n                {\n                  rotate: timer.interpolate({\n                    inputRange: [0, 1],\n                    outputRange: [\n                      `${0 + 30 + 15}deg`,\n                      `${2 * 360 + 30 + 15}deg`,\n                    ],\n                  }),\n                },\n              ],\n            };\n\n            const viewportStyle = {\n              width: size,\n              height: size,\n              transform: [\n                {\n                  translateY: index ? -size / 2 : 0,\n                },\n                {\n                  rotate: timer.interpolate({ inputRange, outputRange }),\n                },\n              ],\n            };\n\n            const offsetStyle = index ? { top: size / 2 } : null;\n\n            const lineStyle = {\n              width: size,\n              height: size,\n              borderColor: color,\n              borderWidth: size / 10,\n              borderRadius: size / 2,\n            };\n\n            return (\n              <Animated.View key={index} style={[styles.layer]}>\n                <Animated.View style={layerStyle}>\n                  <Animated.View\n                    style={[containerStyle, offsetStyle]}\n                    collapsable={false}\n                  >\n                    <Animated.View style={viewportStyle}>\n                      <Animated.View style={containerStyle} collapsable={false}>\n                        <Animated.View style={lineStyle} />\n                      </Animated.View>\n                    </Animated.View>\n                  </Animated.View>\n                </Animated.View>\n              </Animated.View>\n            );\n          })}\n        </Animated.View>\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n\n  layer: {\n    ...StyleSheet.absoluteFillObject,\n\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n});\n\nexport default withTheme(ActivityIndicator);\n"]},"metadata":{},"sourceType":"module"}