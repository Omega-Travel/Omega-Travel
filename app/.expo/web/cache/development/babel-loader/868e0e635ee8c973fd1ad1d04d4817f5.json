{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\Fido\\\\Documents\\\\GitHub\\\\UI-Design-React\\\\app\\\\node_modules\\\\react-native-paper\\\\src\\\\components\\\\Appbar\\\\AppbarAction.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport * as React from 'react';\nimport color from 'color';\nimport { black } from \"../../styles/colors\";\nimport IconButton from \"../IconButton\";\n\nvar AppbarAction = function (_React$Component) {\n  _inherits(AppbarAction, _React$Component);\n\n  var _super = _createSuper(AppbarAction);\n\n  function AppbarAction() {\n    _classCallCheck(this, AppbarAction);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(AppbarAction, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          _this$props$color = _this$props.color,\n          iconColor = _this$props$color === void 0 ? color(black).alpha(0.54).rgb().string() : _this$props$color,\n          icon = _this$props.icon,\n          disabled = _this$props.disabled,\n          onPress = _this$props.onPress,\n          accessibilityLabel = _this$props.accessibilityLabel,\n          rest = _objectWithoutProperties(_this$props, [\"color\", \"icon\", \"disabled\", \"onPress\", \"accessibilityLabel\"]);\n\n      return React.createElement(IconButton, _extends({\n        onPress: onPress,\n        color: iconColor,\n        icon: icon,\n        disabled: disabled,\n        accessibilityLabel: accessibilityLabel,\n        animated: true\n      }, rest, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 7\n        }\n      }));\n    }\n  }]);\n\n  return AppbarAction;\n}(React.Component);\n\nAppbarAction.displayName = 'Appbar.Action';\nAppbarAction.defaultProps = {\n  size: 24\n};\nexport { AppbarAction as default };","map":{"version":3,"sources":["C:/Users/Fido/Documents/GitHub/UI-Design-React/app/node_modules/react-native-paper/src/components/Appbar/AppbarAction.js"],"names":["React","color","black","IconButton","AppbarAction","props","iconColor","alpha","rgb","string","icon","disabled","onPress","accessibilityLabel","rest","Component","displayName","defaultProps","size"],"mappings":";;;;;;;;;;;;;AAEA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT;AACA,OAAOC,UAAP;;IAkCqBC,Y;;;;;;;;;;;;;6BAOV;AAAA,wBAWH,KAAKC,KAXF;AAAA,0CAELJ,KAFK;AAAA,UAEEK,SAFF,kCAEcL,KAAK,CAACC,KAAD,CAAL,CAChBK,KADgB,CACV,IADU,EAEhBC,GAFgB,GAGhBC,MAHgB,EAFd;AAAA,UAMLC,IANK,eAMLA,IANK;AAAA,UAOLC,QAPK,eAOLA,QAPK;AAAA,UAQLC,OARK,eAQLA,OARK;AAAA,UASLC,kBATK,eASLA,kBATK;AAAA,UAUFC,IAVE;;AAaP,aACE,oBAAC,UAAD;AACE,QAAA,OAAO,EAAEF,OADX;AAEE,QAAA,KAAK,EAAEN,SAFT;AAGE,QAAA,IAAI,EAAEI,IAHR;AAIE,QAAA,QAAQ,EAAEC,QAJZ;AAKE,QAAA,kBAAkB,EAAEE,kBALtB;AAME,QAAA,QAAQ;AANV,SAOMC,IAPN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SADF;AAWD;;;;EA/BuCd,KAAK,CAACe,S;;AAA3BX,Y,CACZY,W,GAAc,e;AADFZ,Y,CAGZa,Y,GAAe;AACpBC,EAAAA,IAAI,EAAE;AADc,C;SAHHd,Y","sourcesContent":["/* @flow */\n\nimport * as React from 'react';\nimport color from 'color';\nimport { black } from '../../styles/colors';\nimport IconButton from '../IconButton';\nimport type { IconSource } from '../Icon';\n\ntype Props = React.ElementConfig<typeof IconButton> & {|\n  /**\n   *  Custom color for action icon.\n   */\n  color?: string,\n  /**\n   * Name of the icon to show.\n   */\n  icon: IconSource,\n  /**\n   * Optional icon size.\n   */\n  size?: number,\n  /**\n   * Whether the button is disabled. A disabled button is greyed out and `onPress` is not called on touch.\n   */\n  disabled?: boolean,\n  /**\n   * Accessibility label for the button. This is read by the screen reader when the user taps the button.\n   */\n  accessibilityLabel?: string,\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => mixed,\n  style?: any,\n|};\n\n/**\n * A component used to display an action item in the appbar.\n */\nexport default class AppbarAction extends React.Component<Props> {\n  static displayName = 'Appbar.Action';\n\n  static defaultProps = {\n    size: 24,\n  };\n\n  render() {\n    const {\n      color: iconColor = color(black)\n        .alpha(0.54)\n        .rgb()\n        .string(),\n      icon,\n      disabled,\n      onPress,\n      accessibilityLabel,\n      ...rest\n    } = this.props;\n\n    return (\n      <IconButton\n        onPress={onPress}\n        color={iconColor}\n        icon={icon}\n        disabled={disabled}\n        accessibilityLabel={accessibilityLabel}\n        animated\n        {...rest}\n      />\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}