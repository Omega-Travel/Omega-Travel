{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\Fido\\\\Documents\\\\GitHub\\\\UI-Design-React\\\\app\\\\node_modules\\\\react-native-paper\\\\src\\\\components\\\\CheckboxAndroid.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport color from 'color';\nimport Icon from \"./Icon\";\nimport TouchableRipple from \"./TouchableRipple\";\nimport { withTheme } from \"../core/theming\";\n\nvar CheckboxAndroid = function (_React$Component) {\n  _inherits(CheckboxAndroid, _React$Component);\n\n  var _super = _createSuper(CheckboxAndroid);\n\n  function CheckboxAndroid() {\n    var _this;\n\n    _classCallCheck(this, CheckboxAndroid);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      scaleAnim: new Animated.Value(1)\n    };\n    return _this;\n  }\n\n  _createClass(CheckboxAndroid, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (prevProps.status === this.props.status) {\n        return;\n      }\n\n      var checked = this.props.status === 'checked';\n      Animated.sequence([Animated.timing(this.state.scaleAnim, {\n        toValue: 0.85,\n        duration: checked ? 200 : 0\n      }), Animated.timing(this.state.scaleAnim, {\n        toValue: 1,\n        duration: checked ? 200 : 350\n      })]).start();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          status = _this$props.status,\n          disabled = _this$props.disabled,\n          onPress = _this$props.onPress,\n          theme = _this$props.theme,\n          rest = _objectWithoutProperties(_this$props, [\"status\", \"disabled\", \"onPress\", \"theme\"]);\n\n      var checked = status === 'checked';\n      var indeterminate = status === 'indeterminate';\n      var checkedColor = this.props.color || theme.colors.accent;\n      var uncheckedColor = this.props.uncheckedColor || color(theme.colors.text).alpha(theme.dark ? 0.7 : 0.54).rgb().string();\n      var rippleColor, checkboxColor;\n\n      if (disabled) {\n        rippleColor = color(theme.colors.text).alpha(0.16).rgb().string();\n        checkboxColor = theme.colors.disabled;\n      } else {\n        rippleColor = color(checkedColor).fade(0.32).rgb().string();\n        checkboxColor = checked ? checkedColor : uncheckedColor;\n      }\n\n      var borderWidth = this.state.scaleAnim.interpolate({\n        inputRange: [0.8, 1],\n        outputRange: [7, 0]\n      });\n      var icon = indeterminate ? 'indeterminate-check-box' : checked ? 'check-box' : 'check-box-outline-blank';\n      return React.createElement(TouchableRipple, _extends({}, rest, {\n        borderless: true,\n        rippleColor: rippleColor,\n        onPress: onPress,\n        disabled: disabled,\n        accessibilityTraits: disabled ? ['button', 'disabled'] : 'button',\n        accessibilityComponentType: \"button\",\n        accessibilityRole: \"button\",\n        accessibilityStates: disabled ? ['disabled'] : undefined,\n        accessibilityLiveRegion: \"polite\",\n        style: styles.container,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 7\n        }\n      }), React.createElement(Animated.View, {\n        style: {\n          transform: [{\n            scale: this.state.scaleAnim\n          }]\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 9\n        }\n      }, React.createElement(Icon, {\n        allowFontScaling: false,\n        source: icon,\n        size: 24,\n        color: checkboxColor,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 11\n        }\n      }), React.createElement(View, {\n        style: [StyleSheet.absoluteFill, styles.fillContainer],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 11\n        }\n      }, React.createElement(Animated.View, {\n        style: [styles.fill, {\n          borderColor: checkboxColor\n        }, {\n          borderWidth: borderWidth\n        }],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 13\n        }\n      }))));\n    }\n  }]);\n\n  return CheckboxAndroid;\n}(React.Component);\n\nCheckboxAndroid.displayName = 'Checkbox.Android';\nvar styles = StyleSheet.create({\n  container: {\n    borderRadius: 18,\n    width: 36,\n    height: 36,\n    padding: 6\n  },\n  fillContainer: {\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  fill: {\n    height: 14,\n    width: 14\n  }\n});\nexport default withTheme(CheckboxAndroid);","map":{"version":3,"sources":["C:/Users/Fido/Documents/GitHub/UI-Design-React/app/node_modules/react-native-paper/src/components/CheckboxAndroid.js"],"names":["React","color","Icon","TouchableRipple","withTheme","CheckboxAndroid","state","scaleAnim","Animated","Value","prevProps","status","props","checked","sequence","timing","toValue","duration","start","disabled","onPress","theme","rest","indeterminate","checkedColor","colors","accent","uncheckedColor","text","alpha","dark","rgb","string","rippleColor","checkboxColor","fade","borderWidth","interpolate","inputRange","outputRange","icon","undefined","styles","container","transform","scale","StyleSheet","absoluteFill","fillContainer","fill","borderColor","Component","displayName","create","borderRadius","width","height","padding","alignItems","justifyContent"],"mappings":"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","sourcesContent":["/* @flow */\n\nimport * as React from 'react';\nimport { Animated, View, StyleSheet } from 'react-native';\nimport color from 'color';\nimport Icon from './Icon';\nimport TouchableRipple from './TouchableRipple';\nimport { withTheme } from '../core/theming';\nimport type { Theme, $RemoveChildren } from '../types';\n\ntype Props = $RemoveChildren<typeof TouchableRipple> & {|\n  /**\n   * Status of checkbox.\n   */\n  status: 'checked' | 'unchecked' | 'indeterminate',\n  /**\n   * Whether checkbox is disabled.\n   */\n  disabled?: boolean,\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => mixed,\n  /**\n   * Custom color for unchecked checkbox.\n   */\n  uncheckedColor?: string,\n  /**\n   * Custom color for checkbox.\n   */\n  color?: string,\n  /**\n   * @optional\n   */\n  theme: Theme,\n|};\n\ntype State = {\n  scaleAnim: Animated.Value,\n};\n\n/**\n * Checkboxes allow the selection of multiple options from a set.\n * This component follows platform guidelines for Android.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/checkbox-enabled.android.png\" />\n *     <figcaption>Enabled</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/checkbox-disabled.android.png\" />\n *     <figcaption>Disabled</figcaption>\n *   </figure>\n * </div>\n */\nclass CheckboxAndroid extends React.Component<Props, State> {\n  static displayName = 'Checkbox.Android';\n\n  state = {\n    scaleAnim: new Animated.Value(1),\n  };\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.status === this.props.status) {\n      return;\n    }\n\n    const checked = this.props.status === 'checked';\n    Animated.sequence([\n      Animated.timing(this.state.scaleAnim, {\n        toValue: 0.85,\n        duration: checked ? 200 : 0,\n      }),\n      Animated.timing(this.state.scaleAnim, {\n        toValue: 1,\n        duration: checked ? 200 : 350,\n      }),\n    ]).start();\n  }\n\n  render() {\n    const { status, disabled, onPress, theme, ...rest } = this.props;\n    const checked = status === 'checked';\n    const indeterminate = status === 'indeterminate';\n    const checkedColor = this.props.color || theme.colors.accent;\n    const uncheckedColor =\n      this.props.uncheckedColor ||\n      color(theme.colors.text)\n        .alpha(theme.dark ? 0.7 : 0.54)\n        .rgb()\n        .string();\n\n    let rippleColor, checkboxColor;\n\n    if (disabled) {\n      rippleColor = color(theme.colors.text)\n        .alpha(0.16)\n        .rgb()\n        .string();\n      checkboxColor = theme.colors.disabled;\n    } else {\n      rippleColor = color(checkedColor)\n        .fade(0.32)\n        .rgb()\n        .string();\n      checkboxColor = checked ? checkedColor : uncheckedColor;\n    }\n\n    const borderWidth = this.state.scaleAnim.interpolate({\n      inputRange: [0.8, 1],\n      outputRange: [7, 0],\n    });\n\n    const icon = indeterminate\n      ? 'indeterminate-check-box'\n      : checked\n        ? 'check-box'\n        : 'check-box-outline-blank';\n\n    return (\n      <TouchableRipple\n        {...rest}\n        borderless\n        rippleColor={rippleColor}\n        onPress={onPress}\n        disabled={disabled}\n        accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\n        accessibilityComponentType=\"button\"\n        accessibilityRole=\"button\"\n        accessibilityStates={disabled ? ['disabled'] : undefined}\n        accessibilityLiveRegion=\"polite\"\n        style={styles.container}\n      >\n        <Animated.View style={{ transform: [{ scale: this.state.scaleAnim }] }}>\n          <Icon\n            allowFontScaling={false}\n            source={icon}\n            size={24}\n            color={checkboxColor}\n          />\n          <View style={[StyleSheet.absoluteFill, styles.fillContainer]}>\n            <Animated.View\n              style={[\n                styles.fill,\n                { borderColor: checkboxColor },\n                { borderWidth },\n              ]}\n            />\n          </View>\n        </Animated.View>\n      </TouchableRipple>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    borderRadius: 18,\n    width: 36,\n    height: 36,\n    padding: 6,\n  },\n  fillContainer: {\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  fill: {\n    height: 14,\n    width: 14,\n  },\n});\n\nexport default withTheme(CheckboxAndroid);\n"]},"metadata":{},"sourceType":"module"}