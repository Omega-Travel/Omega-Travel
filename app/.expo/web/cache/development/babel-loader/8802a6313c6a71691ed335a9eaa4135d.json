{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\Fido\\\\Documents\\\\GitHub\\\\UI-Design-React\\\\app\\\\node_modules\\\\react-native-paper\\\\src\\\\components\\\\List\\\\ListItem.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport color from 'color';\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableRipple from \"../TouchableRipple\";\nimport Text from \"../Typography/Text\";\nimport { withTheme } from \"../../core/theming\";\n\nvar ListItem = function (_React$Component) {\n  _inherits(ListItem, _React$Component);\n\n  var _super = _createSuper(ListItem);\n\n  function ListItem() {\n    _classCallCheck(this, ListItem);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(ListItem, [{\n    key: \"renderDescription\",\n    value: function renderDescription(description, descriptionColor) {\n      var _this$props = this.props,\n          descriptionEllipsizeMode = _this$props.descriptionEllipsizeMode,\n          descriptionStyle = _this$props.descriptionStyle;\n      return typeof description === 'string' ? React.createElement(Text, {\n        numberOfLines: 2,\n        ellipsizeMode: descriptionEllipsizeMode,\n        style: [styles.description, {\n          color: descriptionColor\n        }, descriptionStyle],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 7\n        }\n      }, description) : description && description({\n        ellipsizeMode: descriptionEllipsizeMode,\n        color: descriptionColor,\n        fontSize: styles.description.fontSize\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          left = _this$props2.left,\n          right = _this$props2.right,\n          title = _this$props2.title,\n          description = _this$props2.description,\n          onPress = _this$props2.onPress,\n          theme = _this$props2.theme,\n          style = _this$props2.style,\n          titleStyle = _this$props2.titleStyle,\n          titleEllipsizeMode = _this$props2.titleEllipsizeMode,\n          rest = _objectWithoutProperties(_this$props2, [\"left\", \"right\", \"title\", \"description\", \"onPress\", \"theme\", \"style\", \"titleStyle\", \"titleEllipsizeMode\"]);\n\n      var titleColor = color(theme.colors.text).alpha(0.87).rgb().string();\n      var descriptionColor = color(theme.colors.text).alpha(0.54).rgb().string();\n      return React.createElement(TouchableRipple, _extends({}, rest, {\n        style: [styles.container, style],\n        onPress: onPress,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 7\n        }\n      }), React.createElement(View, {\n        style: styles.row,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 9\n        }\n      }, left ? left({\n        color: descriptionColor\n      }) : null, React.createElement(View, {\n        style: [styles.item, styles.content],\n        pointerEvents: \"none\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 11\n        }\n      }, React.createElement(Text, {\n        ellipsizeMode: titleEllipsizeMode,\n        numberOfLines: 1,\n        style: [styles.title, {\n          color: titleColor\n        }, titleStyle],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 13\n        }\n      }, title), this.renderDescription(description, descriptionColor)), right ? right({\n        color: descriptionColor\n      }) : null));\n    }\n  }]);\n\n  return ListItem;\n}(React.Component);\n\nListItem.displayName = 'List.Item';\nvar styles = StyleSheet.create({\n  container: {\n    padding: 8\n  },\n  row: {\n    flexDirection: 'row'\n  },\n  title: {\n    fontSize: 16\n  },\n  description: {\n    fontSize: 14\n  },\n  item: {\n    margin: 8\n  },\n  content: {\n    flex: 1,\n    justifyContent: 'center'\n  }\n});\nexport default withTheme(ListItem);","map":{"version":3,"sources":["C:/Users/Fido/Documents/GitHub/UI-Design-React/app/node_modules/react-native-paper/src/components/List/ListItem.js"],"names":["color","React","TouchableRipple","Text","withTheme","ListItem","description","descriptionColor","props","descriptionEllipsizeMode","descriptionStyle","styles","ellipsizeMode","fontSize","left","right","title","onPress","theme","style","titleStyle","titleEllipsizeMode","rest","titleColor","colors","text","alpha","rgb","string","container","row","item","content","renderDescription","Component","displayName","StyleSheet","create","padding","flexDirection","margin","flex","justifyContent"],"mappings":"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","sourcesContent":["/* @flow */\n\nimport color from 'color';\nimport * as React from 'react';\nimport { View, StyleSheet } from 'react-native';\nimport type {\n  ViewStyleProp,\n  TextStyleProp,\n} from 'react-native/Libraries/StyleSheet/StyleSheet';\nimport TouchableRipple from '../TouchableRipple';\nimport Text from '../Typography/Text';\nimport { withTheme } from '../../core/theming';\nimport type { Theme, $RemoveChildren, EllipsizeProp } from '../../types';\n\ntype Props = $RemoveChildren<typeof TouchableRipple> & {|\n  /**\n   * Title text for the list item.\n   */\n  title: React.Node,\n  /**\n   * Description text for the list item or callback which returns a React element to display the description.\n   */\n  description?:\n    | React.Node\n    | ((props: {\n        ellipsizeMode: EllipsizeProp,\n        color: string,\n        fontSize: number,\n      }) => React.Node),\n  /**\n   * Callback which returns a React element to display on the left side.\n   */\n  left?: (props: { color: string }) => React.Node,\n  /**\n   * Callback which returns a React element to display on the right side.\n   */\n  right?: (props: { color: string }) => React.Node,\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => mixed,\n  /**\n   * @optional\n   */\n  theme: Theme,\n  /**\n   * Style that is passed to the wrapping TouchableRipple element.\n   */\n  style?: ViewStyleProp,\n  /**\n   * Style that is passed to Title element.\n   */\n  titleStyle?: TextStyleProp,\n  /**\n   * Style that is passed to Description element.\n   */\n  descriptionStyle?: TextStyleProp,\n  /**\n   * Ellipsize Mode for the Title\n   */\n  titleEllipsizeMode?: EllipsizeProp,\n  /**\n   * Ellipsize Mode for the Description\n   */\n  descriptionEllipsizeMode?: EllipsizeProp,\n|};\n\n/**\n * A component to show tiles inside a List.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/list-item-1.png\" />\n *   <img class=\"medium\" src=\"screenshots/list-item-2.png\" />\n *   <img class=\"medium\" src=\"screenshots/list-item-3.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { List } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <List.Item\n *     title=\"First Item\"\n *     description=\"Item description\"\n *     left={props => <List.Icon {...props} icon=\"folder\" />}\n *   />\n * );\n *\n * export default MyComponent;\n * ```\n */\nclass ListItem extends React.Component<Props> {\n  static displayName = 'List.Item';\n\n  renderDescription(description, descriptionColor) {\n    const { descriptionEllipsizeMode, descriptionStyle } = this.props;\n\n    return typeof description === 'string' ? (\n      <Text\n        numberOfLines={2}\n        ellipsizeMode={descriptionEllipsizeMode}\n        style={[\n          styles.description,\n          { color: descriptionColor },\n          descriptionStyle,\n        ]}\n      >\n        {description}\n      </Text>\n    ) : (\n      description &&\n        description({\n          ellipsizeMode: descriptionEllipsizeMode,\n          color: descriptionColor,\n          fontSize: styles.description.fontSize,\n        })\n    );\n  }\n\n  render() {\n    const {\n      left,\n      right,\n      title,\n      description,\n      onPress,\n      theme,\n      style,\n      titleStyle,\n      titleEllipsizeMode,\n      ...rest\n    } = this.props;\n    const titleColor = color(theme.colors.text)\n      .alpha(0.87)\n      .rgb()\n      .string();\n    const descriptionColor = color(theme.colors.text)\n      .alpha(0.54)\n      .rgb()\n      .string();\n\n    return (\n      <TouchableRipple\n        {...rest}\n        style={[styles.container, style]}\n        onPress={onPress}\n      >\n        <View style={styles.row}>\n          {left ? left({ color: descriptionColor }) : null}\n          <View style={[styles.item, styles.content]} pointerEvents=\"none\">\n            <Text\n              ellipsizeMode={titleEllipsizeMode}\n              numberOfLines={1}\n              style={[styles.title, { color: titleColor }, titleStyle]}\n            >\n              {title}\n            </Text>\n            {this.renderDescription(description, descriptionColor)}\n          </View>\n          {right ? right({ color: descriptionColor }) : null}\n        </View>\n      </TouchableRipple>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    padding: 8,\n  },\n  row: {\n    flexDirection: 'row',\n  },\n  title: {\n    fontSize: 16,\n  },\n  description: {\n    fontSize: 14,\n  },\n  item: {\n    margin: 8,\n  },\n  content: {\n    flex: 1,\n    justifyContent: 'center',\n  },\n});\n\nexport default withTheme(ListItem);\n"]},"metadata":{},"sourceType":"module"}