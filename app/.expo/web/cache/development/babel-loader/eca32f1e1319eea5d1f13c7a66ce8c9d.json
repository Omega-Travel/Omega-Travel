{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\Fido\\\\Documents\\\\GitHub\\\\UI-Design-React\\\\app\\\\node_modules\\\\react-native-paper\\\\src\\\\components\\\\Typography\\\\Text.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport * as React from 'react';\nimport NativeText from \"react-native-web/dist/exports/Text\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport { withTheme } from \"../../core/theming\";\n\nvar Text = function (_React$Component) {\n  _inherits(Text, _React$Component);\n\n  var _super = _createSuper(Text);\n\n  function Text() {\n    _classCallCheck(this, Text);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(Text, [{\n    key: \"setNativeProps\",\n    value: function setNativeProps() {\n      var _this$_root;\n\n      return this._root && (_this$_root = this._root).setNativeProps.apply(_this$_root, arguments);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this = this;\n\n      var _this$props = this.props,\n          style = _this$props.style,\n          theme = _this$props.theme,\n          rest = _objectWithoutProperties(_this$props, [\"style\", \"theme\"]);\n\n      var writingDirection = I18nManager.isRTL ? 'rtl' : 'ltr';\n      return React.createElement(NativeText, _extends({}, rest, {\n        ref: function ref(c) {\n          _this._root = c;\n        },\n        style: [{\n          fontFamily: theme.fonts.regular,\n          color: theme.colors.text,\n          textAlign: 'left',\n          writingDirection: writingDirection\n        }, style],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 7\n        }\n      }));\n    }\n  }]);\n\n  return Text;\n}(React.Component);\n\nexport default withTheme(Text);","map":{"version":3,"sources":["C:/Users/Fido/Documents/GitHub/UI-Design-React/app/node_modules/react-native-paper/src/components/Typography/Text.js"],"names":["React","withTheme","Text","_root","setNativeProps","props","style","theme","rest","writingDirection","I18nManager","isRTL","c","fontFamily","fonts","regular","color","colors","text","textAlign","Component"],"mappings":";;;;;;;;;;;;;AAEA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;;;AAEA,SAASC,SAAT;;IAgBMC,I;;;;;;;;;;;;;qCAMoB;AAAA;;AACtB,aAAO,KAAKC,KAAL,IAAc,oBAAKA,KAAL,EAAWC,cAAX,8BAArB;AACD;;;6BAEQ;AAAA;;AAAA,wBAC2B,KAAKC,KADhC;AAAA,UACCC,KADD,eACCA,KADD;AAAA,UACQC,KADR,eACQA,KADR;AAAA,UACkBC,IADlB;;AAEP,UAAMC,gBAAgB,GAAGC,WAAW,CAACC,KAAZ,GAAoB,KAApB,GAA4B,KAArD;AAEA,aACE,oBAAC,UAAD,eACMH,IADN;AAEE,QAAA,GAAG,EAAE,aAAAI,CAAC,EAAI;AACR,UAAA,KAAI,CAACT,KAAL,GAAaS,CAAb;AACD,SAJH;AAKE,QAAA,KAAK,EAAE,CACL;AACEC,UAAAA,UAAU,EAAEN,KAAK,CAACO,KAAN,CAAYC,OAD1B;AAEEC,UAAAA,KAAK,EAAET,KAAK,CAACU,MAAN,CAAaC,IAFtB;AAGEC,UAAAA,SAAS,EAAE,MAHb;AAIEV,UAAAA,gBAAgB,EAAhBA;AAJF,SADK,EAOLH,KAPK,CALT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SADF;AAiBD;;;;EA/BgBN,KAAK,CAACoB,S;;AAkCzB,eAAenB,SAAS,CAACC,IAAD,CAAxB","sourcesContent":["/* @flow */\n\nimport * as React from 'react';\nimport { Text as NativeText, I18nManager } from 'react-native';\nimport { withTheme } from '../../core/theming';\nimport type { Theme } from '../../types';\n\ntype Props = React.ElementConfig<typeof NativeText> & {\n  style?: any,\n  /**\n   * @optional\n   */\n  theme: Theme,\n};\n\n/**\n * Text component which follows styles from the theme.\n *\n * @extends Text props https://facebook.github.io/react-native/docs/text.html#props\n */\nclass Text extends React.Component<Props> {\n  _root: ?NativeText;\n\n  /**\n   * @internal\n   */\n  setNativeProps(...args) {\n    return this._root && this._root.setNativeProps(...args);\n  }\n\n  render() {\n    const { style, theme, ...rest } = this.props;\n    const writingDirection = I18nManager.isRTL ? 'rtl' : 'ltr';\n\n    return (\n      <NativeText\n        {...rest}\n        ref={c => {\n          this._root = c;\n        }}\n        style={[\n          {\n            fontFamily: theme.fonts.regular,\n            color: theme.colors.text,\n            textAlign: 'left',\n            writingDirection,\n          },\n          style,\n        ]}\n      />\n    );\n  }\n}\n\nexport default withTheme(Text);\n"]},"metadata":{},"sourceType":"module"}