{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\Fido\\\\Documents\\\\GitHub\\\\UI-Design-React\\\\app\\\\node_modules\\\\react-native-paper\\\\src\\\\components\\\\TouchableRipple\\\\index.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport * as React from 'react';\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport color from 'color';\nimport { withTheme } from \"../../core/theming\";\n\nvar TouchableRipple = function (_React$Component) {\n  _inherits(TouchableRipple, _React$Component);\n\n  var _super = _createSuper(TouchableRipple);\n\n  function TouchableRipple() {\n    var _this;\n\n    _classCallCheck(this, TouchableRipple);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _this._handlePressIn = function (e) {\n      var _this$props = _this.props,\n          centered = _this$props.centered,\n          rippleColor = _this$props.rippleColor,\n          onPressIn = _this$props.onPressIn,\n          theme = _this$props.theme;\n      onPressIn && onPressIn(e);\n      var dark = theme.dark,\n          colors = theme.colors;\n      var calculatedRippleColor = rippleColor || color(colors.text).alpha(dark ? 0.32 : 0.2).rgb().string();\n      var button = e.currentTarget;\n      var style = window.getComputedStyle(button);\n      var dimensions = button.getBoundingClientRect();\n      var touchX;\n      var touchY;\n\n      if (centered) {\n        touchX = dimensions.width / 2;\n        touchY = dimensions.height / 2;\n      } else {\n        var startX = e.nativeEvent.touches ? e.nativeEvent.touches[0].pageX : e.pageX;\n        var startY = e.nativeEvent.touches ? e.nativeEvent.touches[0].pageY : e.pageY;\n        touchX = startX - dimensions.left;\n        touchY = startY - dimensions.top;\n      }\n\n      var size = centered ? Math.min(dimensions.width, dimensions.height) * 1.25 : Math.max(dimensions.width, dimensions.height) * 2;\n      var container = document.createElement('span');\n      container.setAttribute('data-paper-ripple', '');\n\n      _extends(container.style, {\n        position: 'absolute',\n        pointerEvents: 'none',\n        top: '0',\n        left: '0',\n        right: '0',\n        bottom: '0',\n        borderTopLeftRadius: style.borderTopLeftRadius,\n        borderTopRightRadius: style.borderTopRightRadius,\n        borderBottomRightRadius: style.borderBottomRightRadius,\n        borderBottomLeftRadius: style.borderBottomLeftRadius,\n        overflow: centered ? 'visible' : 'hidden'\n      });\n\n      var ripple = document.createElement('span');\n\n      _extends(ripple.style, {\n        position: 'absolute',\n        pointerEvents: 'none',\n        backgroundColor: calculatedRippleColor,\n        borderRadius: '50%',\n        transitionProperty: 'transform opacity',\n        transitionDuration: Math.min(size * 1.5, 350) + \"ms\",\n        transitionTimingFunction: 'linear',\n        transformOrigin: 'center',\n        transform: 'translate3d(-50%, -50%, 0) scale3d(0.1, 0.1, 0.1)',\n        opacity: '0.5',\n        left: touchX + \"px\",\n        top: touchY + \"px\",\n        width: size + \"px\",\n        height: size + \"px\"\n      });\n\n      container.appendChild(ripple);\n      button.appendChild(container);\n      requestAnimationFrame(function () {\n        requestAnimationFrame(function () {\n          _extends(ripple.style, {\n            transform: 'translate3d(-50%, -50%, 0) scale3d(1, 1, 1)',\n            opacity: '1'\n          });\n        });\n      });\n    };\n\n    _this._handlePressOut = function (e) {\n      _this.props.onPressOut && _this.props.onPressOut(e);\n      var containers = e.currentTarget.querySelectorAll('[data-paper-ripple]');\n      requestAnimationFrame(function () {\n        requestAnimationFrame(function () {\n          containers.forEach(function (container) {\n            var ripple = container.firstChild;\n\n            _extends(ripple.style, {\n              transitionDuration: '250ms',\n              opacity: 0\n            });\n\n            setTimeout(function () {\n              var parentNode = container.parentNode;\n\n              if (parentNode) {\n                parentNode.removeChild(container);\n              }\n            }, 500);\n          });\n        });\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(TouchableRipple, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          style = _this$props2.style,\n          background = _this$props2.background,\n          borderless = _this$props2.borderless,\n          disabledProp = _this$props2.disabled,\n          rippleColor = _this$props2.rippleColor,\n          underlayColor = _this$props2.underlayColor,\n          children = _this$props2.children,\n          theme = _this$props2.theme,\n          rest = _objectWithoutProperties(_this$props2, [\"style\", \"background\", \"borderless\", \"disabled\", \"rippleColor\", \"underlayColor\", \"children\", \"theme\"]);\n\n      var disabled = disabledProp || !this.props.onPress;\n      return React.createElement(TouchableWithoutFeedback, _extends({}, rest, {\n        onPressIn: this._handlePressIn,\n        onPressOut: this._handlePressOut,\n        disabled: disabled,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 7\n        }\n      }), React.createElement(View, {\n        style: [styles.touchable, borderless && styles.borderless, style],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 9\n        }\n      }, React.Children.only(children)));\n    }\n  }]);\n\n  return TouchableRipple;\n}(React.Component);\n\nTouchableRipple.defaultProps = {\n  borderless: false\n};\nTouchableRipple.supported = true;\nvar styles = StyleSheet.create({\n  touchable: {\n    position: 'relative'\n  },\n  borderless: {\n    overflow: 'hidden'\n  }\n});\nexport default withTheme(TouchableRipple);","map":{"version":3,"sources":["C:/Users/Fido/Documents/GitHub/UI-Design-React/app/node_modules/react-native-paper/src/components/TouchableRipple/index.js"],"names":["React","color","withTheme","TouchableRipple","_handlePressIn","e","props","centered","rippleColor","onPressIn","theme","dark","colors","calculatedRippleColor","text","alpha","rgb","string","button","currentTarget","style","window","getComputedStyle","dimensions","getBoundingClientRect","touchX","touchY","width","height","startX","nativeEvent","touches","pageX","startY","pageY","left","top","size","Math","min","max","container","document","createElement","setAttribute","position","pointerEvents","right","bottom","borderTopLeftRadius","borderTopRightRadius","borderBottomRightRadius","borderBottomLeftRadius","overflow","ripple","backgroundColor","borderRadius","transitionProperty","transitionDuration","transitionTimingFunction","transformOrigin","transform","opacity","appendChild","requestAnimationFrame","_handlePressOut","onPressOut","containers","querySelectorAll","forEach","firstChild","setTimeout","parentNode","removeChild","background","borderless","disabledProp","disabled","underlayColor","children","rest","onPress","styles","touchable","Children","only","Component","defaultProps","supported","StyleSheet","create"],"mappings":"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","sourcesContent":["/* @flow */\n\nimport * as React from 'react';\nimport { TouchableWithoutFeedback, View, StyleSheet } from 'react-native';\nimport color from 'color';\nimport { withTheme } from '../../core/theming';\nimport type { Theme } from '../../types';\n\ntype Props = React.ElementConfig<typeof TouchableWithoutFeedback> & {|\n  /**\n   * Whether to render the ripple outside the view bounds.\n   */\n  borderless?: boolean,\n  /**\n   * Type of background drawabale to display the feedback (Android).\n   * https://facebook.github.io/react-native/docs/touchablenativefeedback.html#background\n   */\n  background?: Object,\n  /**\n   * Whether to start the ripple at the center (Web).\n   */\n  centered?: boolean,\n  /**\n   * Whether to prevent interaction with the touchable.\n   */\n  disabled?: boolean,\n  /**\n   * Function to execute on press. If not set, will cause the touchable to be disabled.\n   */\n  onPress?: ?() => mixed,\n  /**\n   * Function to execute on long press.\n   */\n  onLongPress?: () => mixed,\n  /**\n   * Color of the ripple effect (Android >= 5.0 and Web).\n   */\n  rippleColor?: string,\n  /**\n   * Color of the underlay for the highlight effect (Android < 5.0 and iOS).\n   */\n  underlayColor?: string,\n  /**\n   * Content of the `TouchableRipple`.\n   */\n  children: React.Node,\n  style?: any,\n  /**\n   * @optional\n   */\n  theme: Theme,\n|};\n\n/**\n * A wrapper for views that should respond to touches.\n * Provides a material \"ink ripple\" interaction effect for supported platforms (>= Android Lollipop).\n * On unsupported platforms, it falls back to a highlight effect.\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { Text, TouchableRipple } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <TouchableRipple\n *     onPress={() => console.log('Pressed')}\n *     rippleColor=\"rgba(0, 0, 0, .32)\"\n *   >\n *     <Text>Press me</Text>\n *   </TouchableRipple>\n * );\n *\n * export default MyComponent;\n * ```\n */\nclass TouchableRipple extends React.Component<Props, void> {\n  static defaultProps = {\n    borderless: false,\n  };\n\n  /**\n   * Whether ripple effect is supported.\n   */\n  static supported = true;\n\n  _handlePressIn = e => {\n    const { centered, rippleColor, onPressIn, theme } = this.props;\n\n    onPressIn && onPressIn(e);\n\n    const { dark, colors } = theme;\n    const calculatedRippleColor =\n      rippleColor ||\n      color(colors.text)\n        .alpha(dark ? 0.32 : 0.2)\n        .rgb()\n        .string();\n\n    const button = e.currentTarget;\n    const style = window.getComputedStyle(button);\n    const dimensions = button.getBoundingClientRect();\n\n    let touchX;\n    let touchY;\n\n    if (centered) {\n      touchX = dimensions.width / 2;\n      touchY = dimensions.height / 2;\n    } else {\n      const startX = e.nativeEvent.touches\n        ? e.nativeEvent.touches[0].pageX\n        : e.pageX;\n      const startY = e.nativeEvent.touches\n        ? e.nativeEvent.touches[0].pageY\n        : e.pageY;\n\n      touchX = startX - dimensions.left;\n      touchY = startY - dimensions.top;\n    }\n\n    // Get the size of the button to determine how big the ripple should be\n    const size = centered\n      ? // If ripple is always centered, we don't need to make it too big\n        Math.min(dimensions.width, dimensions.height) * 1.25\n      : // Otherwise make it twice as big so clicking on one end spreads ripple to other\n        Math.max(dimensions.width, dimensions.height) * 2;\n\n    // Create a container for our ripple effect so we don't need to change the parent's style\n    const container = document.createElement('span');\n\n    container.setAttribute('data-paper-ripple', '');\n\n    Object.assign(container.style, {\n      position: 'absolute',\n      pointerEvents: 'none',\n      top: '0',\n      left: '0',\n      right: '0',\n      bottom: '0',\n      borderTopLeftRadius: style.borderTopLeftRadius,\n      borderTopRightRadius: style.borderTopRightRadius,\n      borderBottomRightRadius: style.borderBottomRightRadius,\n      borderBottomLeftRadius: style.borderBottomLeftRadius,\n      overflow: centered ? 'visible' : 'hidden',\n    });\n\n    // Create span to show the ripple effect\n    const ripple = document.createElement('span');\n\n    Object.assign(ripple.style, {\n      position: 'absolute',\n      pointerEvents: 'none',\n      backgroundColor: calculatedRippleColor,\n      borderRadius: '50%',\n\n      /* Transition configuration */\n      transitionProperty: 'transform opacity',\n      transitionDuration: `${Math.min(size * 1.5, 350)}ms`,\n      transitionTimingFunction: 'linear',\n      transformOrigin: 'center',\n\n      /* We'll animate these properties */\n      transform: 'translate3d(-50%, -50%, 0) scale3d(0.1, 0.1, 0.1)',\n      opacity: '0.5',\n\n      // Position the ripple where cursor was\n      left: `${touchX}px`,\n      top: `${touchY}px`,\n      width: `${size}px`,\n      height: `${size}px`,\n    });\n\n    // Finally, append it to DOM\n    container.appendChild(ripple);\n    button.appendChild(container);\n\n    // rAF runs in the same frame as the event handler\n    // Use double rAF to ensure the transition class is added in next frame\n    // This will make sure that the transition animation is triggered\n    requestAnimationFrame(() => {\n      requestAnimationFrame(() => {\n        Object.assign(ripple.style, {\n          transform: 'translate3d(-50%, -50%, 0) scale3d(1, 1, 1)',\n          opacity: '1',\n        });\n      });\n    });\n  };\n\n  _handlePressOut = e => {\n    this.props.onPressOut && this.props.onPressOut(e);\n\n    const containers = e.currentTarget.querySelectorAll('[data-paper-ripple]');\n\n    requestAnimationFrame(() => {\n      requestAnimationFrame(() => {\n        containers.forEach(container => {\n          const ripple = container.firstChild;\n\n          Object.assign(ripple.style, {\n            transitionDuration: '250ms',\n            opacity: 0,\n          });\n\n          // Finally remove the span after the transition\n          setTimeout(() => {\n            const { parentNode } = container;\n\n            if (parentNode) {\n              parentNode.removeChild(container);\n            }\n          }, 500);\n        });\n      });\n    });\n  };\n\n  render() {\n    const {\n      style,\n      background,\n      borderless,\n      disabled: disabledProp,\n      rippleColor,\n      underlayColor,\n      children,\n      theme,\n      ...rest\n    } = this.props;\n\n    const disabled = disabledProp || !this.props.onPress;\n\n    return (\n      <TouchableWithoutFeedback\n        {...rest}\n        onPressIn={this._handlePressIn}\n        onPressOut={this._handlePressOut}\n        disabled={disabled}\n      >\n        <View\n          style={[styles.touchable, borderless && styles.borderless, style]}\n        >\n          {React.Children.only(children)}\n        </View>\n      </TouchableWithoutFeedback>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  touchable: {\n    position: 'relative',\n  },\n  borderless: {\n    overflow: 'hidden',\n  },\n});\n\nexport default withTheme(TouchableRipple);\n"]},"metadata":{},"sourceType":"module"}