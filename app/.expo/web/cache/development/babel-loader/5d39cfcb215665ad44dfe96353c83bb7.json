{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\Fido\\\\Documents\\\\GitHub\\\\UI-Design-React\\\\app\\\\node_modules\\\\react-native-paper\\\\src\\\\components\\\\Drawer\\\\DrawerItem.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport color from 'color';\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"../Typography/Text\";\nimport Icon from \"../Icon\";\nimport TouchableRipple from \"../TouchableRipple\";\nimport { withTheme } from \"../../core/theming\";\n\nvar DrawerItem = function (_React$Component) {\n  _inherits(DrawerItem, _React$Component);\n\n  var _super = _createSuper(DrawerItem);\n\n  function DrawerItem() {\n    _classCallCheck(this, DrawerItem);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(DrawerItem, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          icon = _this$props.icon,\n          label = _this$props.label,\n          active = _this$props.active,\n          theme = _this$props.theme,\n          style = _this$props.style,\n          onPress = _this$props.onPress,\n          rest = _objectWithoutProperties(_this$props, [\"icon\", \"label\", \"active\", \"theme\", \"style\", \"onPress\"]);\n\n      var colors = theme.colors,\n          roundness = theme.roundness;\n      var backgroundColor = active ? color(colors.primary).alpha(0.12).rgb().string() : 'transparent';\n      var contentColor = active ? colors.primary : color(colors.text).alpha(0.68).rgb().string();\n      var fontFamily = theme.fonts.medium;\n      var labelMargin = icon ? 32 : 0;\n      return React.createElement(View, _extends({}, rest, {\n        style: [styles.container, {\n          backgroundColor: backgroundColor,\n          borderRadius: roundness\n        }, style],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 7\n        }\n      }), React.createElement(TouchableRipple, {\n        borderless: true,\n        delayPressIn: 0,\n        onPress: onPress,\n        style: {\n          borderRadius: roundness\n        },\n        accessibilityTraits: active ? ['button', 'selected'] : 'button',\n        accessibilityComponentType: \"button\",\n        accessibilityRole: \"button\",\n        accessibilityStates: active ? ['selected'] : undefined,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 9\n        }\n      }, React.createElement(View, {\n        style: styles.wrapper,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 11\n        }\n      }, icon ? React.createElement(Icon, {\n        source: icon,\n        size: 24,\n        color: contentColor,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 15\n        }\n      }) : null, React.createElement(Text, {\n        numberOfLines: 1,\n        style: [styles.label, {\n          color: contentColor,\n          fontFamily: fontFamily,\n          marginLeft: labelMargin\n        }],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 13\n        }\n      }, label))));\n    }\n  }]);\n\n  return DrawerItem;\n}(React.Component);\n\nDrawerItem.displayName = 'Drawer.Item';\nvar styles = StyleSheet.create({\n  container: {\n    marginHorizontal: 10,\n    marginVertical: 4\n  },\n  wrapper: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    padding: 8\n  },\n  label: {\n    marginRight: 32\n  }\n});\nexport default withTheme(DrawerItem);","map":{"version":3,"sources":["C:/Users/Fido/Documents/GitHub/UI-Design-React/app/node_modules/react-native-paper/src/components/Drawer/DrawerItem.js"],"names":["color","React","Text","Icon","TouchableRipple","withTheme","DrawerItem","props","icon","label","active","theme","style","onPress","rest","colors","roundness","backgroundColor","primary","alpha","rgb","string","contentColor","text","fontFamily","fonts","medium","labelMargin","styles","container","borderRadius","undefined","wrapper","marginLeft","Component","displayName","StyleSheet","create","marginHorizontal","marginVertical","flexDirection","alignItems","padding","marginRight"],"mappings":"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","sourcesContent":["/* @flow */\n\nimport color from 'color';\nimport * as React from 'react';\nimport { View, StyleSheet } from 'react-native';\nimport Text from '../Typography/Text';\nimport Icon from '../Icon';\nimport TouchableRipple from '../TouchableRipple';\nimport { withTheme } from '../../core/theming';\nimport type { Theme } from '../../types';\nimport type { IconSource } from '../Icon';\n\ntype Props = {\n  /**\n   * The label text of the item.\n   */\n  label: string,\n  /**\n   * Icon to display for the `DrawerItem`.\n   */\n  icon?: IconSource,\n  /**\n   * Whether to highlight the drawer item as active.\n   */\n  active?: boolean,\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => mixed,\n  style?: any,\n  /**\n   * @optional\n   */\n  theme: Theme,\n};\n\n/**\n * A component used to show an action item with an icon and a label in a navigation drawer.\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Drawer } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Drawer.Item label=\"First Item\" />\n * );\n *\n * export default MyComponent;\n * ```\n */\nclass DrawerItem extends React.Component<Props> {\n  static displayName = 'Drawer.Item';\n\n  render() {\n    const { icon, label, active, theme, style, onPress, ...rest } = this.props;\n    const { colors, roundness } = theme;\n    const backgroundColor = active\n      ? color(colors.primary)\n          .alpha(0.12)\n          .rgb()\n          .string()\n      : 'transparent';\n    const contentColor = active\n      ? colors.primary\n      : color(colors.text)\n          .alpha(0.68)\n          .rgb()\n          .string();\n    const fontFamily = theme.fonts.medium;\n    const labelMargin = icon ? 32 : 0;\n\n    return (\n      <View\n        {...rest}\n        style={[\n          styles.container,\n          { backgroundColor, borderRadius: roundness },\n          style,\n        ]}\n      >\n        <TouchableRipple\n          borderless\n          delayPressIn={0}\n          onPress={onPress}\n          style={{ borderRadius: roundness }}\n          accessibilityTraits={active ? ['button', 'selected'] : 'button'}\n          accessibilityComponentType=\"button\"\n          accessibilityRole=\"button\"\n          accessibilityStates={active ? ['selected'] : undefined}\n        >\n          <View style={styles.wrapper}>\n            {icon ? (\n              <Icon source={icon} size={24} color={contentColor} />\n            ) : null}\n            <Text\n              numberOfLines={1}\n              style={[\n                styles.label,\n                {\n                  color: contentColor,\n                  fontFamily,\n                  marginLeft: labelMargin,\n                },\n              ]}\n            >\n              {label}\n            </Text>\n          </View>\n        </TouchableRipple>\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    marginHorizontal: 10,\n    marginVertical: 4,\n  },\n  wrapper: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    padding: 8,\n  },\n  label: {\n    marginRight: 32,\n  },\n});\n\nexport default withTheme(DrawerItem);\n"]},"metadata":{},"sourceType":"module"}