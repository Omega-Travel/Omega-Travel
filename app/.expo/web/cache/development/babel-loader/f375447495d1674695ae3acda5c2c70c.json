{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\Fido\\\\Documents\\\\GitHub\\\\UI-Design-React\\\\app\\\\node_modules\\\\react-native-paper\\\\src\\\\components\\\\RadioButtonAndroid.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport color from 'color';\nimport TouchableRipple from \"./TouchableRipple\";\nimport { withTheme } from \"../core/theming\";\nvar BORDER_WIDTH = 2;\n\nvar RadioButtonAndroid = function (_React$Component) {\n  _inherits(RadioButtonAndroid, _React$Component);\n\n  var _super = _createSuper(RadioButtonAndroid);\n\n  function RadioButtonAndroid() {\n    var _this;\n\n    _classCallCheck(this, RadioButtonAndroid);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      borderAnim: new Animated.Value(BORDER_WIDTH),\n      radioAnim: new Animated.Value(1)\n    };\n    return _this;\n  }\n\n  _createClass(RadioButtonAndroid, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (prevProps.status === this.props.status) {\n        return;\n      }\n\n      if (this.props.status === 'checked') {\n        this.state.radioAnim.setValue(1.2);\n        Animated.timing(this.state.radioAnim, {\n          toValue: 1,\n          duration: 150\n        }).start();\n      } else {\n        this.state.borderAnim.setValue(10);\n        Animated.timing(this.state.borderAnim, {\n          toValue: BORDER_WIDTH,\n          duration: 150\n        }).start();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          disabled = _this$props.disabled,\n          onPress = _this$props.onPress,\n          theme = _this$props.theme,\n          rest = _objectWithoutProperties(_this$props, [\"disabled\", \"onPress\", \"theme\"]);\n\n      var checkedColor = this.props.color || theme.colors.accent;\n      var uncheckedColor = this.props.uncheckedColor || color(theme.colors.text).alpha(theme.dark ? 0.7 : 0.54).rgb().string();\n      var rippleColor, radioColor;\n      var checked = this.props.status === 'checked';\n\n      if (disabled) {\n        rippleColor = color(theme.colors.text).alpha(0.16).rgb().string();\n        radioColor = theme.colors.disabled;\n      } else {\n        rippleColor = color(checkedColor).fade(0.32).rgb().string();\n        radioColor = checked ? checkedColor : uncheckedColor;\n      }\n\n      return React.createElement(TouchableRipple, _extends({}, rest, {\n        borderless: true,\n        rippleColor: rippleColor,\n        onPress: disabled ? undefined : function () {\n          onPress && onPress(_this2.props.value);\n        },\n        accessibilityTraits: disabled ? ['button', 'disabled'] : 'button',\n        accessibilityComponentType: checked ? 'radiobutton_checked' : 'radiobutton_unchecked',\n        accessibilityRole: \"button\",\n        accessibilityStates: disabled ? ['disabled'] : undefined,\n        accessibilityLiveRegion: \"polite\",\n        style: styles.container,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 7\n        }\n      }), React.createElement(Animated.View, {\n        style: [styles.radio, {\n          borderColor: radioColor,\n          borderWidth: this.state.borderAnim\n        }],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 9\n        }\n      }, checked ? React.createElement(View, {\n        style: [StyleSheet.absoluteFill, styles.radioContainer],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 13\n        }\n      }, React.createElement(Animated.View, {\n        style: [styles.dot, {\n          backgroundColor: radioColor,\n          transform: [{\n            scale: this.state.radioAnim\n          }]\n        }],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 15\n        }\n      })) : null));\n    }\n  }]);\n\n  return RadioButtonAndroid;\n}(React.Component);\n\nRadioButtonAndroid.displayName = 'RadioButton.Android';\nvar styles = StyleSheet.create({\n  container: {\n    borderRadius: 18\n  },\n  radioContainer: {\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  radio: {\n    height: 20,\n    width: 20,\n    borderRadius: 10,\n    margin: 8\n  },\n  dot: {\n    height: 10,\n    width: 10,\n    borderRadius: 5\n  }\n});\nexport default withTheme(RadioButtonAndroid);","map":{"version":3,"sources":["C:/Users/Fido/Documents/GitHub/UI-Design-React/app/node_modules/react-native-paper/src/components/RadioButtonAndroid.js"],"names":["React","color","TouchableRipple","withTheme","BORDER_WIDTH","RadioButtonAndroid","state","borderAnim","Animated","Value","radioAnim","prevProps","status","props","setValue","timing","toValue","duration","start","disabled","onPress","theme","rest","checkedColor","colors","accent","uncheckedColor","text","alpha","dark","rgb","string","rippleColor","radioColor","checked","fade","undefined","value","styles","container","radio","borderColor","borderWidth","StyleSheet","absoluteFill","radioContainer","dot","backgroundColor","transform","scale","Component","displayName","create","borderRadius","alignItems","justifyContent","height","width","margin"],"mappings":"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","sourcesContent":["/* @flow */\n\nimport * as React from 'react';\nimport { Animated, View, StyleSheet } from 'react-native';\nimport color from 'color';\nimport TouchableRipple from './TouchableRipple';\nimport { withTheme } from '../core/theming';\nimport type { Theme, $RemoveChildren } from '../types';\n\ntype Props = $RemoveChildren<typeof TouchableRipple> & {|\n  /**\n   * Value of the radio button\n   */\n  value: string,\n  /**\n   * Status of radio button.\n   */\n  status?: 'checked' | 'unchecked',\n  /**\n   * Whether radio is disabled.\n   */\n  disabled?: boolean,\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => mixed,\n  /**\n   * Custom color for unchecked radio.\n   */\n  uncheckedColor?: string,\n  /**\n   * Custom color for radio.\n   */\n  color?: string,\n  /**\n   * @optional\n   */\n  theme: Theme,\n|};\n\ntype State = {\n  borderAnim: Animated.Value,\n  radioAnim: Animated.Value,\n};\n\nconst BORDER_WIDTH = 2;\n\n/**\n * Radio buttons allow the selection a single option from a set.\n * This component follows platform guidelines for Android.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/radio-enabled.android.png\" />\n *     <figcaption>Enabled</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/radio-disabled.android.png\" />\n *     <figcaption>Disabled</figcaption>\n *   </figure>\n * </div>\n */\nclass RadioButtonAndroid extends React.Component<Props, State> {\n  static displayName = 'RadioButton.Android';\n\n  state = {\n    borderAnim: new Animated.Value(BORDER_WIDTH),\n    radioAnim: new Animated.Value(1),\n  };\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.status === this.props.status) {\n      return;\n    }\n\n    if (this.props.status === 'checked') {\n      this.state.radioAnim.setValue(1.2);\n\n      Animated.timing(this.state.radioAnim, {\n        toValue: 1,\n        duration: 150,\n      }).start();\n    } else {\n      this.state.borderAnim.setValue(10);\n\n      Animated.timing(this.state.borderAnim, {\n        toValue: BORDER_WIDTH,\n        duration: 150,\n      }).start();\n    }\n  }\n\n  render() {\n    const { disabled, onPress, theme, ...rest } = this.props;\n    const checkedColor = this.props.color || theme.colors.accent;\n    const uncheckedColor =\n      this.props.uncheckedColor ||\n      color(theme.colors.text)\n        .alpha(theme.dark ? 0.7 : 0.54)\n        .rgb()\n        .string();\n\n    let rippleColor, radioColor;\n\n    const checked = this.props.status === 'checked';\n\n    if (disabled) {\n      rippleColor = color(theme.colors.text)\n        .alpha(0.16)\n        .rgb()\n        .string();\n      radioColor = theme.colors.disabled;\n    } else {\n      rippleColor = color(checkedColor)\n        .fade(0.32)\n        .rgb()\n        .string();\n      radioColor = checked ? checkedColor : uncheckedColor;\n    }\n\n    return (\n      <TouchableRipple\n        {...rest}\n        borderless\n        rippleColor={rippleColor}\n        onPress={\n          disabled\n            ? undefined\n            : () => {\n                onPress && onPress(this.props.value);\n              }\n        }\n        accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\n        accessibilityComponentType={\n          checked ? 'radiobutton_checked' : 'radiobutton_unchecked'\n        }\n        accessibilityRole=\"button\"\n        accessibilityStates={disabled ? ['disabled'] : undefined}\n        accessibilityLiveRegion=\"polite\"\n        style={styles.container}\n      >\n        <Animated.View\n          style={[\n            styles.radio,\n            {\n              borderColor: radioColor,\n              borderWidth: this.state.borderAnim,\n            },\n          ]}\n        >\n          {checked ? (\n            <View style={[StyleSheet.absoluteFill, styles.radioContainer]}>\n              <Animated.View\n                style={[\n                  styles.dot,\n                  {\n                    backgroundColor: radioColor,\n                    transform: [{ scale: this.state.radioAnim }],\n                  },\n                ]}\n              />\n            </View>\n          ) : null}\n        </Animated.View>\n      </TouchableRipple>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    borderRadius: 18,\n  },\n  radioContainer: {\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  radio: {\n    height: 20,\n    width: 20,\n    borderRadius: 10,\n    margin: 8,\n  },\n  dot: {\n    height: 10,\n    width: 10,\n    borderRadius: 5,\n  },\n});\n\nexport default withTheme(RadioButtonAndroid);\n"]},"metadata":{},"sourceType":"module"}