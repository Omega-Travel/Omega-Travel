{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\Fido\\\\Documents\\\\GitHub\\\\UI-Design-React\\\\app\\\\App.tsx\";\nimport React from \"react\";\nimport AsyncStorage from \"react-native-web/dist/exports/AsyncStorage\";\nimport { Provider as PaperProvider } from \"react-native-paper\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport { ApolloProvider } from \"@apollo/react-hooks\";\nimport { MaterialIcons, Fontisto } from '@expo/vector-icons';\nimport client from \"./client\";\nimport { ContinentStack } from \"./screens/Continent/StackNavigator\";\nimport { RegionStack } from \"./screens/Region/StackNavigator\";\nimport { useAuth } from \"./hooks/useAuth\";\nvar Tab = createBottomTabNavigator();\nexport default function App() {\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      isReady = _React$useState2[0],\n      setReady = _React$useState2[1];\n\n  var _React$useState3 = React.useState(\"\"),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      token = _React$useState4[0],\n      _setToken = _React$useState4[1];\n\n  var _useAuth = useAuth(),\n      AuthContext = _useAuth.AuthContext;\n\n  React.useEffect(function () {\n    AsyncStorage.getItem(\"token\").then(function (token) {\n      if (token) _setToken(token);\n    }).finally(function () {\n      return setReady(true);\n    });\n  }, []);\n  React.useEffect(function () {\n    AsyncStorage.getItem(\"token\").then(function (storedToken) {\n      if (storedToken !== token) {\n        AsyncStorage.setItem(\"token\", token);\n      }\n    });\n  }, [token]);\n  if (!isReady) return null;\n  return React.createElement(AuthContext.Provider, {\n    value: {\n      token: token,\n      setToken: function setToken(x) {\n        _setToken(x);\n      }\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 5\n    }\n  }, React.createElement(ApolloProvider, {\n    client: client,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }\n  }, React.createElement(PaperProvider, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }\n  }, React.createElement(NavigationContainer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 11\n    }\n  }, React.createElement(Tab.Navigator, {\n    screenOptions: function screenOptions(_ref) {\n      var route = _ref.route;\n      return {\n        tabBarIcon: function tabBarIcon(_ref2) {\n          var color = _ref2.color,\n              size = _ref2.size;\n\n          if (route.name === 'Continent') {\n            return React.createElement(Fontisto, {\n              name: \"world-o\",\n              size: size,\n              color: color,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 55,\n                columnNumber: 28\n              }\n            });\n          } else {\n            return React.createElement(MaterialIcons, {\n              name: \"place\",\n              size: size,\n              color: color,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 57,\n                columnNumber: 28\n              }\n            });\n          }\n        }\n      };\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }\n  }, React.createElement(Tab.Screen, {\n    name: \"Continent\",\n    component: ContinentStack,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 15\n    }\n  }), React.createElement(Tab.Screen, {\n    name: \"Region\",\n    component: RegionStack,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 15\n    }\n  }))))));\n}","map":{"version":3,"sources":["C:/Users/Fido/Documents/GitHub/UI-Design-React/app/App.tsx"],"names":["React","Provider","PaperProvider","NavigationContainer","createBottomTabNavigator","ApolloProvider","MaterialIcons","Fontisto","client","ContinentStack","RegionStack","useAuth","Tab","App","useState","isReady","setReady","token","setToken","AuthContext","useEffect","AsyncStorage","getItem","then","finally","storedToken","setItem","x","route","tabBarIcon","color","size","name"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { AsyncStorage } from \"react-native\";\r\nimport { Provider as PaperProvider } from \"react-native-paper\";\r\nimport { NavigationContainer } from \"@react-navigation/native\";\r\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\r\nimport { ApolloProvider } from \"@apollo/react-hooks\";\r\nimport { MaterialIcons, Fontisto } from '@expo/vector-icons'; \r\nimport client from \"./client\";\r\nimport { ContinentStack } from \"./screens/Continent/StackNavigator\";\r\nimport { RegionStack } from \"./screens/Region/StackNavigator\";\r\nimport { useAuth } from \"./hooks/useAuth\";\r\n\r\nconst Tab = createBottomTabNavigator();\r\n\r\nexport default function App() {\r\n  const [isReady, setReady] = React.useState(false);\r\n  const [token, setToken] = React.useState<string>(\"\");\r\n  const {AuthContext} = useAuth();\r\n\r\n  React.useEffect(() => {\r\n    AsyncStorage.getItem(\"token\")\r\n      .then((token) => {\r\n        if (token) setToken(token);\r\n      })\r\n      .finally(() => setReady(true));\r\n  }, []);\r\n\r\n  React.useEffect(() => {\r\n    AsyncStorage.getItem(\"token\")\r\n      .then((storedToken) => {\r\n        if (storedToken !== token) {\r\n          AsyncStorage.setItem(\"token\", token);\r\n        }\r\n      });\r\n  }, [token]);\r\n\r\n  if (!isReady) return null;\r\n\r\n  return (\r\n    <AuthContext.Provider\r\n      value={{\r\n        token,\r\n        setToken: (x) => {\r\n          setToken(x);\r\n        },\r\n      }}\r\n    >\r\n      <ApolloProvider client={client}>\r\n        <PaperProvider>\r\n          <NavigationContainer>\r\n            <Tab.Navigator\r\n              screenOptions={({ route }) => ({\r\n                tabBarIcon: ({ color, size }) => {\r\n                  if (route.name === 'Continent') {\r\n                    return <Fontisto name=\"world-o\" size={size} color={color} />\r\n                  } else {\r\n                    return <MaterialIcons name=\"place\" size={size} color={color} />;\r\n                  }\r\n                },\r\n              })}\r\n            >\r\n              <Tab.Screen name=\"Continent\" component={ContinentStack} />\r\n              <Tab.Screen name=\"Region\" component={RegionStack} />\r\n            </Tab.Navigator>\r\n          </NavigationContainer>\r\n        </PaperProvider>\r\n      </ApolloProvider>\r\n    </AuthContext.Provider>\r\n  );\r\n}"]},"metadata":{},"sourceType":"module"}