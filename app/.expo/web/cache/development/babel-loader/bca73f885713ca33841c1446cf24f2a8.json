{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\Fido\\\\Documents\\\\GitHub\\\\UI-Design-React\\\\app\\\\node_modules\\\\react-native-paper\\\\src\\\\components\\\\Switch.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport * as React from 'react';\nimport { grey400, grey800, grey50, white, black } from \"../styles/colors\";\nimport NativeSwitch from \"react-native-web/dist/exports/Switch\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport setColor from 'color';\nimport { withTheme } from \"../core/theming\";\nvar version = NativeModules.PlatformConstants ? NativeModules.PlatformConstants.reactNativeVersion : undefined;\n\nvar Switch = function (_React$Component) {\n  _inherits(Switch, _React$Component);\n\n  var _super = _createSuper(Switch);\n\n  function Switch() {\n    _classCallCheck(this, Switch);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(Switch, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          value = _this$props.value,\n          disabled = _this$props.disabled,\n          onValueChange = _this$props.onValueChange,\n          color = _this$props.color,\n          theme = _this$props.theme,\n          rest = _objectWithoutProperties(_this$props, [\"value\", \"disabled\", \"onValueChange\", \"color\", \"theme\"]);\n\n      var checkedColor = color || theme.colors.accent;\n      var onTintColor = Platform.OS === 'ios' ? checkedColor : disabled ? theme.dark ? setColor(white).alpha(0.1).rgb().string() : setColor(black).alpha(0.12).rgb().string() : setColor(checkedColor).alpha(0.5).rgb().string();\n      var thumbTintColor = Platform.OS === 'ios' ? undefined : disabled ? theme.dark ? grey800 : grey400 : value ? checkedColor : theme.dark ? grey400 : grey50;\n      var props = version && version.major === 0 && version.minor <= 56 ? {\n        onTintColor: onTintColor,\n        thumbTintColor: thumbTintColor\n      } : {\n        thumbColor: thumbTintColor,\n        trackColor: {\n          true: onTintColor\n        }\n      };\n      return React.createElement(NativeSwitch, _extends({\n        value: value,\n        disabled: disabled,\n        onValueChange: disabled ? undefined : onValueChange\n      }, props, rest, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 7\n        }\n      }));\n    }\n  }]);\n\n  return Switch;\n}(React.Component);\n\nexport default withTheme(Switch);","map":{"version":3,"sources":["C:/Users/Fido/Documents/GitHub/UI-Design-React/app/node_modules/react-native-paper/src/components/Switch.js"],"names":["React","grey400","grey800","grey50","white","black","setColor","withTheme","version","NativeModules","PlatformConstants","reactNativeVersion","undefined","Switch","props","value","disabled","onValueChange","color","theme","rest","checkedColor","colors","accent","onTintColor","Platform","OS","dark","alpha","rgb","string","thumbTintColor","major","minor","thumbColor","trackColor","true","Component"],"mappings":";;;;;;;;;;;;;AAEA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,OAAT,EAAkBC,OAAlB,EAA2BC,MAA3B,EAAmCC,KAAnC,EAA0CC,KAA1C;;;;AAEA,OAAOC,QAAP,MAAqB,OAArB;AACA,SAASC,SAAT;AAGA,IAAMC,OAAO,GAAGC,aAAa,CAACC,iBAAd,GACZD,aAAa,CAACC,iBAAd,CAAgCC,kBADpB,GAEZC,SAFJ;;IA0EMC,M;;;;;;;;;;;;;6BACK;AAAA,wBAQH,KAAKC,KARF;AAAA,UAELC,KAFK,eAELA,KAFK;AAAA,UAGLC,QAHK,eAGLA,QAHK;AAAA,UAILC,aAJK,eAILA,aAJK;AAAA,UAKLC,KALK,eAKLA,KALK;AAAA,UAMLC,KANK,eAMLA,KANK;AAAA,UAOFC,IAPE;;AAUP,UAAMC,YAAY,GAAGH,KAAK,IAAIC,KAAK,CAACG,MAAN,CAAaC,MAA3C;AAEA,UAAMC,WAAW,GACfC,QAAQ,CAACC,EAAT,KAAgB,KAAhB,GACIL,YADJ,GAEIL,QAAQ,GACNG,KAAK,CAACQ,IAAN,GACErB,QAAQ,CAACF,KAAD,CAAR,CACGwB,KADH,CACS,GADT,EAEGC,GAFH,GAGGC,MAHH,EADF,GAKExB,QAAQ,CAACD,KAAD,CAAR,CACGuB,KADH,CACS,IADT,EAEGC,GAFH,GAGGC,MAHH,EANI,GAUNxB,QAAQ,CAACe,YAAD,CAAR,CACGO,KADH,CACS,GADT,EAEGC,GAFH,GAGGC,MAHH,EAbR;AAkBA,UAAMC,cAAc,GAClBN,QAAQ,CAACC,EAAT,KAAgB,KAAhB,GACId,SADJ,GAEII,QAAQ,GACNG,KAAK,CAACQ,IAAN,GACEzB,OADF,GAEED,OAHI,GAINc,KAAK,GACHM,YADG,GAEHF,KAAK,CAACQ,IAAN,GACE1B,OADF,GAEEE,MAXZ;AAaA,UAAMW,KAAK,GACTN,OAAO,IAAIA,OAAO,CAACwB,KAAR,KAAkB,CAA7B,IAAkCxB,OAAO,CAACyB,KAAR,IAAiB,EAAnD,GACK;AACCT,QAAAA,WAAW,EAAXA,WADD;AAECO,QAAAA,cAAc,EAAdA;AAFD,OADL,GAKI;AACEG,QAAAA,UAAU,EAAEH,cADd;AAEEI,QAAAA,UAAU,EAAE;AACVC,UAAAA,IAAI,EAAEZ;AADI;AAFd,OANN;AAaA,aACE,oBAAC,YAAD;AACE,QAAA,KAAK,EAAET,KADT;AAEE,QAAA,QAAQ,EAAEC,QAFZ;AAGE,QAAA,aAAa,EAAEA,QAAQ,GAAGJ,SAAH,GAAeK;AAHxC,SAIMH,KAJN,EAKMM,IALN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SADF;AASD;;;;EAlEkBpB,KAAK,CAACqC,S;;AAqE3B,eAAe9B,SAAS,CAACM,MAAD,CAAxB","sourcesContent":["/* @flow */\n\nimport * as React from 'react';\nimport { grey400, grey800, grey50, white, black } from '../styles/colors';\nimport { Switch as NativeSwitch, Platform, NativeModules } from 'react-native';\nimport setColor from 'color';\nimport { withTheme } from '../core/theming';\nimport type { Theme } from '../types';\n\nconst version = NativeModules.PlatformConstants\n  ? NativeModules.PlatformConstants.reactNativeVersion\n  : undefined;\n\ntype Props = React.ElementConfig<typeof NativeSwitch> & {|\n  /**\n   * Disable toggling the switch.\n   */\n  disabled?: boolean,\n  /**\n   * Value of the switch, true means 'on', false means 'off'.\n   */\n  value?: boolean,\n  /**\n   * Custom color for switch.\n   */\n  color?: string,\n  /**\n   * Callback called with the new value when it changes.\n   */\n  onValueChange?: Function,\n  style?: any,\n  /**\n   * @optional\n   */\n  theme: Theme,\n|};\n\n/**\n * Switch is a visual toggle between two mutually exclusive states â€” on and off.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/switch-enabled.android.png\" />\n *     <figcaption>Android (enabled)</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/switch-disabled.android.png\" />\n *     <figcaption>Android (disabled)</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/switch-enabled.ios.png\" />\n *     <figcaption>iOS (enabled)</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/switch-disabled.ios.png\" />\n *     <figcaption>iOS (disabled)</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Switch } from 'react-native-paper';\n *\n * export default class MyComponent extends React.Component {\n *   state = {\n *     isSwitchOn: false,\n *   };\n *\n *   render() {\n *     const { isSwitchOn } = this.state;\n *     return (\n *       <Switch\n *         value={isSwitchOn}\n *         onValueChange={() =>\n *           { this.setState({ isSwitchOn: !isSwitchOn }); }\n *         }\n *       />\n *     );\n *   }\n * }\n * ```\n */\nclass Switch extends React.Component<Props> {\n  render() {\n    const {\n      value,\n      disabled,\n      onValueChange,\n      color,\n      theme,\n      ...rest\n    } = this.props;\n\n    const checkedColor = color || theme.colors.accent;\n\n    const onTintColor =\n      Platform.OS === 'ios'\n        ? checkedColor\n        : disabled\n          ? theme.dark\n            ? setColor(white)\n                .alpha(0.1)\n                .rgb()\n                .string()\n            : setColor(black)\n                .alpha(0.12)\n                .rgb()\n                .string()\n          : setColor(checkedColor)\n              .alpha(0.5)\n              .rgb()\n              .string();\n\n    const thumbTintColor =\n      Platform.OS === 'ios'\n        ? undefined\n        : disabled\n          ? theme.dark\n            ? grey800\n            : grey400\n          : value\n            ? checkedColor\n            : theme.dark\n              ? grey400\n              : grey50;\n\n    const props =\n      version && version.major === 0 && version.minor <= 56\n        ? ({\n            onTintColor,\n            thumbTintColor,\n          }: any)\n        : {\n            thumbColor: thumbTintColor,\n            trackColor: {\n              true: onTintColor,\n            },\n          };\n\n    return (\n      <NativeSwitch\n        value={value}\n        disabled={disabled}\n        onValueChange={disabled ? undefined : onValueChange}\n        {...props}\n        {...rest}\n      />\n    );\n  }\n}\n\nexport default withTheme(Switch);\n"]},"metadata":{},"sourceType":"module"}