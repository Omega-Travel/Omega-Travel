{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _jsxFileName = \"C:\\\\Users\\\\Fido\\\\Documents\\\\GitHub\\\\UI-Design-React\\\\app\\\\node_modules\\\\react-native-paper\\\\src\\\\components\\\\BottomNavigation.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport { polyfill } from 'react-lifecycles-compat';\nimport SafeAreaView from 'react-native-safe-area-view';\nimport color from 'color';\nimport Icon from \"./Icon\";\nimport Surface from \"./Surface\";\nimport Badge from \"./Badge\";\nimport TouchableRipple from \"./TouchableRipple\";\nimport Text from \"./Typography/Text\";\nimport { black, white } from \"../styles/colors\";\nimport { withTheme } from \"../core/theming\";\nvar AnimatedText = Animated.createAnimatedComponent(Text);\nvar MIN_RIPPLE_SCALE = 0.001;\nvar MIN_TAB_WIDTH = 96;\nvar MAX_TAB_WIDTH = 168;\nvar BAR_HEIGHT = 56;\nvar FAR_FAR_AWAY = 9999;\nvar Touchable = TouchableRipple.supported ? TouchableRipple : function (_ref) {\n  var style = _ref.style,\n      children = _ref.children,\n      borderless = _ref.borderless,\n      centered = _ref.centered,\n      rippleColor = _ref.rippleColor,\n      rest = _objectWithoutProperties(_ref, [\"style\", \"children\", \"borderless\", \"centered\", \"rippleColor\"]);\n\n  return React.createElement(TouchableWithoutFeedback, _extends({}, rest, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 7\n    }\n  }), React.createElement(View, {\n    style: style,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 9\n    }\n  }, children));\n};\n\nvar SceneComponent = function (_React$PureComponent) {\n  _inherits(SceneComponent, _React$PureComponent);\n\n  var _super = _createSuper(SceneComponent);\n\n  function SceneComponent() {\n    _classCallCheck(this, SceneComponent);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(SceneComponent, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          component = _this$props.component,\n          rest = _objectWithoutProperties(_this$props, [\"component\"]);\n\n      return React.createElement(component, rest);\n    }\n  }]);\n\n  return SceneComponent;\n}(React.PureComponent);\n\nvar BottomNavigation = function (_React$Component) {\n  _inherits(BottomNavigation, _React$Component);\n\n  var _super2 = _createSuper(BottomNavigation);\n\n  _createClass(BottomNavigation, null, [{\n    key: \"SceneMap\",\n    value: function SceneMap(scenes) {\n      return function (_ref2) {\n        var route = _ref2.route,\n            jumpTo = _ref2.jumpTo;\n        return React.createElement(SceneComponent, {\n          key: route.key,\n          component: scenes[route.key],\n          route: route,\n          jumpTo: jumpTo,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 332,\n            columnNumber: 7\n          }\n        });\n      };\n    }\n  }, {\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(nextProps, prevState) {\n      var _nextProps$navigation = nextProps.navigationState,\n          index = _nextProps$navigation.index,\n          routes = _nextProps$navigation.routes;\n      var tabs = routes.map(function (_, i) {\n        return prevState.tabs[i] || new Animated.Value(i === index ? 1 : 0);\n      });\n      var offsets = routes.map(function (_, i) {\n        return prevState.offsets[i] || new Animated.Value(i === index ? 0 : 1);\n      });\n      var nextState = {\n        tabs: tabs,\n        offsets: offsets\n      };\n\n      if (index !== prevState.current) {\n        _extends(nextState, {\n          current: index,\n          previous: prevState.current,\n          loaded: prevState.loaded.includes(index) ? prevState.loaded : [].concat(_toConsumableArray(prevState.loaded), [index])\n        });\n      }\n\n      return nextState;\n    }\n  }]);\n\n  function BottomNavigation(props) {\n    var _this;\n\n    _classCallCheck(this, BottomNavigation);\n\n    _this = _super2.call(this, props);\n\n    _this._handleKeyboardShow = function () {\n      return _this.setState({\n        keyboard: true\n      }, function () {\n        return Animated.timing(_this.state.visible, {\n          toValue: 0,\n          duration: 150,\n          useNativeDriver: true\n        }).start();\n      });\n    };\n\n    _this._handleKeyboardHide = function () {\n      return Animated.timing(_this.state.visible, {\n        toValue: 1,\n        duration: 100,\n        useNativeDriver: true\n      }).start(function () {\n        _this.setState({\n          keyboard: false\n        });\n      });\n    };\n\n    _this._animateToCurrentIndex = function () {\n      var shifting = _this._isShifting();\n\n      var _this$props$navigatio = _this.props.navigationState,\n          routes = _this$props$navigatio.routes,\n          index = _this$props$navigatio.index;\n\n      _this.state.ripple.setValue(MIN_RIPPLE_SCALE);\n\n      Animated.parallel([Animated.timing(_this.state.ripple, {\n        toValue: 1,\n        duration: shifting ? 400 : 0,\n        useNativeDriver: true\n      })].concat(_toConsumableArray(routes.map(function (_, i) {\n        return Animated.timing(_this.state.tabs[i], {\n          toValue: i === index ? 1 : 0,\n          duration: shifting ? 150 : 75,\n          useNativeDriver: true\n        });\n      })))).start(function (_ref3) {\n        var finished = _ref3.finished;\n\n        _this.state.tabs.map(function (tab, i) {\n          return tab.setValue(i === index ? 1 : 0);\n        });\n\n        _this.state.index.setValue(index);\n\n        _this.state.ripple.setValue(MIN_RIPPLE_SCALE);\n\n        if (finished) {\n          _this.state.offsets.forEach(function (offset, i) {\n            if (i === index) {\n              offset.setValue(0);\n            } else {\n              offset.setValue(1);\n            }\n          });\n        }\n      });\n    };\n\n    _this._handleLayout = function (e) {\n      var layout = _this.state.layout;\n      var _e$nativeEvent$layout = e.nativeEvent.layout,\n          height = _e$nativeEvent$layout.height,\n          width = _e$nativeEvent$layout.width;\n\n      if (height === layout.height && width === layout.width) {\n        return;\n      }\n\n      _this.setState({\n        layout: {\n          height: height,\n          width: width,\n          measured: true\n        }\n      });\n    };\n\n    _this._handleTabPress = function (index) {\n      var _this$props2 = _this.props,\n          navigationState = _this$props2.navigationState,\n          onTabPress = _this$props2.onTabPress,\n          onIndexChange = _this$props2.onIndexChange;\n\n      if (onTabPress) {\n        onTabPress({\n          route: navigationState.routes[index]\n        });\n      }\n\n      if (index !== navigationState.index) {\n        onIndexChange(index);\n      }\n    };\n\n    _this._jumpTo = function (key) {\n      var index = _this.props.navigationState.routes.findIndex(function (route) {\n        return route.key === key;\n      });\n\n      _this.props.onIndexChange(index);\n    };\n\n    _this._isShifting = function () {\n      return typeof _this.props.shifting === 'boolean' ? _this.props.shifting : _this.props.navigationState.routes.length > 3;\n    };\n\n    var _index = _this.props.navigationState.index;\n    _this.state = {\n      visible: new Animated.Value(1),\n      tabs: [],\n      offsets: [],\n      index: new Animated.Value(_index),\n      ripple: new Animated.Value(MIN_RIPPLE_SCALE),\n      touch: new Animated.Value(MIN_RIPPLE_SCALE),\n      layout: {\n        height: 0,\n        width: 0,\n        measured: false\n      },\n      current: _index,\n      previous: 0,\n      loaded: [_index],\n      keyboard: false\n    };\n    return _this;\n  }\n\n  _createClass(BottomNavigation, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this._animateToCurrentIndex();\n\n      if (Platform.OS === 'ios') {\n        Keyboard.addListener('keyboardWillShow', this._handleKeyboardShow);\n        Keyboard.addListener('keyboardWillHide', this._handleKeyboardHide);\n      } else {\n        Keyboard.addListener('keyboardDidShow', this._handleKeyboardShow);\n        Keyboard.addListener('keyboardDidHide', this._handleKeyboardHide);\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var _this2 = this;\n\n      if (prevProps.navigationState.index === this.props.navigationState.index) {\n        return;\n      }\n\n      this.state.offsets.forEach(function (offset, i) {\n        if (i === _this2.props.navigationState.index || i === prevProps.navigationState.index) {\n          offset.setValue(0);\n        }\n      });\n\n      this._animateToCurrentIndex();\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (Platform.OS === 'ios') {\n        Keyboard.removeListener('keyboardWillShow', this._handleKeyboardShow);\n        Keyboard.removeListener('keyboardWillHide', this._handleKeyboardHide);\n      } else {\n        Keyboard.removeListener('keyboardDidShow', this._handleKeyboardShow);\n        Keyboard.removeListener('keyboardDidHide', this._handleKeyboardHide);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var _this$props3 = this.props,\n          navigationState = _this$props3.navigationState,\n          renderScene = _this$props3.renderScene,\n          renderIcon = _this$props3.renderIcon,\n          renderLabel = _this$props3.renderLabel,\n          _this$props3$getLabel = _this$props3.getLabelText,\n          getLabelText = _this$props3$getLabel === void 0 ? function (_ref4) {\n        var route = _ref4.route;\n        return route.title;\n      } : _this$props3$getLabel,\n          _this$props3$getBadge = _this$props3.getBadge,\n          getBadge = _this$props3$getBadge === void 0 ? function (_ref5) {\n        var route = _ref5.route;\n        return route.badge;\n      } : _this$props3$getBadge,\n          _this$props3$getColor = _this$props3.getColor,\n          getColor = _this$props3$getColor === void 0 ? function (_ref6) {\n        var route = _ref6.route;\n        return route.color;\n      } : _this$props3$getColor,\n          _this$props3$getAcces = _this$props3.getAccessibilityLabel,\n          getAccessibilityLabel = _this$props3$getAcces === void 0 ? function (_ref7) {\n        var route = _ref7.route;\n        return route.accessibilityLabel;\n      } : _this$props3$getAcces,\n          _this$props3$getTestI = _this$props3.getTestID,\n          getTestID = _this$props3$getTestI === void 0 ? function (_ref8) {\n        var route = _ref8.route;\n        return route.testID;\n      } : _this$props3$getTestI,\n          activeColor = _this$props3.activeColor,\n          inactiveColor = _this$props3.inactiveColor,\n          keyboardHidesNavigationBar = _this$props3.keyboardHidesNavigationBar,\n          barStyle = _this$props3.barStyle,\n          labeled = _this$props3.labeled,\n          style = _this$props3.style,\n          theme = _this$props3.theme;\n      var _this$state = this.state,\n          layout = _this$state.layout,\n          loaded = _this$state.loaded;\n      var routes = navigationState.routes;\n      var colors = theme.colors;\n\n      var shifting = this._isShifting();\n\n      var _ref9 = StyleSheet.flatten(barStyle) || {},\n          _ref9$backgroundColor = _ref9.backgroundColor,\n          approxBackgroundColor = _ref9$backgroundColor === void 0 ? colors.primary : _ref9$backgroundColor;\n\n      var backgroundColor = shifting ? this.state.index.interpolate({\n        inputRange: routes.map(function (_, i) {\n          return i;\n        }),\n        outputRange: routes.map(function (route) {\n          return getColor({\n            route: route\n          }) || approxBackgroundColor;\n        })\n      }) : approxBackgroundColor;\n      var isDark = !color(approxBackgroundColor).light();\n      var textColor = isDark ? white : black;\n      var activeTintColor = typeof activeColor !== 'undefined' ? activeColor : textColor;\n      var inactiveTintColor = typeof inactiveColor !== 'undefined' ? inactiveColor : color(textColor).alpha(0.5).rgb().string();\n      var touchColor = color(activeColor).alpha(0.12).rgb().string();\n      var maxTabWidth = routes.length > 3 ? MIN_TAB_WIDTH : MAX_TAB_WIDTH;\n      var tabWidth = Math.min(layout.width * 4 / routes.length, maxTabWidth);\n      return React.createElement(View, {\n        style: [styles.container, style],\n        pointerEvents: layout.measured ? 'auto' : 'none',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 611,\n          columnNumber: 7\n        }\n      }, React.createElement(View, {\n        style: [styles.content, {\n          backgroundColor: colors.background\n        }],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 615,\n          columnNumber: 9\n        }\n      }, routes.map(function (route, index) {\n        if (!loaded.includes(index)) {\n          return null;\n        }\n\n        var opacity = _this3.state.tabs[index];\n\n        var top = _this3.state.offsets[index].interpolate({\n          inputRange: [0, 1],\n          outputRange: [0, FAR_FAR_AWAY]\n        });\n\n        var focused = navigationState.index === index;\n        return React.createElement(Animated.View, {\n          key: route.key,\n          pointerEvents: focused ? 'auto' : 'none',\n          accessibilityElementsHidden: !focused,\n          importantForAccessibility: focused ? 'auto' : 'no-hide-descendants',\n          style: [StyleSheet.absoluteFill, {\n            opacity: opacity\n          }],\n          collapsable: false,\n          removeClippedSubviews: Platform.OS === 'ios' ? navigationState.index !== index : true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 631,\n            columnNumber: 15\n          }\n        }, React.createElement(Animated.View, {\n          style: [styles.content, {\n            top: top\n          }],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 646,\n            columnNumber: 17\n          }\n        }, renderScene({\n          route: route,\n          jumpTo: _this3._jumpTo\n        })));\n      })), React.createElement(Surface, {\n        style: [styles.bar, keyboardHidesNavigationBar ? {\n          transform: [{\n            translateY: this.state.visible.interpolate({\n              inputRange: [0, 1],\n              outputRange: [this.state.layout.height, 0]\n            })\n          }],\n          position: this.state.keyboard ? 'absolute' : null\n        } : null, barStyle],\n        pointerEvents: keyboardHidesNavigationBar && this.state.keyboard ? 'none' : 'auto',\n        onLayout: this._handleLayout,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 656,\n          columnNumber: 9\n        }\n      }, React.createElement(Animated.View, {\n        style: [styles.barContent, {\n          backgroundColor: backgroundColor\n        }],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 682,\n          columnNumber: 11\n        }\n      }, React.createElement(SafeAreaView, {\n        forceInset: {\n          top: 'never',\n          bottom: 'always'\n        },\n        style: [styles.items, {\n          maxWidth: maxTabWidth * routes.length\n        }],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 683,\n          columnNumber: 13\n        }\n      }, shifting ? React.createElement(Animated.View, {\n        pointerEvents: \"none\",\n        style: [styles.ripple, {\n          top: BAR_HEIGHT / 2 - layout.width / 8,\n          left: navigationState.index * tabWidth + tabWidth / 2 - layout.width / 8,\n          height: layout.width / 4,\n          width: layout.width / 4,\n          borderRadius: layout.width / 2,\n          backgroundColor: getColor({\n            route: routes[navigationState.index]\n          }),\n          transform: [{\n            scale: this.state.ripple.interpolate({\n              inputRange: [0, 1],\n              outputRange: [0, 8]\n            })\n          }],\n          opacity: this.state.ripple.interpolate({\n            inputRange: [0, MIN_RIPPLE_SCALE, 0.3, 1],\n            outputRange: [0, 0, 1, 1]\n          })\n        }],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 688,\n          columnNumber: 17\n        }\n      }) : null, routes.map(function (route, index) {\n        var focused = navigationState.index === index;\n        var active = _this3.state.tabs[index];\n        var scale = labeled && shifting ? active.interpolate({\n          inputRange: [0, 1],\n          outputRange: [0.5, 1]\n        }) : 1;\n        var translateY = labeled ? shifting ? active.interpolate({\n          inputRange: [0, 1],\n          outputRange: [7, 0]\n        }) : 0 : 7;\n        var activeOpacity = active;\n        var inactiveOpacity = active.interpolate({\n          inputRange: [0, 1],\n          outputRange: [1, 0]\n        });\n        var badge = getBadge({\n          route: route\n        });\n        return React.createElement(Touchable, {\n          key: route.key,\n          borderless: true,\n          centered: true,\n          rippleColor: touchColor,\n          onPress: function onPress() {\n            return _this3._handleTabPress(index);\n          },\n          testID: getTestID({\n            route: route\n          }),\n          accessibilityLabel: getAccessibilityLabel({\n            route: route\n          }),\n          accessibilityTraits: focused ? ['button', 'selected'] : 'button',\n          accessibilityComponentType: \"button\",\n          accessibilityRole: \"button\",\n          accessibilityStates: ['selected'],\n          style: styles.item,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 758,\n            columnNumber: 19\n          }\n        }, React.createElement(View, {\n          pointerEvents: \"none\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 774,\n            columnNumber: 21\n          }\n        }, React.createElement(Animated.View, {\n          style: [styles.iconContainer, {\n            transform: [{\n              translateY: translateY\n            }]\n          }],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 775,\n            columnNumber: 23\n          }\n        }, React.createElement(Animated.View, {\n          style: [styles.iconWrapper, {\n            opacity: activeOpacity\n          }],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 781,\n            columnNumber: 25\n          }\n        }, renderIcon ? renderIcon({\n          route: route,\n          focused: true,\n          color: activeTintColor\n        }) : React.createElement(Icon, {\n          source: route.icon,\n          color: activeTintColor,\n          size: 24,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 794,\n            columnNumber: 29\n          }\n        })), React.createElement(Animated.View, {\n          style: [styles.iconWrapper, {\n            opacity: inactiveOpacity\n          }],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 801,\n            columnNumber: 25\n          }\n        }, renderIcon ? renderIcon({\n          route: route,\n          focused: false,\n          color: inactiveTintColor\n        }) : React.createElement(Icon, {\n          source: route.icon,\n          color: inactiveTintColor,\n          size: 24,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 814,\n            columnNumber: 29\n          }\n        })), React.createElement(View, {\n          style: [styles.badgeContainer, {\n            right: (badge != null && typeof badge !== 'boolean' ? String(badge).length * -2 : 0) - 2\n          }],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 821,\n            columnNumber: 25\n          }\n        }, typeof badge === 'boolean' ? React.createElement(Badge, {\n          visible: badge,\n          size: 8,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 833,\n            columnNumber: 29\n          }\n        }) : React.createElement(Badge, {\n          visible: badge != null,\n          size: 16,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 835,\n            columnNumber: 29\n          }\n        }, badge))), labeled ? React.createElement(Animated.View, {\n          style: [styles.labelContainer, {\n            transform: [{\n              scale: scale\n            }]\n          }],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 842,\n            columnNumber: 25\n          }\n        }, React.createElement(Animated.View, {\n          style: [styles.labelWrapper, {\n            opacity: activeOpacity\n          }],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 848,\n            columnNumber: 27\n          }\n        }, renderLabel ? renderLabel({\n          route: route,\n          focused: true,\n          color: activeTintColor\n        }) : React.createElement(AnimatedText, {\n          style: [styles.label, {\n            color: activeTintColor\n          }],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 861,\n            columnNumber: 31\n          }\n        }, getLabelText({\n          route: route\n        }))), shifting ? null : React.createElement(Animated.View, {\n          style: [styles.labelWrapper, {\n            opacity: inactiveOpacity\n          }],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 872,\n            columnNumber: 29\n          }\n        }, renderLabel ? renderLabel({\n          route: route,\n          focused: false,\n          color: inactiveTintColor\n        }) : React.createElement(AnimatedText, {\n          style: [styles.label, {\n            color: inactiveTintColor\n          }],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 885,\n            columnNumber: 33\n          }\n        }, getLabelText({\n          route: route\n        })))) : React.createElement(View, {\n          style: styles.labelContainer,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 898,\n            columnNumber: 25\n          }\n        })));\n      })))));\n    }\n  }]);\n\n  return BottomNavigation;\n}(React.Component);\n\nBottomNavigation.defaultProps = {\n  labeled: true,\n  keyboardHidesNavigationBar: true\n};\npolyfill(BottomNavigation);\nexport default withTheme(BottomNavigation);\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    overflow: 'hidden'\n  },\n  content: {\n    flex: 1\n  },\n  bar: {\n    left: 0,\n    right: 0,\n    bottom: 0,\n    elevation: 8\n  },\n  barContent: {\n    alignItems: 'center',\n    overflow: 'hidden'\n  },\n  items: {\n    flexDirection: 'row',\n    width: '100%'\n  },\n  item: {\n    flex: 1,\n    paddingVertical: 6\n  },\n  ripple: {\n    position: 'absolute'\n  },\n  iconContainer: {\n    height: 24,\n    width: 24,\n    marginTop: 2,\n    marginHorizontal: 12,\n    alignSelf: 'center'\n  },\n  iconWrapper: _objectSpread(_objectSpread({}, StyleSheet.absoluteFillObject), {}, {\n    alignItems: 'center'\n  }),\n  labelContainer: {\n    height: 16,\n    paddingBottom: 2\n  },\n  labelWrapper: _objectSpread({}, StyleSheet.absoluteFillObject),\n  label: _objectSpread({\n    fontSize: 12,\n    textAlign: 'center',\n    backgroundColor: 'transparent'\n  }, Platform.OS === 'web' ? {\n    whiteSpace: 'nowrap'\n  } : null),\n  badgeContainer: {\n    position: 'absolute',\n    left: 0,\n    top: -2\n  }\n});","map":{"version":3,"sources":["C:/Users/Fido/Documents/GitHub/UI-Design-React/app/node_modules/react-native-paper/src/components/BottomNavigation.js"],"names":["React","polyfill","SafeAreaView","color","Icon","Surface","Badge","TouchableRipple","Text","black","white","withTheme","AnimatedText","Animated","createAnimatedComponent","MIN_RIPPLE_SCALE","MIN_TAB_WIDTH","MAX_TAB_WIDTH","BAR_HEIGHT","FAR_FAR_AWAY","Touchable","supported","style","children","borderless","centered","rippleColor","rest","SceneComponent","props","component","createElement","PureComponent","BottomNavigation","scenes","route","jumpTo","key","nextProps","prevState","navigationState","index","routes","tabs","map","_","i","Value","offsets","nextState","current","previous","loaded","includes","_handleKeyboardShow","setState","keyboard","timing","state","visible","toValue","duration","useNativeDriver","start","_handleKeyboardHide","_animateToCurrentIndex","shifting","_isShifting","ripple","setValue","parallel","finished","tab","forEach","offset","_handleLayout","e","layout","nativeEvent","height","width","measured","_handleTabPress","onTabPress","onIndexChange","_jumpTo","findIndex","length","touch","Platform","OS","Keyboard","addListener","prevProps","removeListener","renderScene","renderIcon","renderLabel","getLabelText","title","getBadge","badge","getColor","getAccessibilityLabel","accessibilityLabel","getTestID","testID","activeColor","inactiveColor","keyboardHidesNavigationBar","barStyle","labeled","theme","colors","StyleSheet","flatten","backgroundColor","approxBackgroundColor","primary","interpolate","inputRange","outputRange","isDark","light","textColor","activeTintColor","inactiveTintColor","alpha","rgb","string","touchColor","maxTabWidth","tabWidth","Math","min","styles","container","content","background","opacity","top","focused","absoluteFill","bar","transform","translateY","position","barContent","bottom","items","maxWidth","left","borderRadius","scale","active","activeOpacity","inactiveOpacity","item","iconContainer","iconWrapper","icon","badgeContainer","right","String","labelContainer","labelWrapper","label","Component","defaultProps","create","flex","overflow","elevation","alignItems","flexDirection","paddingVertical","marginTop","marginHorizontal","alignSelf","absoluteFillObject","paddingBottom","fontSize","textAlign","whiteSpace"],"mappings":";;;;;;;;;;;;;;;;;;;AAGA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;;;;;;;AASA,SAASC,QAAT,QAAyB,yBAAzB;AACA,OAAOC,YAAP,MAAyB,6BAAzB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP;AACA,OAAOC,OAAP;AACA,OAAOC,KAAP;AACA,OAAOC,eAAP;AACA,OAAOC,IAAP;AACA,SAASC,KAAT,EAAgBC,KAAhB;AACA,SAASC,SAAT;AAIA,IAAMC,YAAY,GAAGC,QAAQ,CAACC,uBAAT,CAAiCN,IAAjC,CAArB;AA6NA,IAAMO,gBAAgB,GAAG,KAAzB;AACA,IAAMC,aAAa,GAAG,EAAtB;AACA,IAAMC,aAAa,GAAG,GAAtB;AACA,IAAMC,UAAU,GAAG,EAAnB;AACA,IAAMC,YAAY,GAAG,IAArB;AAEA,IAAMC,SAAS,GAAGb,eAAe,CAACc,SAAhB,GACdd,eADc,GAEd;AAAA,MAAGe,KAAH,QAAGA,KAAH;AAAA,MAAUC,QAAV,QAAUA,QAAV;AAAA,MAAoBC,UAApB,QAAoBA,UAApB;AAAA,MAAgCC,QAAhC,QAAgCA,QAAhC;AAAA,MAA0CC,WAA1C,QAA0CA,WAA1C;AAAA,MAA0DC,IAA1D;;AAAA,SACE,oBAAC,wBAAD,eAA8BA,IAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEL,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAqBC,QAArB,CADF,CADF;AAAA,CAFJ;;IAQMK,c;;;;;;;;;;;;;6BACK;AAAA,wBACwB,KAAKC,KAD7B;AAAA,UACCC,SADD,eACCA,SADD;AAAA,UACeH,IADf;;AAEP,aAAO3B,KAAK,CAAC+B,aAAN,CAAoBD,SAApB,EAA+BH,IAA/B,CAAP;AACD;;;;EAJ0B3B,KAAK,CAACgC,a;;IA0D7BC,gB;;;;;;;6BAMYC,M,EAKb;AACD,aAAO;AAAA,YAAGC,KAAH,SAAGA,KAAH;AAAA,YAAUC,MAAV,SAAUA,MAAV;AAAA,eACL,oBAAC,cAAD;AACE,UAAA,GAAG,EAAED,KAAK,CAACE,GADb;AAEE,UAAA,SAAS,EAAEH,MAAM,CAACC,KAAK,CAACE,GAAP,CAFnB;AAGE,UAAA,KAAK,EAAEF,KAHT;AAIE,UAAA,MAAM,EAAEC,MAJV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADK;AAAA,OAAP;AAQD;;;6CAO+BE,S,EAAWC,S,EAAW;AAAA,kCAC1BD,SAAS,CAACE,eADgB;AAAA,UAC5CC,KAD4C,yBAC5CA,KAD4C;AAAA,UACrCC,MADqC,yBACrCA,MADqC;AAKpD,UAAMC,IAAI,GAAGD,MAAM,CAACE,GAAP,CAEX,UAACC,CAAD,EAAIC,CAAJ;AAAA,eAAUP,SAAS,CAACI,IAAV,CAAeG,CAAf,KAAqB,IAAIjC,QAAQ,CAACkC,KAAb,CAAmBD,CAAC,KAAKL,KAAN,GAAc,CAAd,GAAkB,CAArC,CAA/B;AAAA,OAFW,CAAb;AAIA,UAAMO,OAAO,GAAGN,MAAM,CAACE,GAAP,CAEd,UAACC,CAAD,EAAIC,CAAJ;AAAA,eAAUP,SAAS,CAACS,OAAV,CAAkBF,CAAlB,KAAwB,IAAIjC,QAAQ,CAACkC,KAAb,CAAmBD,CAAC,KAAKL,KAAN,GAAc,CAAd,GAAkB,CAArC,CAAlC;AAAA,OAFc,CAAhB;AAKA,UAAMQ,SAAS,GAAG;AAChBN,QAAAA,IAAI,EAAJA,IADgB;AAEhBK,QAAAA,OAAO,EAAPA;AAFgB,OAAlB;;AAKA,UAAIP,KAAK,KAAKF,SAAS,CAACW,OAAxB,EAAiC;AAE/B,iBAAcD,SAAd,EAAyB;AAEvBC,UAAAA,OAAO,EAAET,KAFc;AAGvBU,UAAAA,QAAQ,EAAEZ,SAAS,CAACW,OAHG;AAKvBE,UAAAA,MAAM,EAAEb,SAAS,CAACa,MAAV,CAAiBC,QAAjB,CAA0BZ,KAA1B,IACJF,SAAS,CAACa,MADN,gCAEAb,SAAS,CAACa,MAFV,IAEkBX,KAFlB;AALe,SAAzB;AASD;;AAED,aAAOQ,SAAP;AACD;;;AAED,4BAAYpB,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,+BAAMA,KAAN;;AADiB,UA8DnByB,mBA9DmB,GA8DG;AAAA,aACpB,MAAKC,QAAL,CAAc;AAAEC,QAAAA,QAAQ,EAAE;AAAZ,OAAd,EAAkC;AAAA,eAChC3C,QAAQ,CAAC4C,MAAT,CAAgB,MAAKC,KAAL,CAAWC,OAA3B,EAAoC;AAClCC,UAAAA,OAAO,EAAE,CADyB;AAElCC,UAAAA,QAAQ,EAAE,GAFwB;AAGlCC,UAAAA,eAAe,EAAE;AAHiB,SAApC,EAIGC,KAJH,EADgC;AAAA,OAAlC,CADoB;AAAA,KA9DH;;AAAA,UAuEnBC,mBAvEmB,GAuEG;AAAA,aACpBnD,QAAQ,CAAC4C,MAAT,CAAgB,MAAKC,KAAL,CAAWC,OAA3B,EAAoC;AAClCC,QAAAA,OAAO,EAAE,CADyB;AAElCC,QAAAA,QAAQ,EAAE,GAFwB;AAGlCC,QAAAA,eAAe,EAAE;AAHiB,OAApC,EAIGC,KAJH,CAIS,YAAM;AACb,cAAKR,QAAL,CAAc;AAAEC,UAAAA,QAAQ,EAAE;AAAZ,SAAd;AACD,OAND,CADoB;AAAA,KAvEH;;AAAA,UAgFnBS,sBAhFmB,GAgFM,YAAM;AAC7B,UAAMC,QAAQ,GAAG,MAAKC,WAAL,EAAjB;;AAD6B,kCAEH,MAAKtC,KAAL,CAAWW,eAFR;AAAA,UAErBE,MAFqB,yBAErBA,MAFqB;AAAA,UAEbD,KAFa,yBAEbA,KAFa;;AAK7B,YAAKiB,KAAL,CAAWU,MAAX,CAAkBC,QAAlB,CAA2BtD,gBAA3B;;AAEAF,MAAAA,QAAQ,CAACyD,QAAT,EACEzD,QAAQ,CAAC4C,MAAT,CAAgB,MAAKC,KAAL,CAAWU,MAA3B,EAAmC;AACjCR,QAAAA,OAAO,EAAE,CADwB;AAEjCC,QAAAA,QAAQ,EAAEK,QAAQ,GAAG,GAAH,GAAS,CAFM;AAGjCJ,QAAAA,eAAe,EAAE;AAHgB,OAAnC,CADF,4BAMKpB,MAAM,CAACE,GAAP,CAAW,UAACC,CAAD,EAAIC,CAAJ;AAAA,eACZjC,QAAQ,CAAC4C,MAAT,CAAgB,MAAKC,KAAL,CAAWf,IAAX,CAAgBG,CAAhB,CAAhB,EAAoC;AAClCc,UAAAA,OAAO,EAAEd,CAAC,KAAKL,KAAN,GAAc,CAAd,GAAkB,CADO;AAElCoB,UAAAA,QAAQ,EAAEK,QAAQ,GAAG,GAAH,GAAS,EAFO;AAGlCJ,UAAAA,eAAe,EAAE;AAHiB,SAApC,CADY;AAAA,OAAX,CANL,IAaGC,KAbH,CAaS,iBAAkB;AAAA,YAAfQ,QAAe,SAAfA,QAAe;;AAEzB,cAAKb,KAAL,CAAWf,IAAX,CAAgBC,GAAhB,CAAoB,UAAC4B,GAAD,EAAM1B,CAAN;AAAA,iBAAY0B,GAAG,CAACH,QAAJ,CAAavB,CAAC,KAAKL,KAAN,GAAc,CAAd,GAAkB,CAA/B,CAAZ;AAAA,SAApB;;AAGA,cAAKiB,KAAL,CAAWjB,KAAX,CAAiB4B,QAAjB,CAA0B5B,KAA1B;;AACA,cAAKiB,KAAL,CAAWU,MAAX,CAAkBC,QAAlB,CAA2BtD,gBAA3B;;AAEA,YAAIwD,QAAJ,EAAc;AAGZ,gBAAKb,KAAL,CAAWV,OAAX,CAAmByB,OAAnB,CAA2B,UAACC,MAAD,EAAS5B,CAAT,EAAe;AACxC,gBAAIA,CAAC,KAAKL,KAAV,EAAiB;AACfiC,cAAAA,MAAM,CAACL,QAAP,CAAgB,CAAhB;AACD,aAFD,MAEO;AACLK,cAAAA,MAAM,CAACL,QAAP,CAAgB,CAAhB;AACD;AACF,WAND;AAOD;AACF,OAhCD;AAiCD,KAxHkB;;AAAA,UA0HnBM,aA1HmB,GA0HH,UAAAC,CAAC,EAAI;AAAA,UACXC,MADW,GACA,MAAKnB,KADL,CACXmB,MADW;AAAA,kCAEOD,CAAC,CAACE,WAAF,CAAcD,MAFrB;AAAA,UAEXE,MAFW,yBAEXA,MAFW;AAAA,UAEHC,KAFG,yBAEHA,KAFG;;AAInB,UAAID,MAAM,KAAKF,MAAM,CAACE,MAAlB,IAA4BC,KAAK,KAAKH,MAAM,CAACG,KAAjD,EAAwD;AACtD;AACD;;AAED,YAAKzB,QAAL,CAAc;AACZsB,QAAAA,MAAM,EAAE;AACNE,UAAAA,MAAM,EAANA,MADM;AAENC,UAAAA,KAAK,EAALA,KAFM;AAGNC,UAAAA,QAAQ,EAAE;AAHJ;AADI,OAAd;AAOD,KAzIkB;;AAAA,UA2InBC,eA3ImB,GA2ID,UAACzC,KAAD,EAAmB;AAAA,yBACoB,MAAKZ,KADzB;AAAA,UAC3BW,eAD2B,gBAC3BA,eAD2B;AAAA,UACV2C,UADU,gBACVA,UADU;AAAA,UACEC,aADF,gBACEA,aADF;;AAGnC,UAAID,UAAJ,EAAgB;AACdA,QAAAA,UAAU,CAAC;AACThD,UAAAA,KAAK,EAAEK,eAAe,CAACE,MAAhB,CAAuBD,KAAvB;AADE,SAAD,CAAV;AAGD;;AAED,UAAIA,KAAK,KAAKD,eAAe,CAACC,KAA9B,EAAqC;AACnC2C,QAAAA,aAAa,CAAC3C,KAAD,CAAb;AACD;AACF,KAvJkB;;AAAA,UAyJnB4C,OAzJmB,GAyJT,UAAChD,GAAD,EAAiB;AACzB,UAAMI,KAAK,GAAG,MAAKZ,KAAL,CAAWW,eAAX,CAA2BE,MAA3B,CAAkC4C,SAAlC,CACZ,UAAAnD,KAAK;AAAA,eAAIA,KAAK,CAACE,GAAN,KAAcA,GAAlB;AAAA,OADO,CAAd;;AAIA,YAAKR,KAAL,CAAWuD,aAAX,CAAyB3C,KAAzB;AACD,KA/JkB;;AAAA,UAiKnB0B,WAjKmB,GAiKL;AAAA,aACZ,OAAO,MAAKtC,KAAL,CAAWqC,QAAlB,KAA+B,SAA/B,GACI,MAAKrC,KAAL,CAAWqC,QADf,GAEI,MAAKrC,KAAL,CAAWW,eAAX,CAA2BE,MAA3B,CAAkC6C,MAAlC,GAA2C,CAHnC;AAAA,KAjKK;;AAAA,QAGT9C,MAHS,GAGC,MAAKZ,KAAL,CAAWW,eAHZ,CAGTC,KAHS;AAKjB,UAAKiB,KAAL,GAAa;AACXC,MAAAA,OAAO,EAAE,IAAI9C,QAAQ,CAACkC,KAAb,CAAmB,CAAnB,CADE;AAEXJ,MAAAA,IAAI,EAAE,EAFK;AAGXK,MAAAA,OAAO,EAAE,EAHE;AAIXP,MAAAA,KAAK,EAAE,IAAI5B,QAAQ,CAACkC,KAAb,CAAmBN,MAAnB,CAJI;AAKX2B,MAAAA,MAAM,EAAE,IAAIvD,QAAQ,CAACkC,KAAb,CAAmBhC,gBAAnB,CALG;AAMXyE,MAAAA,KAAK,EAAE,IAAI3E,QAAQ,CAACkC,KAAb,CAAmBhC,gBAAnB,CANI;AAOX8D,MAAAA,MAAM,EAAE;AAAEE,QAAAA,MAAM,EAAE,CAAV;AAAaC,QAAAA,KAAK,EAAE,CAApB;AAAuBC,QAAAA,QAAQ,EAAE;AAAjC,OAPG;AAQX/B,MAAAA,OAAO,EAAET,MARE;AASXU,MAAAA,QAAQ,EAAE,CATC;AAUXC,MAAAA,MAAM,EAAE,CAACX,MAAD,CAVG;AAWXe,MAAAA,QAAQ,EAAE;AAXC,KAAb;AALiB;AAkBlB;;;;wCAEmB;AAGlB,WAAKS,sBAAL;;AAEA,UAAIwB,QAAQ,CAACC,EAAT,KAAgB,KAApB,EAA2B;AACzBC,QAAAA,QAAQ,CAACC,WAAT,CAAqB,kBAArB,EAAyC,KAAKtC,mBAA9C;AACAqC,QAAAA,QAAQ,CAACC,WAAT,CAAqB,kBAArB,EAAyC,KAAK5B,mBAA9C;AACD,OAHD,MAGO;AACL2B,QAAAA,QAAQ,CAACC,WAAT,CAAqB,iBAArB,EAAwC,KAAKtC,mBAA7C;AACAqC,QAAAA,QAAQ,CAACC,WAAT,CAAqB,iBAArB,EAAwC,KAAK5B,mBAA7C;AACD;AACF;;;uCAEkB6B,S,EAAW;AAAA;;AAC5B,UAAIA,SAAS,CAACrD,eAAV,CAA0BC,KAA1B,KAAoC,KAAKZ,KAAL,CAAWW,eAAX,CAA2BC,KAAnE,EAA0E;AACxE;AACD;;AAGD,WAAKiB,KAAL,CAAWV,OAAX,CAAmByB,OAAnB,CAA2B,UAACC,MAAD,EAAS5B,CAAT,EAAe;AACxC,YACEA,CAAC,KAAK,MAAI,CAACjB,KAAL,CAAWW,eAAX,CAA2BC,KAAjC,IACAK,CAAC,KAAK+C,SAAS,CAACrD,eAAV,CAA0BC,KAFlC,EAGE;AACAiC,UAAAA,MAAM,CAACL,QAAP,CAAgB,CAAhB;AACD;AACF,OAPD;;AASA,WAAKJ,sBAAL;AACD;;;2CAEsB;AACrB,UAAIwB,QAAQ,CAACC,EAAT,KAAgB,KAApB,EAA2B;AACzBC,QAAAA,QAAQ,CAACG,cAAT,CAAwB,kBAAxB,EAA4C,KAAKxC,mBAAjD;AACAqC,QAAAA,QAAQ,CAACG,cAAT,CAAwB,kBAAxB,EAA4C,KAAK9B,mBAAjD;AACD,OAHD,MAGO;AACL2B,QAAAA,QAAQ,CAACG,cAAT,CAAwB,iBAAxB,EAA2C,KAAKxC,mBAAhD;AACAqC,QAAAA,QAAQ,CAACG,cAAT,CAAwB,iBAAxB,EAA2C,KAAK9B,mBAAhD;AACD;AACF;;;6BA0GQ;AAAA;;AAAA,yBAkBH,KAAKnC,KAlBF;AAAA,UAELW,eAFK,gBAELA,eAFK;AAAA,UAGLuD,WAHK,gBAGLA,WAHK;AAAA,UAILC,UAJK,gBAILA,UAJK;AAAA,UAKLC,WALK,gBAKLA,WALK;AAAA,+CAMLC,YANK;AAAA,UAMLA,YANK,sCAMU;AAAA,YAAG/D,KAAH,SAAGA,KAAH;AAAA,eAAuBA,KAAK,CAACgE,KAA7B;AAAA,OANV;AAAA,+CAOLC,QAPK;AAAA,UAOLA,QAPK,sCAOM;AAAA,YAAGjE,KAAH,SAAGA,KAAH;AAAA,eAAuBA,KAAK,CAACkE,KAA7B;AAAA,OAPN;AAAA,+CAQLC,QARK;AAAA,UAQLA,QARK,sCAQM;AAAA,YAAGnE,KAAH,SAAGA,KAAH;AAAA,eAAuBA,KAAK,CAAChC,KAA7B;AAAA,OARN;AAAA,+CASLoG,qBATK;AAAA,UASLA,qBATK,sCASmB;AAAA,YAAGpE,KAAH,SAAGA,KAAH;AAAA,eAAuBA,KAAK,CAACqE,kBAA7B;AAAA,OATnB;AAAA,+CAULC,SAVK;AAAA,UAULA,SAVK,sCAUO;AAAA,YAAGtE,KAAH,SAAGA,KAAH;AAAA,eAAuBA,KAAK,CAACuE,MAA7B;AAAA,OAVP;AAAA,UAWLC,WAXK,gBAWLA,WAXK;AAAA,UAYLC,aAZK,gBAYLA,aAZK;AAAA,UAaLC,0BAbK,gBAaLA,0BAbK;AAAA,UAcLC,QAdK,gBAcLA,QAdK;AAAA,UAeLC,OAfK,gBAeLA,OAfK;AAAA,UAgBLzF,KAhBK,gBAgBLA,KAhBK;AAAA,UAiBL0F,KAjBK,gBAiBLA,KAjBK;AAAA,wBAoBoB,KAAKtD,KApBzB;AAAA,UAoBCmB,MApBD,eAoBCA,MApBD;AAAA,UAoBSzB,MApBT,eAoBSA,MApBT;AAAA,UAqBCV,MArBD,GAqBYF,eArBZ,CAqBCE,MArBD;AAAA,UAsBCuE,MAtBD,GAsBYD,KAtBZ,CAsBCC,MAtBD;;AAwBP,UAAM/C,QAAQ,GAAG,KAAKC,WAAL,EAAjB;;AAxBO,kBA2BL+C,UAAU,CAACC,OAAX,CAAmBL,QAAnB,KAAgC,EA3B3B;AAAA,wCA0BCM,eA1BD;AAAA,UA0BkBC,qBA1BlB,sCA0B0CJ,MAAM,CAACK,OA1BjD;;AA6BP,UAAMF,eAAe,GAAGlD,QAAQ,GAC5B,KAAKR,KAAL,CAAWjB,KAAX,CAAiB8E,WAAjB,CAA6B;AAC3BC,QAAAA,UAAU,EAAE9E,MAAM,CAACE,GAAP,CAAW,UAACC,CAAD,EAAIC,CAAJ;AAAA,iBAAUA,CAAV;AAAA,SAAX,CADe;AAE3B2E,QAAAA,WAAW,EAAE/E,MAAM,CAACE,GAAP,CACX,UAAAT,KAAK;AAAA,iBAAImE,QAAQ,CAAC;AAAEnE,YAAAA,KAAK,EAALA;AAAF,WAAD,CAAR,IAAuBkF,qBAA3B;AAAA,SADM;AAFc,OAA7B,CAD4B,GAO5BA,qBAPJ;AASA,UAAMK,MAAM,GAAG,CAACvH,KAAK,CAACkH,qBAAD,CAAL,CAA6BM,KAA7B,EAAhB;AAEA,UAAMC,SAAS,GAAGF,MAAM,GAAGhH,KAAH,GAAWD,KAAnC;AACA,UAAMoH,eAAe,GACnB,OAAOlB,WAAP,KAAuB,WAAvB,GAAqCA,WAArC,GAAmDiB,SADrD;AAEA,UAAME,iBAAiB,GACrB,OAAOlB,aAAP,KAAyB,WAAzB,GACIA,aADJ,GAEIzG,KAAK,CAACyH,SAAD,CAAL,CACGG,KADH,CACS,GADT,EAEGC,GAFH,GAGGC,MAHH,EAHN;AAQA,UAAMC,UAAU,GAAG/H,KAAK,CAACwG,WAAD,CAAL,CAChBoB,KADgB,CACV,IADU,EAEhBC,GAFgB,GAGhBC,MAHgB,EAAnB;AAKA,UAAME,WAAW,GAAGzF,MAAM,CAAC6C,MAAP,GAAgB,CAAhB,GAAoBvE,aAApB,GAAoCC,aAAxD;AACA,UAAMmH,QAAQ,GAAGC,IAAI,CAACC,GAAL,CAEdzD,MAAM,CAACG,KAAP,GAAe,CAAhB,GAAqBtC,MAAM,CAAC6C,MAFb,EAGf4C,WAHe,CAAjB;AAMA,aACE,oBAAC,IAAD;AACE,QAAA,KAAK,EAAE,CAACI,MAAM,CAACC,SAAR,EAAmBlH,KAAnB,CADT;AAEE,QAAA,aAAa,EAAEuD,MAAM,CAACI,QAAP,GAAkB,MAAlB,GAA2B,MAF5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAIE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE,CAACsD,MAAM,CAACE,OAAR,EAAiB;AAAErB,UAAAA,eAAe,EAAEH,MAAM,CAACyB;AAA1B,SAAjB,CAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGhG,MAAM,CAACE,GAAP,CAAW,UAACT,KAAD,EAAQM,KAAR,EAAkB;AAC5B,YAAI,CAACW,MAAM,CAACC,QAAP,CAAgBZ,KAAhB,CAAL,EAA6B;AAE3B,iBAAO,IAAP;AACD;;AAED,YAAMkG,OAAO,GAAG,MAAI,CAACjF,KAAL,CAAWf,IAAX,CAAgBF,KAAhB,CAAhB;;AACA,YAAMmG,GAAG,GAAG,MAAI,CAAClF,KAAL,CAAWV,OAAX,CAAmBP,KAAnB,EAA0B8E,WAA1B,CAAsC;AAChDC,UAAAA,UAAU,EAAE,CAAC,CAAD,EAAI,CAAJ,CADoC;AAEhDC,UAAAA,WAAW,EAAE,CAAC,CAAD,EAAItG,YAAJ;AAFmC,SAAtC,CAAZ;;AAKA,YAAM0H,OAAO,GAAGrG,eAAe,CAACC,KAAhB,KAA0BA,KAA1C;AAEA,eACE,oBAAC,QAAD,CAAU,IAAV;AACE,UAAA,GAAG,EAAEN,KAAK,CAACE,GADb;AAEE,UAAA,aAAa,EAAEwG,OAAO,GAAG,MAAH,GAAY,MAFpC;AAGE,UAAA,2BAA2B,EAAE,CAACA,OAHhC;AAIE,UAAA,yBAAyB,EACvBA,OAAO,GAAG,MAAH,GAAY,qBALvB;AAOE,UAAA,KAAK,EAAE,CAAC3B,UAAU,CAAC4B,YAAZ,EAA0B;AAAEH,YAAAA,OAAO,EAAPA;AAAF,WAA1B,CAPT;AAQE,UAAA,WAAW,EAAE,KARf;AASE,UAAA,qBAAqB,EAGnBlD,QAAQ,CAACC,EAAT,KAAgB,KAAhB,GAAwBlD,eAAe,CAACC,KAAhB,KAA0BA,KAAlD,GAA0D,IAZ9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAeE,oBAAC,QAAD,CAAU,IAAV;AAAe,UAAA,KAAK,EAAE,CAAC8F,MAAM,CAACE,OAAR,EAAiB;AAAEG,YAAAA,GAAG,EAAHA;AAAF,WAAjB,CAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACG7C,WAAW,CAAC;AACX5D,UAAAA,KAAK,EAALA,KADW;AAEXC,UAAAA,MAAM,EAAE,MAAI,CAACiD;AAFF,SAAD,CADd,CAfF,CADF;AAwBD,OAtCA,CADH,CAJF,EA6CE,oBAAC,OAAD;AACE,QAAA,KAAK,EAAE,CACLkD,MAAM,CAACQ,GADF,EAELlC,0BAA0B,GACtB;AAEEmC,UAAAA,SAAS,EAAE,CACT;AACEC,YAAAA,UAAU,EAAE,KAAKvF,KAAL,CAAWC,OAAX,CAAmB4D,WAAnB,CAA+B;AACzCC,cAAAA,UAAU,EAAE,CAAC,CAAD,EAAI,CAAJ,CAD6B;AAEzCC,cAAAA,WAAW,EAAE,CAAC,KAAK/D,KAAL,CAAWmB,MAAX,CAAkBE,MAAnB,EAA2B,CAA3B;AAF4B,aAA/B;AADd,WADS,CAFb;AAYEmE,UAAAA,QAAQ,EAAE,KAAKxF,KAAL,CAAWF,QAAX,GAAsB,UAAtB,GAAmC;AAZ/C,SADsB,GAetB,IAjBC,EAkBLsD,QAlBK,CADT;AAqBE,QAAA,aAAa,EACXD,0BAA0B,IAAI,KAAKnD,KAAL,CAAWF,QAAzC,GAAoD,MAApD,GAA6D,MAtBjE;AAwBE,QAAA,QAAQ,EAAE,KAAKmB,aAxBjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SA0BE,oBAAC,QAAD,CAAU,IAAV;AAAe,QAAA,KAAK,EAAE,CAAC4D,MAAM,CAACY,UAAR,EAAoB;AAAE/B,UAAAA,eAAe,EAAfA;AAAF,SAApB,CAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,YAAD;AACE,QAAA,UAAU,EAAE;AAAEwB,UAAAA,GAAG,EAAE,OAAP;AAAgBQ,UAAAA,MAAM,EAAE;AAAxB,SADd;AAEE,QAAA,KAAK,EAAE,CAACb,MAAM,CAACc,KAAR,EAAe;AAAEC,UAAAA,QAAQ,EAAEnB,WAAW,GAAGzF,MAAM,CAAC6C;AAAjC,SAAf,CAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAIGrB,QAAQ,GACP,oBAAC,QAAD,CAAU,IAAV;AACE,QAAA,aAAa,EAAC,MADhB;AAEE,QAAA,KAAK,EAAE,CACLqE,MAAM,CAACnE,MADF,EAEL;AAGEwE,UAAAA,GAAG,EAAE1H,UAAU,GAAG,CAAb,GAAiB2D,MAAM,CAACG,KAAP,GAAe,CAHvC;AAIEuE,UAAAA,IAAI,EACF/G,eAAe,CAACC,KAAhB,GAAwB2F,QAAxB,GACAA,QAAQ,GAAG,CADX,GAEAvD,MAAM,CAACG,KAAP,GAAe,CAPnB;AAQED,UAAAA,MAAM,EAAEF,MAAM,CAACG,KAAP,GAAe,CARzB;AASEA,UAAAA,KAAK,EAAEH,MAAM,CAACG,KAAP,GAAe,CATxB;AAUEwE,UAAAA,YAAY,EAAE3E,MAAM,CAACG,KAAP,GAAe,CAV/B;AAWEoC,UAAAA,eAAe,EAAEd,QAAQ,CAAC;AACxBnE,YAAAA,KAAK,EAAEO,MAAM,CAACF,eAAe,CAACC,KAAjB;AADW,WAAD,CAX3B;AAcEuG,UAAAA,SAAS,EAAE,CACT;AAEES,YAAAA,KAAK,EAAE,KAAK/F,KAAL,CAAWU,MAAX,CAAkBmD,WAAlB,CAA8B;AACnCC,cAAAA,UAAU,EAAE,CAAC,CAAD,EAAI,CAAJ,CADuB;AAEnCC,cAAAA,WAAW,EAAE,CAAC,CAAD,EAAI,CAAJ;AAFsB,aAA9B;AAFT,WADS,CAdb;AAuBEkB,UAAAA,OAAO,EAAE,KAAKjF,KAAL,CAAWU,MAAX,CAAkBmD,WAAlB,CAA8B;AACrCC,YAAAA,UAAU,EAAE,CAAC,CAAD,EAAIzG,gBAAJ,EAAsB,GAAtB,EAA2B,CAA3B,CADyB;AAErC0G,YAAAA,WAAW,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV;AAFwB,WAA9B;AAvBX,SAFK,CAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADO,GAmCL,IAvCN,EAwCG/E,MAAM,CAACE,GAAP,CAAW,UAACT,KAAD,EAAQM,KAAR,EAAkB;AAC5B,YAAMoG,OAAO,GAAGrG,eAAe,CAACC,KAAhB,KAA0BA,KAA1C;AACA,YAAMiH,MAAM,GAAG,MAAI,CAAChG,KAAL,CAAWf,IAAX,CAAgBF,KAAhB,CAAf;AAGA,YAAMgH,KAAK,GACT1C,OAAO,IAAI7C,QAAX,GACIwF,MAAM,CAACnC,WAAP,CAAmB;AACjBC,UAAAA,UAAU,EAAE,CAAC,CAAD,EAAI,CAAJ,CADK;AAEjBC,UAAAA,WAAW,EAAE,CAAC,GAAD,EAAM,CAAN;AAFI,SAAnB,CADJ,GAKI,CANN;AASA,YAAMwB,UAAU,GAAGlC,OAAO,GACtB7C,QAAQ,GACNwF,MAAM,CAACnC,WAAP,CAAmB;AACjBC,UAAAA,UAAU,EAAE,CAAC,CAAD,EAAI,CAAJ,CADK;AAEjBC,UAAAA,WAAW,EAAE,CAAC,CAAD,EAAI,CAAJ;AAFI,SAAnB,CADM,GAKN,CANoB,GAOtB,CAPJ;AAYA,YAAMkC,aAAa,GAAGD,MAAtB;AACA,YAAME,eAAe,GAAGF,MAAM,CAACnC,WAAP,CAAmB;AACzCC,UAAAA,UAAU,EAAE,CAAC,CAAD,EAAI,CAAJ,CAD6B;AAEzCC,UAAAA,WAAW,EAAE,CAAC,CAAD,EAAI,CAAJ;AAF4B,SAAnB,CAAxB;AAKA,YAAMpB,KAAK,GAAGD,QAAQ,CAAC;AAAEjE,UAAAA,KAAK,EAALA;AAAF,SAAD,CAAtB;AAEA,eACE,oBAAC,SAAD;AACE,UAAA,GAAG,EAAEA,KAAK,CAACE,GADb;AAEE,UAAA,UAAU,MAFZ;AAGE,UAAA,QAAQ,MAHV;AAIE,UAAA,WAAW,EAAE6F,UAJf;AAKE,UAAA,OAAO,EAAE;AAAA,mBAAM,MAAI,CAAChD,eAAL,CAAqBzC,KAArB,CAAN;AAAA,WALX;AAME,UAAA,MAAM,EAAEgE,SAAS,CAAC;AAAEtE,YAAAA,KAAK,EAALA;AAAF,WAAD,CANnB;AAOE,UAAA,kBAAkB,EAAEoE,qBAAqB,CAAC;AAAEpE,YAAAA,KAAK,EAALA;AAAF,WAAD,CAP3C;AAQE,UAAA,mBAAmB,EACjB0G,OAAO,GAAG,CAAC,QAAD,EAAW,UAAX,CAAH,GAA4B,QATvC;AAWE,UAAA,0BAA0B,EAAC,QAX7B;AAYE,UAAA,iBAAiB,EAAC,QAZpB;AAaE,UAAA,mBAAmB,EAAE,CAAC,UAAD,CAbvB;AAcE,UAAA,KAAK,EAAEN,MAAM,CAACsB,IAdhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAgBE,oBAAC,IAAD;AAAM,UAAA,aAAa,EAAC,MAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE,oBAAC,QAAD,CAAU,IAAV;AACE,UAAA,KAAK,EAAE,CACLtB,MAAM,CAACuB,aADF,EAEL;AAAEd,YAAAA,SAAS,EAAE,CAAC;AAAEC,cAAAA,UAAU,EAAVA;AAAF,aAAD;AAAb,WAFK,CADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAME,oBAAC,QAAD,CAAU,IAAV;AACE,UAAA,KAAK,EAAE,CACLV,MAAM,CAACwB,WADF,EAEL;AAAEpB,YAAAA,OAAO,EAAEgB;AAAX,WAFK,CADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAMG3D,UAAU,GACTA,UAAU,CAAC;AACT7D,UAAAA,KAAK,EAALA,KADS;AAET0G,UAAAA,OAAO,EAAE,IAFA;AAGT1I,UAAAA,KAAK,EAAE0H;AAHE,SAAD,CADD,GAOT,oBAAC,IAAD;AACE,UAAA,MAAM,EAAG1F,KAAD,CAAgB6H,IAD1B;AAEE,UAAA,KAAK,EAAEnC,eAFT;AAGE,UAAA,IAAI,EAAE,EAHR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAbJ,CANF,EA0BE,oBAAC,QAAD,CAAU,IAAV;AACE,UAAA,KAAK,EAAE,CACLU,MAAM,CAACwB,WADF,EAEL;AAAEpB,YAAAA,OAAO,EAAEiB;AAAX,WAFK,CADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAMG5D,UAAU,GACTA,UAAU,CAAC;AACT7D,UAAAA,KAAK,EAALA,KADS;AAET0G,UAAAA,OAAO,EAAE,KAFA;AAGT1I,UAAAA,KAAK,EAAE2H;AAHE,SAAD,CADD,GAOT,oBAAC,IAAD;AACE,UAAA,MAAM,EAAG3F,KAAD,CAAgB6H,IAD1B;AAEE,UAAA,KAAK,EAAElC,iBAFT;AAGE,UAAA,IAAI,EAAE,EAHR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAbJ,CA1BF,EA8CE,oBAAC,IAAD;AACE,UAAA,KAAK,EAAE,CACLS,MAAM,CAAC0B,cADF,EAEL;AACEC,YAAAA,KAAK,EACH,CAAC7D,KAAK,IAAI,IAAT,IAAiB,OAAOA,KAAP,KAAiB,SAAlC,GACG8D,MAAM,CAAC9D,KAAD,CAAN,CAAcd,MAAd,GAAuB,CAAC,CAD3B,GAEG,CAFJ,IAES;AAJb,WAFK,CADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAWG,OAAOc,KAAP,KAAiB,SAAjB,GACC,oBAAC,KAAD;AAAO,UAAA,OAAO,EAAEA,KAAhB;AAAuB,UAAA,IAAI,EAAE,CAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADD,GAGC,oBAAC,KAAD;AAAO,UAAA,OAAO,EAAEA,KAAK,IAAI,IAAzB;AAA+B,UAAA,IAAI,EAAE,EAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACGA,KADH,CAdJ,CA9CF,CADF,EAmEGU,OAAO,GACN,oBAAC,QAAD,CAAU,IAAV;AACE,UAAA,KAAK,EAAE,CACLwB,MAAM,CAAC6B,cADF,EAEL;AAAEpB,YAAAA,SAAS,EAAE,CAAC;AAAES,cAAAA,KAAK,EAALA;AAAF,aAAD;AAAb,WAFK,CADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAME,oBAAC,QAAD,CAAU,IAAV;AACE,UAAA,KAAK,EAAE,CACLlB,MAAM,CAAC8B,YADF,EAEL;AAAE1B,YAAAA,OAAO,EAAEgB;AAAX,WAFK,CADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAMG1D,WAAW,GACVA,WAAW,CAAC;AACV9D,UAAAA,KAAK,EAALA,KADU;AAEV0G,UAAAA,OAAO,EAAE,IAFC;AAGV1I,UAAAA,KAAK,EAAE0H;AAHG,SAAD,CADD,GAOV,oBAAC,YAAD;AACE,UAAA,KAAK,EAAE,CACLU,MAAM,CAAC+B,KADF,EAEL;AAAEnK,YAAAA,KAAK,EAAE0H;AAAT,WAFK,CADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAMG3B,YAAY,CAAC;AAAE/D,UAAAA,KAAK,EAALA;AAAF,SAAD,CANf,CAbJ,CANF,EA6BG+B,QAAQ,GAAG,IAAH,GACP,oBAAC,QAAD,CAAU,IAAV;AACE,UAAA,KAAK,EAAE,CACLqE,MAAM,CAAC8B,YADF,EAEL;AAAE1B,YAAAA,OAAO,EAAEiB;AAAX,WAFK,CADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAMG3D,WAAW,GACVA,WAAW,CAAC;AACV9D,UAAAA,KAAK,EAALA,KADU;AAEV0G,UAAAA,OAAO,EAAE,KAFC;AAGV1I,UAAAA,KAAK,EAAE2H;AAHG,SAAD,CADD,GAOV,oBAAC,YAAD;AACE,UAAA,KAAK,EAAE,CACLS,MAAM,CAAC+B,KADF,EAEL;AAAEnK,YAAAA,KAAK,EAAE2H;AAAT,WAFK,CADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAMG5B,YAAY,CAAC;AAAE/D,UAAAA,KAAK,EAALA;AAAF,SAAD,CANf,CAbJ,CA9BJ,CADM,GAyDN,oBAAC,IAAD;AAAM,UAAA,KAAK,EAAEoG,MAAM,CAAC6B,cAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UA5HJ,CAhBF,CADF;AAkJD,OApLA,CAxCH,CADF,CA1BF,CA7CF,CADF;AA2SD;;;;EA9kBkCpK,KAAK,CAACuK,S;;AAArCtI,gB,CAsBGuI,Y,GAAe;AACpBzD,EAAAA,OAAO,EAAE,IADW;AAEpBF,EAAAA,0BAA0B,EAAE;AAFR,C;AA2jBxB5G,QAAQ,CAACgC,gBAAD,CAAR;AAEA,eAAetB,SAAS,CAACsB,gBAAD,CAAxB;AAEA,IAAMsG,MAAM,GAAGrB,UAAU,CAACuD,MAAX,CAAkB;AAC/BjC,EAAAA,SAAS,EAAE;AACTkC,IAAAA,IAAI,EAAE,CADG;AAETC,IAAAA,QAAQ,EAAE;AAFD,GADoB;AAK/BlC,EAAAA,OAAO,EAAE;AACPiC,IAAAA,IAAI,EAAE;AADC,GALsB;AAQ/B3B,EAAAA,GAAG,EAAE;AACHQ,IAAAA,IAAI,EAAE,CADH;AAEHW,IAAAA,KAAK,EAAE,CAFJ;AAGHd,IAAAA,MAAM,EAAE,CAHL;AAIHwB,IAAAA,SAAS,EAAE;AAJR,GAR0B;AAc/BzB,EAAAA,UAAU,EAAE;AACV0B,IAAAA,UAAU,EAAE,QADF;AAEVF,IAAAA,QAAQ,EAAE;AAFA,GAdmB;AAkB/BtB,EAAAA,KAAK,EAAE;AACLyB,IAAAA,aAAa,EAAE,KADV;AAEL9F,IAAAA,KAAK,EAAE;AAFF,GAlBwB;AAsB/B6E,EAAAA,IAAI,EAAE;AACJa,IAAAA,IAAI,EAAE,CADF;AAIJK,IAAAA,eAAe,EAAE;AAJb,GAtByB;AA4B/B3G,EAAAA,MAAM,EAAE;AACN8E,IAAAA,QAAQ,EAAE;AADJ,GA5BuB;AA+B/BY,EAAAA,aAAa,EAAE;AACb/E,IAAAA,MAAM,EAAE,EADK;AAEbC,IAAAA,KAAK,EAAE,EAFM;AAGbgG,IAAAA,SAAS,EAAE,CAHE;AAIbC,IAAAA,gBAAgB,EAAE,EAJL;AAKbC,IAAAA,SAAS,EAAE;AALE,GA/BgB;AAsC/BnB,EAAAA,WAAW,kCACN7C,UAAU,CAACiE,kBADL;AAETN,IAAAA,UAAU,EAAE;AAFH,IAtCoB;AA0C/BT,EAAAA,cAAc,EAAE;AACdrF,IAAAA,MAAM,EAAE,EADM;AAEdqG,IAAAA,aAAa,EAAE;AAFD,GA1Ce;AA8C/Bf,EAAAA,YAAY,oBACPnD,UAAU,CAACiE,kBADJ,CA9CmB;AAiD/Bb,EAAAA,KAAK;AACHe,IAAAA,QAAQ,EAAE,EADP;AAEHC,IAAAA,SAAS,EAAE,QAFR;AAGHlE,IAAAA,eAAe,EAAE;AAHd,KAIE3B,QAAQ,CAACC,EAAT,KAAgB,KAAhB,GACD;AACE6F,IAAAA,UAAU,EAAE;AADd,GADC,GAID,IARD,CAjD0B;AA2D/BtB,EAAAA,cAAc,EAAE;AACdf,IAAAA,QAAQ,EAAE,UADI;AAEdK,IAAAA,IAAI,EAAE,CAFQ;AAGdX,IAAAA,GAAG,EAAE,CAAC;AAHQ;AA3De,CAAlB,CAAf","sourcesContent":["/* @flow */\n/* eslint-disable react/no-multi-comp */\n\nimport * as React from 'react';\nimport {\n  View,\n  Animated,\n  TouchableWithoutFeedback,\n  StyleSheet,\n  Platform,\n  Keyboard,\n} from 'react-native';\nimport { polyfill } from 'react-lifecycles-compat';\nimport SafeAreaView from 'react-native-safe-area-view';\nimport color from 'color';\nimport Icon from './Icon';\nimport Surface from './Surface';\nimport Badge from './Badge';\nimport TouchableRipple from './TouchableRipple';\nimport Text from './Typography/Text';\nimport { black, white } from '../styles/colors';\nimport { withTheme } from '../core/theming';\nimport type { Theme } from '../types';\nimport type { IconSource } from './Icon';\n\nconst AnimatedText = Animated.createAnimatedComponent(Text);\n\ntype Route = $Shape<{\n  key: string,\n  title: string,\n  icon: IconSource,\n  badge: string | number | boolean,\n  color: string,\n  accessibilityLabel: string,\n  testID: string,\n}>;\n\ntype NavigationState<T: Route> = {\n  index: number,\n  routes: Array<T>,\n};\n\ntype Props<T> = {\n  /**\n   * Whether the shifting style is used, the active tab appears wider and the inactive tabs won't have a label.\n   * By default, this is `true` when you have more than 3 tabs.\n   */\n  shifting?: boolean,\n  /**\n   * Whether to show labels in tabs. When `false`, only icons will be displayed.\n   */\n  labeled?: boolean,\n  /**\n   * State for the bottom navigation. The state should contain the following properties:\n   *\n   * - `index`: a number reprsenting the index of the active route in the `routes` array\n   * - `routes`: an array containing a list of route objects used for rendering the tabs\n   *\n   * Each route object should contain the following properties:\n   *\n   * - `key`: a unique key to identify the route (required)\n   * - `title`: title of the route to use as the tab label\n   * - `icon`: icon to use as the tab icon, can be a string, an image source or a react component\n   * - `color`: color to use as background color for shifting bottom navigation\n   * - `badge`: badge to show on the tab icon, can be `true` to show a dot, `string` or `number` to show text.\n   * - `accessibilityLabel`: accessibility label for the tab button\n   * - `testID`: test id for the tab button\n   *\n   * Example:\n   *\n   * ```js\n   * {\n   *   index: 1,\n   *   routes: [\n   *     { key: 'music', title: 'Music', icon: 'queue-music', color: '#3F51B5' },\n   *     { key: 'albums', title: 'Albums', icon: 'album', color: '#009688' },\n   *     { key: 'recents', title: 'Recents', icon: 'history', color: '#795548' },\n   *     { key: 'purchased', title: 'Purchased', icon: 'shopping-cart', color: '#607D8B' },\n   *   ]\n   * }\n   * ```\n   *\n   * `BottomNavigation` is a controlled component, which means the `index` needs to be updated via the `onIndexChange` callback.\n   */\n  navigationState: NavigationState<T>,\n  /**\n   * Callback which is called on tab change, receives the index of the new tab as argument.\n   * The navigation state needs to be updated when it's called, otherwise the change is dropped.\n   */\n  onIndexChange: (index: number) => mixed,\n  /**\n   * Callback which returns a react element to render as the page for the tab. Receives an object containing the route as the argument:\n   *\n   * ```js\n   * renderScene = ({ route, jumpTo }) => {\n   *   switch (route.key) {\n   *     case 'music':\n   *       return <MusicRoute jumpTo={jumpTo} />;\n   *     case 'albums':\n   *       return <AlbumsRoute jumpTo={jumpTo} />;\n   *   }\n   * }\n   * ```\n   *\n   * Pages are lazily rendered, which means that a page will be rendered the first time you navigate to it.\n   * After initial render, all the pages stay rendered to preserve their state.\n   *\n   * You need to make sure that your individual routes implement a `shouldComponentUpdate` to improve the performance.\n   * To make it easier to specify the components, you can use the `SceneMap` helper:\n   *\n   * ```js\n   * renderScene = BottomNavigation.SceneMap({\n   *   music: MusicRoute,\n   *   albums: AlbumsRoute,\n   * });\n   * ```\n   *\n   * Specifying the components this way is easier and takes care of implementing a `shouldComponentUpdate` method.\n   * Each component will receive the current route and a `jumpTo` method as it's props.\n   * The `jumpTo` method can be used to navigate to other tabs programmatically:\n   *\n   * ```js\n   * this.props.jumpTo('albums')\n   * ```\n   */\n  renderScene: (props: {\n    route: T,\n    jumpTo: (key: string) => mixed,\n  }) => ?React.Node,\n  /**\n   * Callback which returns a React Element to be used as tab icon.\n   */\n  renderIcon?: (props: {\n    route: T,\n    focused: boolean,\n    color: string,\n  }) => React.Node,\n  /**\n   * Callback which React Element to be used as tab label.\n   */\n  renderLabel?: (props: {\n    route: T,\n    focused: boolean,\n    color: string,\n  }) => React.Node,\n  /**\n   * Get label text for the tab, uses `route.title` by default. Use `renderLabel` to replace label component.\n   */\n  getLabelText?: (props: { route: T }) => string,\n  /**\n   * Get accessibility label for the tab button. This is read by the screen reader when the user taps the tab.\n   * Uses `route.accessibilityLabel` by default.\n   */\n  getAccessibilityLabel?: (props: { route: T }) => ?string,\n  /**\n   * Get the id to locate this tab button in tests, uses `route.testID` by default.\n   */\n  getTestID?: (props: { route: T }) => ?string,\n  /**\n   * Get badge for the tab, uses `route.badge` by default.\n   */\n  getBadge?: (props: { route: T }) => boolean | number | string,\n  /**\n  /**\n   * Get color for the tab, uses `route.color` by default.\n   */\n  getColor?: (props: { route: T }) => string,\n  /**\n   * Function to execute on tab press. It receives the route for the pressed tab, useful for things like scroll to top.\n   */\n  onTabPress?: (props: { route: T }) => mixed,\n  /**\n   * Custom color for icon and label in the active tab.\n   */\n  activeColor?: string,\n  /**\n   * Custom color for icon and label in the inactive tab.\n   */\n  inactiveColor?: string,\n  /**\n   * Whether the bottom navigation bar is hidden when keyboard is shown.\n   * On Android, this works best when [`windowSoftInputMode`](https://developer.android.com/guide/topics/manifest/activity-element#wsoft) is set to `adjustResize`.\n   */\n  keyboardHidesNavigationBar?: boolean,\n  /**\n   * Style for the bottom navigation bar.\n   * You can set a bottom padding here if you have a translucent navigation bar on Android:\n   *\n   * ```js\n   * barStyle={{ paddingBottom: 48 }}\n   * ```\n   */\n  barStyle?: any,\n  style?: any,\n  /**\n   * @optional\n   */\n  theme: Theme,\n};\n\ntype State = {\n  /**\n   * Visibility of the navigation bar, visible state is 1 and invisible is 0.\n   */\n  visible: Animated.Value,\n  /**\n   * Active state of individual tab items, active state is 1 and inactve state is 0.\n   */\n  tabs: Animated.Value[],\n  /**\n   * The top offset for each tab item to position it offscreen.\n   * Placing items offscreen helps to save memory usage for inactive screens with removeClippedSubviews.\n   * We use animated values for this to prevent unnecesary re-renders.\n   */\n  offsets: Animated.Value[],\n  /**\n   * Index of the currently active tab. Used for setting the background color.\n   * Use don't use the color as an animated value directly, because `setValue` seems to be buggy with colors.\n   */\n  index: Animated.Value,\n  /**\n   * Animation for the background color ripple, used to determine it's scale and opacity.\n   */\n  ripple: Animated.Value,\n  /**\n   * Layout of the navigation bar. The width is used to determine the size and position of the ripple.\n   */\n  layout: { height: number, width: number, measured: boolean },\n  /**\n   * Currently active index. Used only for getDerivedStateFromProps.\n   */\n  current: number,\n  /**\n   * Previously active index. Used to determine the position of the ripple.\n   */\n  previous: number,\n  /**\n   * List of loaded tabs, tabs will be loaded when navigated to.\n   */\n  loaded: number[],\n  /**\n   * Trak whether the keyboard is visible to show and hide the navigation bar.\n   */\n  keyboard: boolean,\n};\n\nconst MIN_RIPPLE_SCALE = 0.001; // Minimum scale is not 0 due to bug with animation\nconst MIN_TAB_WIDTH = 96;\nconst MAX_TAB_WIDTH = 168;\nconst BAR_HEIGHT = 56;\nconst FAR_FAR_AWAY = 9999;\n\nconst Touchable = TouchableRipple.supported\n  ? TouchableRipple\n  : ({ style, children, borderless, centered, rippleColor, ...rest }) => (\n      <TouchableWithoutFeedback {...rest}>\n        <View style={style}>{children}</View>\n      </TouchableWithoutFeedback>\n    );\n\nclass SceneComponent extends React.PureComponent<*> {\n  render() {\n    const { component, ...rest } = this.props;\n    return React.createElement(component, rest);\n  }\n}\n\n/**\n * Bottom navigation provides quick navigation between top-level views of an app with a bottom navigation bar.\n * It is primarily designed for use on mobile.\n *\n * For integration with React Navigation, you can use [react-navigation-material-bottom-tab-navigator](https://github.com/react-navigation/react-navigation-material-bottom-tab-navigator).\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/bottom-navigation.gif\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { BottomNavigation, Text } from 'react-native-paper';\n *\n * const MusicRoute = () => <Text>Music</Text>;\n *\n * const AlbumsRoute = () => <Text>Albums</Text>;\n *\n * const RecentsRoute = () => <Text>Recents</Text>;\n *\n * export default class MyComponent extends React.Component {\n *   state = {\n *     index: 0,\n *     routes: [\n *       { key: 'music', title: 'Music', icon: 'queue-music' },\n *       { key: 'albums', title: 'Albums', icon: 'album' },\n *       { key: 'recents', title: 'Recents', icon: 'history' },\n *     ],\n *   };\n *\n *   _handleIndexChange = index => this.setState({ index });\n *\n *   _renderScene = BottomNavigation.SceneMap({\n *     music: MusicRoute,\n *     albums: AlbumsRoute,\n *     recents: RecentsRoute,\n *   });\n *\n *   render() {\n *     return (\n *       <BottomNavigation\n *         navigationState={this.state}\n *         onIndexChange={this._handleIndexChange}\n *         renderScene={this._renderScene}\n *       />\n *     );\n *   }\n * }\n * ```\n */\nclass BottomNavigation<T: *> extends React.Component<Props<T>, State> {\n  /**\n   * Function which takes a map of route keys to components.\n   * Pure components are used to minmize re-rendering of the pages.\n   * This drastically improves the animation performance.\n   */\n  static SceneMap(scenes: {\n    [key: string]: React.ComponentType<{\n      route: T,\n      jumpTo: (key: string) => mixed,\n    }>,\n  }) {\n    return ({ route, jumpTo }: *) => (\n      <SceneComponent\n        key={route.key}\n        component={scenes[route.key]}\n        route={route}\n        jumpTo={jumpTo}\n      />\n    );\n  }\n\n  static defaultProps = {\n    labeled: true,\n    keyboardHidesNavigationBar: true,\n  };\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const { index, routes } = nextProps.navigationState;\n\n    // Re-create animated values if routes have been added/removed\n    // Preserve previous animated values if they exist, so we don't break animations\n    const tabs = routes.map(\n      // focused === 1, unfocused === 0\n      (_, i) => prevState.tabs[i] || new Animated.Value(i === index ? 1 : 0)\n    );\n    const offsets = routes.map(\n      // offscreen === 1, normal === 0\n      (_, i) => prevState.offsets[i] || new Animated.Value(i === index ? 0 : 1)\n    );\n\n    const nextState = {\n      tabs,\n      offsets,\n    };\n\n    if (index !== prevState.current) {\n      /* $FlowFixMe */\n      Object.assign(nextState, {\n        // Store the current index in state so that we can later check if the index has changed\n        current: index,\n        previous: prevState.current,\n        // Set the current tab to be loaded if it was not loaded before\n        loaded: prevState.loaded.includes(index)\n          ? prevState.loaded\n          : [...prevState.loaded, index],\n      });\n    }\n\n    return nextState;\n  }\n\n  constructor(props) {\n    super(props);\n\n    const { index } = this.props.navigationState;\n\n    this.state = {\n      visible: new Animated.Value(1),\n      tabs: [],\n      offsets: [],\n      index: new Animated.Value(index),\n      ripple: new Animated.Value(MIN_RIPPLE_SCALE),\n      touch: new Animated.Value(MIN_RIPPLE_SCALE),\n      layout: { height: 0, width: 0, measured: false },\n      current: index,\n      previous: 0,\n      loaded: [index],\n      keyboard: false,\n    };\n  }\n\n  componentDidMount() {\n    // Workaround for native animated bug in react-native@^0.57\n    // Context: https://github.com/callstack/react-native-paper/pull/637\n    this._animateToCurrentIndex();\n\n    if (Platform.OS === 'ios') {\n      Keyboard.addListener('keyboardWillShow', this._handleKeyboardShow);\n      Keyboard.addListener('keyboardWillHide', this._handleKeyboardHide);\n    } else {\n      Keyboard.addListener('keyboardDidShow', this._handleKeyboardShow);\n      Keyboard.addListener('keyboardDidHide', this._handleKeyboardHide);\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.navigationState.index === this.props.navigationState.index) {\n      return;\n    }\n\n    // Reset offsets of previous and current tabs before animation\n    this.state.offsets.forEach((offset, i) => {\n      if (\n        i === this.props.navigationState.index ||\n        i === prevProps.navigationState.index\n      ) {\n        offset.setValue(0);\n      }\n    });\n\n    this._animateToCurrentIndex();\n  }\n\n  componentWillUnmount() {\n    if (Platform.OS === 'ios') {\n      Keyboard.removeListener('keyboardWillShow', this._handleKeyboardShow);\n      Keyboard.removeListener('keyboardWillHide', this._handleKeyboardHide);\n    } else {\n      Keyboard.removeListener('keyboardDidShow', this._handleKeyboardShow);\n      Keyboard.removeListener('keyboardDidHide', this._handleKeyboardHide);\n    }\n  }\n\n  _handleKeyboardShow = () =>\n    this.setState({ keyboard: true }, () =>\n      Animated.timing(this.state.visible, {\n        toValue: 0,\n        duration: 150,\n        useNativeDriver: true,\n      }).start()\n    );\n\n  _handleKeyboardHide = () =>\n    Animated.timing(this.state.visible, {\n      toValue: 1,\n      duration: 100,\n      useNativeDriver: true,\n    }).start(() => {\n      this.setState({ keyboard: false });\n    });\n\n  _animateToCurrentIndex = () => {\n    const shifting = this._isShifting();\n    const { routes, index } = this.props.navigationState;\n\n    // Reset the ripple to avoid glitch if it's currently animating\n    this.state.ripple.setValue(MIN_RIPPLE_SCALE);\n\n    Animated.parallel([\n      Animated.timing(this.state.ripple, {\n        toValue: 1,\n        duration: shifting ? 400 : 0,\n        useNativeDriver: true,\n      }),\n      ...routes.map((_, i) =>\n        Animated.timing(this.state.tabs[i], {\n          toValue: i === index ? 1 : 0,\n          duration: shifting ? 150 : 75,\n          useNativeDriver: true,\n        })\n      ),\n    ]).start(({ finished }) => {\n      // Workaround a bug in native animations where this is reset after first animation\n      this.state.tabs.map((tab, i) => tab.setValue(i === index ? 1 : 0));\n\n      // Update the index to change bar's bacground color and then hide the ripple\n      this.state.index.setValue(index);\n      this.state.ripple.setValue(MIN_RIPPLE_SCALE);\n\n      if (finished) {\n        // Position all inactive screens offscreen to save memory usage\n        // Only do it when animation has finished to avoid glitches mid-transition if switching fast\n        this.state.offsets.forEach((offset, i) => {\n          if (i === index) {\n            offset.setValue(0);\n          } else {\n            offset.setValue(1);\n          }\n        });\n      }\n    });\n  };\n\n  _handleLayout = e => {\n    const { layout } = this.state;\n    const { height, width } = e.nativeEvent.layout;\n\n    if (height === layout.height && width === layout.width) {\n      return;\n    }\n\n    this.setState({\n      layout: {\n        height,\n        width,\n        measured: true,\n      },\n    });\n  };\n\n  _handleTabPress = (index: number) => {\n    const { navigationState, onTabPress, onIndexChange } = this.props;\n\n    if (onTabPress) {\n      onTabPress({\n        route: navigationState.routes[index],\n      });\n    }\n\n    if (index !== navigationState.index) {\n      onIndexChange(index);\n    }\n  };\n\n  _jumpTo = (key: string) => {\n    const index = this.props.navigationState.routes.findIndex(\n      route => route.key === key\n    );\n\n    this.props.onIndexChange(index);\n  };\n\n  _isShifting = () =>\n    typeof this.props.shifting === 'boolean'\n      ? this.props.shifting\n      : this.props.navigationState.routes.length > 3;\n\n  render() {\n    const {\n      navigationState,\n      renderScene,\n      renderIcon,\n      renderLabel,\n      getLabelText = ({ route }: Object) => route.title,\n      getBadge = ({ route }: Object) => route.badge,\n      getColor = ({ route }: Object) => route.color,\n      getAccessibilityLabel = ({ route }: Object) => route.accessibilityLabel,\n      getTestID = ({ route }: Object) => route.testID,\n      activeColor,\n      inactiveColor,\n      keyboardHidesNavigationBar,\n      barStyle,\n      labeled,\n      style,\n      theme,\n    } = this.props;\n\n    const { layout, loaded } = this.state;\n    const { routes } = navigationState;\n    const { colors } = theme;\n\n    const shifting = this._isShifting();\n\n    const { backgroundColor: approxBackgroundColor = colors.primary } =\n      StyleSheet.flatten(barStyle) || {};\n\n    const backgroundColor = shifting\n      ? this.state.index.interpolate({\n          inputRange: routes.map((_, i) => i),\n          outputRange: routes.map(\n            route => getColor({ route }) || approxBackgroundColor\n          ),\n        })\n      : approxBackgroundColor;\n\n    const isDark = !color(approxBackgroundColor).light();\n\n    const textColor = isDark ? white : black;\n    const activeTintColor =\n      typeof activeColor !== 'undefined' ? activeColor : textColor;\n    const inactiveTintColor =\n      typeof inactiveColor !== 'undefined'\n        ? inactiveColor\n        : color(textColor)\n            .alpha(0.5)\n            .rgb()\n            .string();\n\n    const touchColor = color(activeColor)\n      .alpha(0.12)\n      .rgb()\n      .string();\n\n    const maxTabWidth = routes.length > 3 ? MIN_TAB_WIDTH : MAX_TAB_WIDTH;\n    const tabWidth = Math.min(\n      // Account for horizontal padding around the items\n      (layout.width * 4) / routes.length,\n      maxTabWidth\n    );\n\n    return (\n      <View\n        style={[styles.container, style]}\n        pointerEvents={layout.measured ? 'auto' : 'none'}\n      >\n        <View style={[styles.content, { backgroundColor: colors.background }]}>\n          {routes.map((route, index) => {\n            if (!loaded.includes(index)) {\n              // Don't render a screen if we've never navigated to it\n              return null;\n            }\n\n            const opacity = this.state.tabs[index];\n            const top = this.state.offsets[index].interpolate({\n              inputRange: [0, 1],\n              outputRange: [0, FAR_FAR_AWAY],\n            });\n\n            const focused = navigationState.index === index;\n\n            return (\n              <Animated.View\n                key={route.key}\n                pointerEvents={focused ? 'auto' : 'none'}\n                accessibilityElementsHidden={!focused}\n                importantForAccessibility={\n                  focused ? 'auto' : 'no-hide-descendants'\n                }\n                style={[StyleSheet.absoluteFill, { opacity }]}\n                collapsable={false}\n                removeClippedSubviews={\n                  // On iOS, set removeClippedSubviews to true only when not focused\n                  // This is an workaround for a bug where the clipped view never re-appears\n                  Platform.OS === 'ios' ? navigationState.index !== index : true\n                }\n              >\n                <Animated.View style={[styles.content, { top }]}>\n                  {renderScene({\n                    route,\n                    jumpTo: this._jumpTo,\n                  })}\n                </Animated.View>\n              </Animated.View>\n            );\n          })}\n        </View>\n        <Surface\n          style={[\n            styles.bar,\n            keyboardHidesNavigationBar\n              ? {\n                  // When the keyboard is shown, slide down the navigation bar\n                  transform: [\n                    {\n                      translateY: this.state.visible.interpolate({\n                        inputRange: [0, 1],\n                        outputRange: [this.state.layout.height, 0],\n                      }),\n                    },\n                  ],\n                  // Absolutely position the navigation bar so that the content is below it\n                  // This is needed to avoid gap at bottom when the navigation bar is hidden\n                  position: this.state.keyboard ? 'absolute' : null,\n                }\n              : null,\n            barStyle,\n          ]}\n          pointerEvents={\n            keyboardHidesNavigationBar && this.state.keyboard ? 'none' : 'auto'\n          }\n          onLayout={this._handleLayout}\n        >\n          <Animated.View style={[styles.barContent, { backgroundColor }]}>\n            <SafeAreaView\n              forceInset={{ top: 'never', bottom: 'always' }}\n              style={[styles.items, { maxWidth: maxTabWidth * routes.length }]}\n            >\n              {shifting ? (\n                <Animated.View\n                  pointerEvents=\"none\"\n                  style={[\n                    styles.ripple,\n                    {\n                      // Since we have a single ripple, we have to reposition it so that it appears to expand from active tab.\n                      // We need to move it from the top to center of the navigation bar and from the left to the active tab.\n                      top: BAR_HEIGHT / 2 - layout.width / 8,\n                      left:\n                        navigationState.index * tabWidth +\n                        tabWidth / 2 -\n                        layout.width / 8,\n                      height: layout.width / 4,\n                      width: layout.width / 4,\n                      borderRadius: layout.width / 2,\n                      backgroundColor: getColor({\n                        route: routes[navigationState.index],\n                      }),\n                      transform: [\n                        {\n                          // Scale to twice the size  to ensure it covers the whole navigation bar\n                          scale: this.state.ripple.interpolate({\n                            inputRange: [0, 1],\n                            outputRange: [0, 8],\n                          }),\n                        },\n                      ],\n                      opacity: this.state.ripple.interpolate({\n                        inputRange: [0, MIN_RIPPLE_SCALE, 0.3, 1],\n                        outputRange: [0, 0, 1, 1],\n                      }),\n                    },\n                  ]}\n                />\n              ) : null}\n              {routes.map((route, index) => {\n                const focused = navigationState.index === index;\n                const active = this.state.tabs[index];\n\n                // Scale the label up\n                const scale =\n                  labeled && shifting\n                    ? active.interpolate({\n                        inputRange: [0, 1],\n                        outputRange: [0.5, 1],\n                      })\n                    : 1;\n\n                // Move down the icon to account for no-label in shifting and smaller label in non-shifting.\n                const translateY = labeled\n                  ? shifting\n                    ? active.interpolate({\n                        inputRange: [0, 1],\n                        outputRange: [7, 0],\n                      })\n                    : 0\n                  : 7;\n\n                // We render the active icon and label on top of inactive ones and cross-fade them on change.\n                // This trick gives the illusion that we are animating between active and inactive colors.\n                // This is to ensure that we can use native driver, as colors cannot be animated with native driver.\n                const activeOpacity = active;\n                const inactiveOpacity = active.interpolate({\n                  inputRange: [0, 1],\n                  outputRange: [1, 0],\n                });\n\n                const badge = getBadge({ route });\n\n                return (\n                  <Touchable\n                    key={route.key}\n                    borderless\n                    centered\n                    rippleColor={touchColor}\n                    onPress={() => this._handleTabPress(index)}\n                    testID={getTestID({ route })}\n                    accessibilityLabel={getAccessibilityLabel({ route })}\n                    accessibilityTraits={\n                      focused ? ['button', 'selected'] : 'button'\n                    }\n                    accessibilityComponentType=\"button\"\n                    accessibilityRole=\"button\"\n                    accessibilityStates={['selected']}\n                    style={styles.item}\n                  >\n                    <View pointerEvents=\"none\">\n                      <Animated.View\n                        style={[\n                          styles.iconContainer,\n                          { transform: [{ translateY }] },\n                        ]}\n                      >\n                        <Animated.View\n                          style={[\n                            styles.iconWrapper,\n                            { opacity: activeOpacity },\n                          ]}\n                        >\n                          {renderIcon ? (\n                            renderIcon({\n                              route,\n                              focused: true,\n                              color: activeTintColor,\n                            })\n                          ) : (\n                            <Icon\n                              source={(route: Object).icon}\n                              color={activeTintColor}\n                              size={24}\n                            />\n                          )}\n                        </Animated.View>\n                        <Animated.View\n                          style={[\n                            styles.iconWrapper,\n                            { opacity: inactiveOpacity },\n                          ]}\n                        >\n                          {renderIcon ? (\n                            renderIcon({\n                              route,\n                              focused: false,\n                              color: inactiveTintColor,\n                            })\n                          ) : (\n                            <Icon\n                              source={(route: Object).icon}\n                              color={inactiveTintColor}\n                              size={24}\n                            />\n                          )}\n                        </Animated.View>\n                        <View\n                          style={[\n                            styles.badgeContainer,\n                            {\n                              right:\n                                (badge != null && typeof badge !== 'boolean'\n                                  ? String(badge).length * -2\n                                  : 0) - 2,\n                            },\n                          ]}\n                        >\n                          {typeof badge === 'boolean' ? (\n                            <Badge visible={badge} size={8} />\n                          ) : (\n                            <Badge visible={badge != null} size={16}>\n                              {badge}\n                            </Badge>\n                          )}\n                        </View>\n                      </Animated.View>\n                      {labeled ? (\n                        <Animated.View\n                          style={[\n                            styles.labelContainer,\n                            { transform: [{ scale }] },\n                          ]}\n                        >\n                          <Animated.View\n                            style={[\n                              styles.labelWrapper,\n                              { opacity: activeOpacity },\n                            ]}\n                          >\n                            {renderLabel ? (\n                              renderLabel({\n                                route,\n                                focused: true,\n                                color: activeTintColor,\n                              })\n                            ) : (\n                              <AnimatedText\n                                style={[\n                                  styles.label,\n                                  { color: activeTintColor },\n                                ]}\n                              >\n                                {getLabelText({ route })}\n                              </AnimatedText>\n                            )}\n                          </Animated.View>\n                          {shifting ? null : (\n                            <Animated.View\n                              style={[\n                                styles.labelWrapper,\n                                { opacity: inactiveOpacity },\n                              ]}\n                            >\n                              {renderLabel ? (\n                                renderLabel({\n                                  route,\n                                  focused: false,\n                                  color: inactiveTintColor,\n                                })\n                              ) : (\n                                <AnimatedText\n                                  style={[\n                                    styles.label,\n                                    { color: inactiveTintColor },\n                                  ]}\n                                >\n                                  {getLabelText({ route })}\n                                </AnimatedText>\n                              )}\n                            </Animated.View>\n                          )}\n                        </Animated.View>\n                      ) : (\n                        <View style={styles.labelContainer} />\n                      )}\n                    </View>\n                  </Touchable>\n                );\n              })}\n            </SafeAreaView>\n          </Animated.View>\n        </Surface>\n      </View>\n    );\n  }\n}\n\npolyfill(BottomNavigation);\n\nexport default withTheme(BottomNavigation);\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    overflow: 'hidden',\n  },\n  content: {\n    flex: 1,\n  },\n  bar: {\n    left: 0,\n    right: 0,\n    bottom: 0,\n    elevation: 8,\n  },\n  barContent: {\n    alignItems: 'center',\n    overflow: 'hidden',\n  },\n  items: {\n    flexDirection: 'row',\n    width: '100%',\n  },\n  item: {\n    flex: 1,\n    // Top padding is 6 and bottom padding is 10\n    // The extra 4dp bottom padding is offset by label's height\n    paddingVertical: 6,\n  },\n  ripple: {\n    position: 'absolute',\n  },\n  iconContainer: {\n    height: 24,\n    width: 24,\n    marginTop: 2,\n    marginHorizontal: 12,\n    alignSelf: 'center',\n  },\n  iconWrapper: {\n    ...StyleSheet.absoluteFillObject,\n    alignItems: 'center',\n  },\n  labelContainer: {\n    height: 16,\n    paddingBottom: 2,\n  },\n  labelWrapper: {\n    ...StyleSheet.absoluteFillObject,\n  },\n  label: {\n    fontSize: 12,\n    textAlign: 'center',\n    backgroundColor: 'transparent',\n    ...((Platform.OS === 'web'\n      ? {\n          whiteSpace: 'nowrap',\n        }\n      : null): any),\n  },\n  badgeContainer: {\n    position: 'absolute',\n    left: 0,\n    top: -2,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}