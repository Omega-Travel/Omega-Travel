{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\Fido\\\\Documents\\\\GitHub\\\\UI-Design-React\\\\app\\\\node_modules\\\\react-native-paper\\\\src\\\\components\\\\Chip.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport color from 'color';\nimport Icon from \"./Icon\";\nimport Surface from \"./Surface\";\nimport Text from \"./Typography/Text\";\nimport TouchableRipple from \"./TouchableRipple\";\nimport { withTheme } from \"../core/theming\";\nimport { black, white } from \"../styles/colors\";\n\nvar Chip = function (_React$Component) {\n  _inherits(Chip, _React$Component);\n\n  var _super = _createSuper(Chip);\n\n  function Chip() {\n    var _this;\n\n    _classCallCheck(this, Chip);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      elevation: new Animated.Value(0)\n    };\n\n    _this._handlePressIn = function () {\n      Animated.timing(_this.state.elevation, {\n        toValue: 4,\n        duration: 200\n      }).start();\n    };\n\n    _this._handlePressOut = function () {\n      Animated.timing(_this.state.elevation, {\n        toValue: 0,\n        duration: 150\n      }).start();\n    };\n\n    return _this;\n  }\n\n  _createClass(Chip, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          mode = _this$props.mode,\n          children = _this$props.children,\n          icon = _this$props.icon,\n          avatar = _this$props.avatar,\n          selected = _this$props.selected,\n          disabled = _this$props.disabled,\n          accessibilityLabel = _this$props.accessibilityLabel,\n          onPress = _this$props.onPress,\n          onClose = _this$props.onClose,\n          textStyle = _this$props.textStyle,\n          style = _this$props.style,\n          theme = _this$props.theme,\n          testID = _this$props.testID,\n          selectedColor = _this$props.selectedColor,\n          rest = _objectWithoutProperties(_this$props, [\"mode\", \"children\", \"icon\", \"avatar\", \"selected\", \"disabled\", \"accessibilityLabel\", \"onPress\", \"onClose\", \"textStyle\", \"style\", \"theme\", \"testID\", \"selectedColor\"]);\n\n      var dark = theme.dark,\n          colors = theme.colors;\n\n      var _ref = StyleSheet.flatten(style) || {},\n          _ref$backgroundColor = _ref.backgroundColor,\n          backgroundColor = _ref$backgroundColor === void 0 ? mode === 'outlined' ? colors.surface : dark ? '#383838' : '#ebebeb' : _ref$backgroundColor,\n          _ref$borderRadius = _ref.borderRadius,\n          borderRadius = _ref$borderRadius === void 0 ? 16 : _ref$borderRadius;\n\n      var borderColor = mode === 'outlined' ? color(selectedColor !== undefined ? selectedColor : color(dark ? white : black)).alpha(0.29).rgb().string() : backgroundColor;\n      var textColor = disabled ? colors.disabled : color(selectedColor !== undefined ? selectedColor : colors.text).alpha(0.87).rgb().string();\n      var iconColor = disabled ? colors.disabled : color(selectedColor !== undefined ? selectedColor : colors.text).alpha(0.54).rgb().string();\n      var selectedBackgroundColor = (dark ? color(backgroundColor).lighten(mode === 'outlined' ? 0.2 : 0.4) : color(backgroundColor).darken(mode === 'outlined' ? 0.08 : 0.2)).rgb().string();\n      var underlayColor = selectedColor ? color(selectedColor).fade(0.5).rgb().string() : selectedBackgroundColor;\n      var accessibilityTraits = ['button'];\n      var accessibilityStates = [];\n\n      if (selected) {\n        accessibilityTraits.push('selected');\n        accessibilityStates.push('selected');\n      }\n\n      if (disabled) {\n        accessibilityTraits.push('disabled');\n        accessibilityStates.push('disabled');\n      }\n\n      return React.createElement(Surface, _extends({\n        style: [styles.container, {\n          elevation: Platform.OS === 'android' ? this.state.elevation : 0,\n          backgroundColor: selected ? selectedBackgroundColor : backgroundColor,\n          borderColor: borderColor,\n          borderRadius: borderRadius\n        }, style]\n      }, rest, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 7\n        }\n      }), React.createElement(TouchableRipple, {\n        borderless: true,\n        delayPressIn: 0,\n        style: {\n          borderRadius: borderRadius\n        },\n        onPress: onPress,\n        onPressIn: this._handlePressIn,\n        onPressOut: this._handlePressOut,\n        underlayColor: underlayColor,\n        disabled: disabled,\n        accessibilityLabel: accessibilityLabel,\n        accessibilityTraits: accessibilityTraits,\n        accessibilityComponentType: \"button\",\n        accessibilityRole: \"button\",\n        accessibilityStates: accessibilityStates,\n        testID: testID,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 9\n        }\n      }, React.createElement(View, {\n        style: styles.content,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 245,\n          columnNumber: 11\n        }\n      }, avatar && !icon ? React.createElement(View, {\n        style: [styles.avatarWrapper, disabled && {\n          opacity: 0.26\n        }],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 15\n        }\n      }, React.isValidElement(avatar) ? React.cloneElement(avatar, {\n        style: [styles.avatar, avatar.props.style]\n      }) : avatar) : null, icon || selected ? React.createElement(View, {\n        style: [styles.icon, avatar ? [styles.avatar, styles.avatarSelected] : null],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 260,\n          columnNumber: 15\n        }\n      }, React.createElement(Icon, {\n        source: icon || 'done',\n        color: avatar ? white : iconColor,\n        size: 18,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 266,\n          columnNumber: 17\n        }\n      })) : null, React.createElement(Text, {\n        numberOfLines: 1,\n        style: [styles.text, {\n          color: textColor,\n          marginRight: onClose ? 4 : 8,\n          marginLeft: avatar || icon || selected ? 4 : 8\n        }, textStyle],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 13\n        }\n      }, children), onClose ? React.createElement(TouchableWithoutFeedback, {\n        onPress: onClose,\n        accessibilityTraits: \"button\",\n        accessibilityComponentType: \"button\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 288,\n          columnNumber: 15\n        }\n      }, React.createElement(View, {\n        style: styles.icon,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 293,\n          columnNumber: 17\n        }\n      }, React.createElement(Icon, {\n        source: \"cancel\",\n        size: 16,\n        color: iconColor,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 294,\n          columnNumber: 19\n        }\n      }))) : null)));\n    }\n  }]);\n\n  return Chip;\n}(React.Component);\n\nChip.defaultProps = {\n  mode: 'flat',\n  disabled: false,\n  selected: false\n};\nvar styles = StyleSheet.create({\n  container: {\n    borderWidth: StyleSheet.hairlineWidth,\n    borderStyle: 'solid'\n  },\n  content: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingHorizontal: 4\n  },\n  icon: {\n    padding: 4\n  },\n  text: {\n    minHeight: 24,\n    lineHeight: 24,\n    textAlignVertical: 'center',\n    marginVertical: 4\n  },\n  avatar: {\n    width: 24,\n    height: 24,\n    borderRadius: 12\n  },\n  avatarWrapper: {\n    marginRight: 4\n  },\n  avatarSelected: {\n    position: 'absolute',\n    top: 4,\n    left: 4,\n    backgroundColor: 'rgba(0, 0, 0, .29)'\n  }\n});\nexport default withTheme(Chip);","map":{"version":3,"sources":["C:/Users/Fido/Documents/GitHub/UI-Design-React/app/node_modules/react-native-paper/src/components/Chip.js"],"names":["React","color","Icon","Surface","Text","TouchableRipple","withTheme","black","white","Chip","state","elevation","Animated","Value","_handlePressIn","timing","toValue","duration","start","_handlePressOut","props","mode","children","icon","avatar","selected","disabled","accessibilityLabel","onPress","onClose","textStyle","style","theme","testID","selectedColor","rest","dark","colors","StyleSheet","flatten","backgroundColor","surface","borderRadius","borderColor","undefined","alpha","rgb","string","textColor","text","iconColor","selectedBackgroundColor","lighten","darken","underlayColor","fade","accessibilityTraits","accessibilityStates","push","styles","container","Platform","OS","content","avatarWrapper","opacity","isValidElement","cloneElement","avatarSelected","marginRight","marginLeft","Component","defaultProps","create","borderWidth","hairlineWidth","borderStyle","flexDirection","alignItems","paddingHorizontal","padding","minHeight","lineHeight","textAlignVertical","marginVertical","width","height","position","top","left"],"mappings":"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","sourcesContent":["/* @flow */\n\nimport * as React from 'react';\nimport {\n  View,\n  StyleSheet,\n  Animated,\n  TouchableWithoutFeedback,\n  Platform,\n} from 'react-native';\nimport color from 'color';\nimport Icon from './Icon';\nimport Surface from './Surface';\nimport Text from './Typography/Text';\nimport TouchableRipple from './TouchableRipple';\nimport { withTheme } from '../core/theming';\nimport { black, white } from '../styles/colors';\nimport type { Theme } from '../types';\nimport type { IconSource } from './Icon';\n\ntype Props = React.ElementConfig<typeof Surface> & {|\n  /**\n   * Mode of the chip.\n   * - `flat` - flat chip without outline.\n   * - `outlined` - chip with an outline.\n   */\n  mode?: 'flat' | 'outlined',\n  /**\n   * Text content of the `Chip`.\n   */\n  children: React.Node,\n  /**\n   * Icon to display for the `Chip`. Both icon and avatar cannot be specified.\n   */\n  icon?: IconSource,\n  /**\n   * Avatar to display for the `Chip`. Both icon and avatar cannot be specified.\n   */\n  avatar?: React.Node,\n  /**\n   * Whether chip is selected.\n   */\n  selected?: boolean,\n  /**\n   * Whether to style the chip color as selected.\n   */\n  selectedColor?: string,\n  /**\n   * Whether the chip is disabled. A disabled chip is greyed out and `onPress` is not called on touch.\n   */\n  disabled?: boolean,\n  /**\n   * Accessibility label for the chip. This is read by the screen reader when the user taps the chip.\n   */\n  accessibilityLabel?: string,\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => mixed,\n  /**\n   * Function to execute on close button press. The close button appears only when this prop is specified.\n   */\n  onClose?: () => mixed,\n  /**\n   * Style of chip's text\n   */\n  textStyle?: any,\n  style?: any,\n  /**\n   * @optional\n   */\n  theme: Theme,\n  /**\n   * Pass down testID from chip props to touchable for Detox tests.\n   */\n  testID?: string,\n|};\n\ntype State = {\n  elevation: Animated.Value,\n};\n\n/**\n * Chips can be used to display entities in small blocks.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/chip-1.png\" />\n *     <figcaption>Flat chip</figcaption>\n *   </figure>\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/chip-2.png\" />\n *     <figcaption>Outlined chip</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Chip } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Chip icon=\"info\" onPress={() => console.log('Pressed')}>Example Chip</Chip>\n * );\n *\n * export default MyComponent;\n * ```\n */\nclass Chip extends React.Component<Props, State> {\n  static defaultProps = {\n    mode: 'flat',\n    disabled: false,\n    selected: false,\n  };\n\n  state = {\n    elevation: new Animated.Value(0),\n  };\n\n  _handlePressIn = () => {\n    Animated.timing(this.state.elevation, {\n      toValue: 4,\n      duration: 200,\n    }).start();\n  };\n\n  _handlePressOut = () => {\n    Animated.timing(this.state.elevation, {\n      toValue: 0,\n      duration: 150,\n    }).start();\n  };\n\n  render() {\n    const {\n      mode,\n      children,\n      icon,\n      avatar,\n      selected,\n      disabled,\n      accessibilityLabel,\n      onPress,\n      onClose,\n      textStyle,\n      style,\n      theme,\n      testID,\n      selectedColor,\n      ...rest\n    } = this.props;\n    const { dark, colors } = theme;\n\n    const {\n      backgroundColor = mode === 'outlined'\n        ? colors.surface\n        : dark\n          ? '#383838'\n          : '#ebebeb',\n      borderRadius = 16,\n    } = StyleSheet.flatten(style) || {};\n\n    const borderColor =\n      mode === 'outlined'\n        ? color(\n            selectedColor !== undefined\n              ? selectedColor\n              : color(dark ? white : black)\n          )\n            .alpha(0.29)\n            .rgb()\n            .string()\n        : backgroundColor;\n    const textColor = disabled\n      ? colors.disabled\n      : color(selectedColor !== undefined ? selectedColor : colors.text)\n          .alpha(0.87)\n          .rgb()\n          .string();\n    const iconColor = disabled\n      ? colors.disabled\n      : color(selectedColor !== undefined ? selectedColor : colors.text)\n          .alpha(0.54)\n          .rgb()\n          .string();\n    const selectedBackgroundColor = (dark\n      ? color(backgroundColor).lighten(mode === 'outlined' ? 0.2 : 0.4)\n      : color(backgroundColor).darken(mode === 'outlined' ? 0.08 : 0.2)\n    )\n      .rgb()\n      .string();\n\n    const underlayColor = selectedColor\n      ? color(selectedColor)\n          .fade(0.5)\n          .rgb()\n          .string()\n      : selectedBackgroundColor;\n\n    const accessibilityTraits = ['button'];\n    const accessibilityStates = [];\n\n    if (selected) {\n      accessibilityTraits.push('selected');\n      accessibilityStates.push('selected');\n    }\n\n    if (disabled) {\n      accessibilityTraits.push('disabled');\n      accessibilityStates.push('disabled');\n    }\n\n    return (\n      <Surface\n        style={[\n          styles.container,\n          {\n            elevation: Platform.OS === 'android' ? this.state.elevation : 0,\n            backgroundColor: selected\n              ? selectedBackgroundColor\n              : backgroundColor,\n            borderColor,\n            borderRadius,\n          },\n          style,\n        ]}\n        {...rest}\n      >\n        <TouchableRipple\n          borderless\n          delayPressIn={0}\n          style={{ borderRadius }}\n          onPress={onPress}\n          onPressIn={this._handlePressIn}\n          onPressOut={this._handlePressOut}\n          underlayColor={underlayColor}\n          disabled={disabled}\n          accessibilityLabel={accessibilityLabel}\n          accessibilityTraits={accessibilityTraits}\n          accessibilityComponentType=\"button\"\n          accessibilityRole=\"button\"\n          accessibilityStates={accessibilityStates}\n          testID={testID}\n        >\n          <View style={styles.content}>\n            {avatar && !icon ? (\n              <View\n                style={[styles.avatarWrapper, disabled && { opacity: 0.26 }]}\n              >\n                {React.isValidElement(avatar)\n                  ? /* $FlowFixMe */\n                    React.cloneElement(avatar, {\n                      /* $FlowFixMe */\n                      style: [styles.avatar, avatar.props.style],\n                    })\n                  : avatar}\n              </View>\n            ) : null}\n            {icon || selected ? (\n              <View\n                style={[\n                  styles.icon,\n                  avatar ? [styles.avatar, styles.avatarSelected] : null,\n                ]}\n              >\n                <Icon\n                  source={icon || 'done'}\n                  color={avatar ? white : iconColor}\n                  size={18}\n                />\n              </View>\n            ) : null}\n            <Text\n              numberOfLines={1}\n              style={[\n                styles.text,\n                {\n                  color: textColor,\n                  marginRight: onClose ? 4 : 8,\n                  marginLeft: avatar || icon || selected ? 4 : 8,\n                },\n                textStyle,\n              ]}\n            >\n              {(children: any)}\n            </Text>\n            {onClose ? (\n              <TouchableWithoutFeedback\n                onPress={onClose}\n                accessibilityTraits=\"button\"\n                accessibilityComponentType=\"button\"\n              >\n                <View style={styles.icon}>\n                  <Icon source=\"cancel\" size={16} color={iconColor} />\n                </View>\n              </TouchableWithoutFeedback>\n            ) : null}\n          </View>\n        </TouchableRipple>\n      </Surface>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    borderWidth: StyleSheet.hairlineWidth,\n    borderStyle: 'solid',\n  },\n  content: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingHorizontal: 4,\n  },\n  icon: {\n    padding: 4,\n  },\n  text: {\n    minHeight: 24,\n    lineHeight: 24,\n    textAlignVertical: 'center',\n    marginVertical: 4,\n  },\n  avatar: {\n    width: 24,\n    height: 24,\n    borderRadius: 12,\n  },\n  avatarWrapper: {\n    marginRight: 4,\n  },\n  avatarSelected: {\n    position: 'absolute',\n    top: 4,\n    left: 4,\n    backgroundColor: 'rgba(0, 0, 0, .29)',\n  },\n});\n\nexport default withTheme(Chip);\n"]},"metadata":{},"sourceType":"module"}