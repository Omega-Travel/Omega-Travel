{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _taggedTemplateLiteralLoose from \"@babel/runtime/helpers/taggedTemplateLiteralLoose\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteralLoose([\"\\n  mutation login($input: LoginInput!) {\\n    login(input: $input) {      \\n      ok,\\n      error,\\n      user {\\n        id,\\n        fullname,\\n        email,\\n        password,\\n        token\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { useMutation } from \"@apollo/react-hooks\";\nimport { gql } from \"apollo-boost\";\nimport { useForm } from \"../../../hooks/useForm\";\nvar LOGIN_MUTATION = gql(_templateObject());\nexport var useLogin = function useLogin() {\n  var _useMutation = useMutation(LOGIN_MUTATION),\n      _useMutation2 = _slicedToArray(_useMutation, 1),\n      login = _useMutation2[0];\n\n  var _useForm = useForm({\n    onSubmit: function onSubmit(_ref) {\n      var values = _extends({}, _ref);\n\n      return login({\n        variables: {\n          input: values\n        }\n      }).then(function _callee(_ref2) {\n        var data;\n        return _regeneratorRuntime.async(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                data = _ref2.data;\n                return _context.abrupt(\"return\", data);\n\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      });\n    },\n    initialValues: {\n      password: '',\n      email: ''\n    }\n  }),\n      state = _useForm.state,\n      handleChange = _useForm.handleChange,\n      handleSubmit = _useForm.handleSubmit;\n\n  return {\n    state: state,\n    handleChange: handleChange,\n    handleSubmit: handleSubmit\n  };\n};","map":{"version":3,"sources":["C:/Users/Fido/Documents/GitHub/UI-Design-React/app/screens/Login/hooks/useLogin.ts"],"names":["useMutation","gql","useForm","LOGIN_MUTATION","useLogin","login","onSubmit","values","variables","input","then","data","initialValues","password","email","state","handleChange","handleSubmit"],"mappings":";;;;;;;;;;;;;;;AAAA,SAASA,WAAT,QAA4B,qBAA5B;AACA,SAASC,GAAT,QAAoB,cAApB;AAEA,SAASC,OAAT;AAEA,IAAMC,cAAc,GAAGF,GAAH,mBAApB;AAgBA,OAAO,IAAMG,QAAQ,GAAG,SAAXA,QAAW,GAAM;AAAA,qBACVJ,WAAW,CAACG,cAAD,CADD;AAAA;AAAA,MACnBE,KADmB;;AAAA,iBAEoBH,OAAO,CAAC;AACpDI,IAAAA,QAAQ,EAAE,wBAAmB;AAAA,UAAbC,MAAa;;AAC3B,aAAOF,KAAK,CAAC;AACXG,QAAAA,SAAS,EAAE;AACTC,UAAAA,KAAK,EAAEF;AADE;AADA,OAAD,CAAL,CAIJG,IAJI,CAIC;AAAA;AAAA;AAAA;AAAA;AAAA;AAASC,gBAAAA,IAAT,SAASA,IAAT;AAAA,iDACCA,IADD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAJD,CAAP;AAOD,KATmD;AAUpDC,IAAAA,aAAa,EAAE;AACbC,MAAAA,QAAQ,EAAE,EADG;AAEbC,MAAAA,KAAK,EAAE;AAFM;AAVqC,GAAD,CAF3B;AAAA,MAElBC,KAFkB,YAElBA,KAFkB;AAAA,MAEXC,YAFW,YAEXA,YAFW;AAAA,MAEGC,YAFH,YAEGA,YAFH;;AAiB1B,SAAO;AACLF,IAAAA,KAAK,EAALA,KADK;AAELC,IAAAA,YAAY,EAAZA,YAFK;AAGLC,IAAAA,YAAY,EAAZA;AAHK,GAAP;AAKH,CAtBM","sourcesContent":["import { useMutation } from \"@apollo/react-hooks\";\r\nimport { gql } from \"apollo-boost\";\r\nimport { AsyncStorage } from 'react-native';\r\nimport { useForm } from '../../../hooks/useForm';\r\n\r\nconst LOGIN_MUTATION = gql`\r\n  mutation login($input: LoginInput!) {\r\n    login(input: $input) {      \r\n      ok,\r\n      error,\r\n      user {\r\n        id,\r\n        fullname,\r\n        email,\r\n        password,\r\n        token\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const useLogin = () => {\r\n    const [login] = useMutation(LOGIN_MUTATION);\r\n    const { state, handleChange, handleSubmit } = useForm({\r\n      onSubmit: ({ ...values }) => {\r\n        return login({\r\n          variables: {\r\n            input: values\r\n          },\r\n        }).then(async ({ data }) => {\r\n          return data;\r\n        });\r\n      },\r\n      initialValues: {\r\n        password: '',\r\n        email: ''\r\n      }\r\n    });\r\n    return {\r\n      state,\r\n      handleChange,\r\n      handleSubmit\r\n    };\r\n}"]},"metadata":{},"sourceType":"module"}