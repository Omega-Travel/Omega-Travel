{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\Fido\\\\Documents\\\\GitHub\\\\UI-Design-React\\\\app\\\\node_modules\\\\react-native-paper\\\\src\\\\components\\\\RadioButton.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport * as React from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport RadioButtonGroup, { RadioButtonContext } from \"./RadioButtonGroup\";\nimport RadioButtonAndroid from \"./RadioButtonAndroid\";\nimport RadioButtonIOS from \"./RadioButtonIOS\";\nimport { withTheme } from \"../core/theming\";\n\nvar RadioButton = function (_React$Component) {\n  _inherits(RadioButton, _React$Component);\n\n  var _super = _createSuper(RadioButton);\n\n  function RadioButton() {\n    var _this;\n\n    _classCallCheck(this, RadioButton);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _this.handlePress = function (context) {\n      var onPress = _this.props.onPress;\n      var onValueChange = context.onValueChange;\n      onPress || onValueChange(_this.props.value);\n    };\n\n    _this.isChecked = function (context) {\n      return context.value === _this.props.value ? 'checked' : 'unchecked';\n    };\n\n    return _this;\n  }\n\n  _createClass(RadioButton, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var Button = Platform.select({\n        default: RadioButtonAndroid,\n        ios: RadioButtonIOS\n      });\n      return React.createElement(RadioButtonContext.Consumer, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 7\n        }\n      }, function (context) {\n        return React.createElement(Button, _extends({}, _this2.props, {\n          status: _this2.props.status || context && _this2.isChecked(context),\n          onPress: function onPress() {\n            return context && _this2.handlePress(context);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 11\n          }\n        }));\n      });\n    }\n  }]);\n\n  return RadioButton;\n}(React.Component);\n\nRadioButton.Group = RadioButtonGroup;\nRadioButton.Android = RadioButtonAndroid;\nRadioButton.IOS = RadioButtonIOS;\nexport default withTheme(RadioButton);","map":{"version":3,"sources":["C:/Users/Fido/Documents/GitHub/UI-Design-React/app/node_modules/react-native-paper/src/components/RadioButton.js"],"names":["React","RadioButtonGroup","RadioButtonContext","RadioButtonAndroid","RadioButtonIOS","withTheme","RadioButton","handlePress","context","onPress","props","onValueChange","value","isChecked","Button","Platform","select","default","ios","status","Component","Group","Android","IOS"],"mappings":";;;;;;;;;;;;AAEA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;;AAEA,OAAOC,gBAAP,IAA2BC,kBAA3B;AACA,OAAOC,kBAAP;AACA,OAAOC,cAAP;AACA,SAASC,SAAT;;IAwFMC,W;;;;;;;;;;;;;;;;UAUJC,W,GAAc,UAAAC,OAAO,EAAI;AAAA,UACfC,OADe,GACH,MAAKC,KADF,CACfD,OADe;AAAA,UAEfE,aAFe,GAEGH,OAFH,CAEfG,aAFe;AAIvBF,MAAAA,OAAO,IAAIE,aAAa,CAAC,MAAKD,KAAL,CAAWE,KAAZ,CAAxB;AACD,K;;UAEDC,S,GAAY,UAAAL,OAAO;AAAA,aACjBA,OAAO,CAACI,KAAR,KAAkB,MAAKF,KAAL,CAAWE,KAA7B,GAAqC,SAArC,GAAiD,WADhC;AAAA,K;;;;;;;6BAGV;AAAA;;AACP,UAAME,MAAM,GAAGC,QAAQ,CAACC,MAAT,CAAgB;AAC7BC,QAAAA,OAAO,EAAEd,kBADoB;AAE7Be,QAAAA,GAAG,EAAEd;AAFwB,OAAhB,CAAf;AAKA,aACE,oBAAC,kBAAD,CAAoB,QAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG,UAAAI,OAAO;AAAA,eACN,oBAAC,MAAD,eACM,MAAI,CAACE,KADX;AAEE,UAAA,MAAM,EAAE,MAAI,CAACA,KAAL,CAAWS,MAAX,IAAsBX,OAAO,IAAI,MAAI,CAACK,SAAL,CAAeL,OAAf,CAF3C;AAGE,UAAA,OAAO,EAAE;AAAA,mBAAMA,OAAO,IAAI,MAAI,CAACD,WAAL,CAAiBC,OAAjB,CAAjB;AAAA,WAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WADM;AAAA,OADV,CADF;AAWD;;;;EArCuBR,KAAK,CAACoB,S;;AAA1Bd,W,CAEGe,K,GAAQpB,gB;AAFXK,W,CAKGgB,O,GAAUnB,kB;AALbG,W,CAQGiB,G,GAAMnB,c;AAgCf,eAAeC,SAAS,CAACC,WAAD,CAAxB","sourcesContent":["/* @flow */\n\nimport * as React from 'react';\nimport { Platform } from 'react-native';\nimport RadioButtonGroup, { RadioButtonContext } from './RadioButtonGroup';\nimport RadioButtonAndroid from './RadioButtonAndroid';\nimport RadioButtonIOS from './RadioButtonIOS';\nimport { withTheme } from '../core/theming';\nimport type { Theme } from '../types';\n\ntype Props = {|\n  /**\n   * Value of the radio button\n   */\n  value: string,\n  /**\n   * Status of radio button.\n   */\n  status?: 'checked' | 'unchecked',\n  /**\n   * Whether radio is disabled.\n   */\n  disabled?: boolean,\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => mixed,\n  /**\n   * Custom color for unchecked radio.\n   */\n  uncheckedColor?: string,\n  /**\n   * Custom color for radio.\n   */\n  color?: string,\n  /**\n   * @optional\n   */\n  theme: Theme,\n|};\n\n/**\n * Radio buttons allow the selection a single option from a set.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/radio-enabled.android.png\" />\n *     <figcaption>Android (enabled)</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/radio-disabled.android.png\" />\n *     <figcaption>Android (disabled)</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/radio-enabled.ios.png\" />\n *     <figcaption>iOS (enabled)</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/radio-disabled.ios.png\" />\n *     <figcaption>iOS (disabled)</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { RadioButton } from 'react-native-paper';\n *\n * export default class MyComponent extends React.Component {\n *   state = {\n *     checked: 'first',\n *   };\n *\n *   render() {\n *     const { checked } = this.state;\n *\n *     return (\n *       <View>\n *         <RadioButton\n *           value=\"first\"\n *           status={checked === 'first' ? 'checked' : 'unchecked'}\n *           onPress={() => { this.setState({ checked: 'first' }); }}\n *         />\n *         <RadioButton\n *           value=\"second\"\n *           status={checked === 'second' ? 'checked' : 'unchecked'}\n *           onPress={() => { this.setState({ checked: 'second' }); }}\n *         />\n *       </View>\n *     );\n *   }\n * }\n * ```\n */\nclass RadioButton extends React.Component<Props> {\n  // @component ./RadioButtonGroup.js\n  static Group = RadioButtonGroup;\n\n  // @component ./RadioButtonAndroid.js\n  static Android = RadioButtonAndroid;\n\n  // @component ./RadioButtonIOS.js\n  static IOS = RadioButtonIOS;\n\n  handlePress = context => {\n    const { onPress } = this.props;\n    const { onValueChange } = context;\n\n    onPress || onValueChange(this.props.value);\n  };\n\n  isChecked = context =>\n    context.value === this.props.value ? 'checked' : 'unchecked';\n\n  render() {\n    const Button = Platform.select({\n      default: RadioButtonAndroid,\n      ios: RadioButtonIOS,\n    });\n\n    return (\n      <RadioButtonContext.Consumer>\n        {context => (\n          <Button\n            {...this.props}\n            status={this.props.status || (context && this.isChecked(context))}\n            onPress={() => context && this.handlePress(context)}\n          />\n        )}\n      </RadioButtonContext.Consumer>\n    );\n  }\n}\n\nexport default withTheme(RadioButton);\n"]},"metadata":{},"sourceType":"module"}