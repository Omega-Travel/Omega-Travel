{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\Fido\\\\Documents\\\\GitHub\\\\UI-Design-React\\\\app\\\\node_modules\\\\react-native-paper\\\\src\\\\components\\\\ToggleButton\\\\ToggleButtonGroup.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport createReactContext from 'create-react-context';\nimport ToggleButton from \"./ToggleButton\";\nexport var ToggleButtonGroupContext = createReactContext(null);\n\nvar ToggleButtonGroup = function (_React$Component) {\n  _inherits(ToggleButtonGroup, _React$Component);\n\n  var _super = _createSuper(ToggleButtonGroup);\n\n  function ToggleButtonGroup() {\n    _classCallCheck(this, ToggleButtonGroup);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(ToggleButtonGroup, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          value = _this$props.value,\n          onValueChange = _this$props.onValueChange,\n          children = _this$props.children;\n      var count = React.Children.count(children);\n      return React.createElement(ToggleButtonGroupContext.Provider, {\n        value: {\n          value: value,\n          onValueChange: onValueChange\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 7\n        }\n      }, React.Children.map(children, function (child, i) {\n        if (child && child.type === ToggleButton) {\n          return React.cloneElement(child, {\n            style: [styles.button, i === 0 ? styles.first : i === count - 1 ? styles.last : styles.middle, child.props.style]\n          });\n        }\n\n        return child;\n      }));\n    }\n  }]);\n\n  return ToggleButtonGroup;\n}(React.Component);\n\nToggleButtonGroup.displayName = 'ToggleButton.Group';\nvar styles = StyleSheet.create({\n  button: {\n    borderWidth: StyleSheet.hairlineWidth\n  },\n  first: {\n    borderTopRightRadius: 0,\n    borderBottomRightRadius: 0\n  },\n  middle: {\n    borderRadius: 0,\n    borderLeftWidth: 0\n  },\n  last: {\n    borderLeftWidth: 0,\n    borderTopLeftRadius: 0,\n    borderBottomLeftRadius: 0\n  }\n});\nexport default ToggleButtonGroup;","map":{"version":3,"sources":["C:/Users/Fido/Documents/GitHub/UI-Design-React/app/node_modules/react-native-paper/src/components/ToggleButton/ToggleButtonGroup.js"],"names":["React","createReactContext","ToggleButton","ToggleButtonGroupContext","ToggleButtonGroup","props","value","onValueChange","children","count","Children","map","child","i","type","cloneElement","style","styles","button","first","last","middle","Component","displayName","StyleSheet","create","borderWidth","hairlineWidth","borderTopRightRadius","borderBottomRightRadius","borderRadius","borderLeftWidth","borderTopLeftRadius","borderBottomLeftRadius"],"mappings":";;;;;;;;;;;AAEA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;;AAEA,OAAOC,kBAAP,MAAiD,sBAAjD;AACA,OAAOC,YAAP;AAsBA,OAAO,IAAMC,wBAA2D,GAAGF,kBAAkB,CAC3F,IAD2F,CAAtF;;IAgCDG,iB;;;;;;;;;;;;;6BAGK;AAAA,wBACoC,KAAKC,KADzC;AAAA,UACCC,KADD,eACCA,KADD;AAAA,UACQC,aADR,eACQA,aADR;AAAA,UACuBC,QADvB,eACuBA,QADvB;AAEP,UAAMC,KAAK,GAAGT,KAAK,CAACU,QAAN,CAAeD,KAAf,CAAqBD,QAArB,CAAd;AAEA,aACE,oBAAC,wBAAD,CAA0B,QAA1B;AACE,QAAA,KAAK,EAAE;AACLF,UAAAA,KAAK,EAALA,KADK;AAELC,UAAAA,aAAa,EAAbA;AAFK,SADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAMGP,KAAK,CAACU,QAAN,CAAeC,GAAf,CAAmBH,QAAnB,EAA6B,UAACI,KAAD,EAAQC,CAAR,EAAc;AAC1C,YAAID,KAAK,IAAIA,KAAK,CAACE,IAAN,KAAeZ,YAA5B,EAA0C;AACxC,iBAAOF,KAAK,CAACe,YAAN,CAAmBH,KAAnB,EAA0B;AAC/BI,YAAAA,KAAK,EAAE,CACLC,MAAM,CAACC,MADF,EAELL,CAAC,KAAK,CAAN,GACII,MAAM,CAACE,KADX,GAEIN,CAAC,KAAKJ,KAAK,GAAG,CAAd,GACEQ,MAAM,CAACG,IADT,GAEEH,MAAM,CAACI,MANR,EAOLT,KAAK,CAACP,KAAN,CAAYW,KAPP;AADwB,WAA1B,CAAP;AAWD;;AAED,eAAOJ,KAAP;AACD,OAhBA,CANH,CADF;AA0BD;;;;EAjC6BZ,KAAK,CAACsB,S;;AAAhClB,iB,CACGmB,W,GAAc,oB;AAmCvB,IAAMN,MAAM,GAAGO,UAAU,CAACC,MAAX,CAAkB;AAC/BP,EAAAA,MAAM,EAAE;AACNQ,IAAAA,WAAW,EAAEF,UAAU,CAACG;AADlB,GADuB;AAK/BR,EAAAA,KAAK,EAAE;AACLS,IAAAA,oBAAoB,EAAE,CADjB;AAELC,IAAAA,uBAAuB,EAAE;AAFpB,GALwB;AAU/BR,EAAAA,MAAM,EAAE;AACNS,IAAAA,YAAY,EAAE,CADR;AAENC,IAAAA,eAAe,EAAE;AAFX,GAVuB;AAe/BX,EAAAA,IAAI,EAAE;AACJW,IAAAA,eAAe,EAAE,CADb;AAEJC,IAAAA,mBAAmB,EAAE,CAFjB;AAGJC,IAAAA,sBAAsB,EAAE;AAHpB;AAfyB,CAAlB,CAAf;AAsBA,eAAe7B,iBAAf","sourcesContent":["/* @flow */\n\nimport * as React from 'react';\nimport { StyleSheet } from 'react-native';\nimport createReactContext, { type Context } from 'create-react-context';\nimport ToggleButton from './ToggleButton';\n\ntype Props = {\n  /**\n   * Function to execute on selection change.\n   */\n  onValueChange: (value: string) => mixed,\n  /**\n   * Value of the currently selected toggle button.\n   */\n  value: string,\n  /**\n   * React elements containing toggle buttons.\n   */\n  children: React.Node,\n};\n\ntype ToggleButtonContextType = {\n  value: string,\n  onValueChange: (item: string) => mixed,\n};\n\nexport const ToggleButtonGroupContext: Context<?ToggleButtonContextType> = createReactContext(\n  null\n);\n\n/**\n * Toggle group allows to control a group of toggle buttons.\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { ToggleButton } from 'react-native-paper';\n *\n * export default class MyComponent extends React.Component {\n *   state = {\n *     value: 'left',\n *   };\n *\n *   render() {\n *     return(\n *       <ToggleButton.Group\n *         onValueChange={value => this.setState({ value })}\n *         value={this.state.value}\n *       >\n *           <ToggleButton icon=\"format-align-left\" value=\"left\" />\n *           <ToggleButton icon=\"format-align-right\" value=\"right\" />\n *       </ToggleButton.Group>\n *     )\n *   }\n * }\n *```\n */\nclass ToggleButtonGroup extends React.Component<Props> {\n  static displayName = 'ToggleButton.Group';\n\n  render() {\n    const { value, onValueChange, children } = this.props;\n    const count = React.Children.count(children);\n\n    return (\n      <ToggleButtonGroupContext.Provider\n        value={{\n          value,\n          onValueChange,\n        }}\n      >\n        {React.Children.map(children, (child, i) => {\n          if (child && child.type === ToggleButton) {\n            return React.cloneElement(child, {\n              style: [\n                styles.button,\n                i === 0\n                  ? styles.first\n                  : i === count - 1\n                    ? styles.last\n                    : styles.middle,\n                child.props.style,\n              ],\n            });\n          }\n\n          return child;\n        })}\n      </ToggleButtonGroupContext.Provider>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  button: {\n    borderWidth: StyleSheet.hairlineWidth,\n  },\n\n  first: {\n    borderTopRightRadius: 0,\n    borderBottomRightRadius: 0,\n  },\n\n  middle: {\n    borderRadius: 0,\n    borderLeftWidth: 0,\n  },\n\n  last: {\n    borderLeftWidth: 0,\n    borderTopLeftRadius: 0,\n    borderBottomLeftRadius: 0,\n  },\n});\n\nexport default ToggleButtonGroup;\n"]},"metadata":{},"sourceType":"module"}